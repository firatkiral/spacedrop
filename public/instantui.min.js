/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ 198:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(645);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0__);
// Imports

var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0___default()(function(i){return i[1]});
___CSS_LOADER_EXPORT___.push([module.id, "@import url(https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css);"]);
// Module
___CSS_LOADER_EXPORT___.push([module.id, "", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ 556:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(645);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0__);
// Imports

var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0___default()(function(i){return i[1]});
// Module
___CSS_LOADER_EXPORT___.push([module.id, "* {\n    text-overflow : ellipsis;\n}\np, ul {\n    margin: 0;\n}\n.treenode{\n    background-color: transparent;\n}\n.treenode:hover{\n    background-color: rgba(150,150,150,0.1);\n}\n.treenode.active{\n    background-color: rgba(150,150,150,0.2);\n    color: inherit;\n}\n.dropdown-menu-dark .dropdown-menu {\n    color: #dee2e6;\n    background-color: #343a40;\n    border-color: rgba(0,0,0,.15);\n}\n.dropend .dropdown-toggle::after {\n    position: absolute;\n    top: 40%;\n    right: 3px;\n}\n.submenu-item {\n    display: block;\n    width: 100%;\n    padding: 0.25rem 1rem;\n    clear: both;\n    font-weight: 400;\n    color: #212529;\n    text-align: inherit;\n    text-decoration: none;\n    white-space: nowrap;\n    background-color: transparent;\n    border: 0;\n}\n.submenu-item:hover, .submenu-item:focus {}\n.submenu-item.active, .submenu-item:active {}\n.submenu-item.disabled, .submenu-item:disabled {}\n.bgHoverLight:hover{\n    background-color: rgba(255,255,255,0.05);\n}\n.bgHoverDark:hover{\n    background-color: rgba(0,0,0,0.05);\n}\n.nav-links .nav-link.active {\n    text-decoration: underline;\n}\n.rounded-4 {\n    border-radius: 0.6rem !important;\n}\n.rounded-5 {\n    border-radius: 1rem !important;\n}\n.rounded-top-0 {\n    border-top-left-radius: 0 !important;\n    border-top-right-radius: 0 !important;\n}\n.rounded-top-1 {\n    border-top-left-radius: 0.2rem !important;\n    border-top-right-radius: 0.2rem !important;\n}\n.rounded-top-2 {\n    border-top-left-radius: 0.25rem !important;\n    border-top-right-radius: 0.25rem !important;\n}\n.rounded-top-3 {\n    border-top-left-radius: 0.3rem !important;\n    border-top-right-radius: 0.3rem !important;\n}\n.rounded-top-4 {\n    border-top-left-radius: 0.6rem !important;\n    border-top-right-radius: 0.6rem !important;\n}\n.rounded-top-5 {\n    border-top-left-radius: 1rem !important;\n    border-top-right-radius: 1rem !important;\n}\n.rounded-end-0 {\n    border-top-right-radius: 0 !important;\n    border-bottom-right-radius: 0 !important;\n}\n.rounded-end-1 {\n    border-top-right-radius: 0.2rem !important;\n    border-bottom-right-radius: 0.2rem !important;\n}\n.rounded-end-2 {\n    border-top-right-radius: 0.25rem !important;\n    border-bottom-right-radius: 0.25rem !important;\n}\n.rounded-end-3 {\n    border-top-right-radius: 0.3rem !important;\n    border-bottom-right-radius: 0.3rem !important;\n}\n.rounded-end-4 {\n    border-top-right-radius: 0.6rem !important;\n    border-bottom-right-radius: 0.6rem !important;\n}\n.rounded-end-5 {\n    border-top-right-radius: 1rem !important;\n    border-bottom-right-radius: 1rem !important;\n}\n.rounded-bottom-0 {\n    border-bottom-left-radius: 0 !important;\n    border-bottom-right-radius: 0 !important;\n}\n.rounded-bottom-1 {\n    border-bottom-left-radius: 0.2rem !important;\n    border-bottom-right-radius: 0.2rem !important;\n}\n.rounded-bottom-2 {\n    border-bottom-left-radius: 0.25rem !important;\n    border-bottom-right-radius: 0.25rem !important;\n}\n.rounded-bottom-3 {\n    border-bottom-left-radius: 0.3rem !important;\n    border-bottom-right-radius: 0.3rem !important;\n}\n.rounded-bottom-4 {\n    border-bottom-left-radius: 0.6rem !important;\n    border-bottom-right-radius: 0.6rem !important;\n}\n.rounded-bottom-5 {\n    border-bottom-left-radius: 1rem !important;\n    border-bottom-right-radius: 1rem !important;\n}\n.rounded-start-0 {\n    border-bottom-left-radius: 0 !important;\n    border-top-left-radius: 0 !important;\n}\n.rounded-start-1 {\n    border-bottom-left-radius: 0.2rem !important;\n    border-top-left-radius: 0.2rem !important;\n}\n.rounded-start-2 {\n    border-bottom-left-radius: 0.25rem !important;\n    border-top-left-radius: 0.25rem !important;\n}\n.rounded-start-3 {\n    border-bottom-left-radius: 0.3rem !important;\n    border-top-left-radius: 0.3rem !important;\n}\n.rounded-start-4 {\n    border-bottom-left-radius: 0.5rem !important;\n    border-top-left-radius: 0.5rem !important;\n}\n.rounded-start-5 {\n    border-bottom-left-radius: 1rem !important;\n    border-top-left-radius: 1rem !important;\n}\n.text-shadow-sm{\n    text-shadow: 0 1px 2px rgba(0,0,0,.15);\n}\n.text-shadow-md{\n    text-shadow: 0 2px 4px rgba(0,0,0,.30);\n}\n.text-shadow-lg{\n    text-shadow: 0 4px 8px rgba(0,0,0,.5);\n}\n.w-33 {\n    width: 33.33% !important;\n}\n.w-66 {\n    width: 66.66% !important;\n}\n.h-33 {\n    height: 33.33% !important;\n}\n.h-66 {\n    height: 66.66% !important;\n}\n\n@media (min-width: 576px) {\n    .w-sm-25 {width: 25% !important; }\n    .w-sm-33 {width: 33.33% !important; }\n    .w-sm-50 {width: 50% !important;}\n    .w-sm-66 {width: 66.66% !important;}\n    .w-sm-75 {width: 75% !important;}\n    .w-sm-100 {width: 100% !important;}\n    .w-sm-auto {width: auto !important;}\n}\n@media (min-width: 768px) {\n    .w-md-25 {width: 25% !important;}\n    .w-md-33 {width: 33.33% !important; }\n    .w-md-50 {width: 50% !important;}\n    .w-md-66 {width: 66.66% !important;}\n    .w-md-75 {width: 75% !important;}\n    .w-md-100 {width: 100% !important;}\n    .w-md-auto {width: auto !important;}\n}\n@media (min-width: 992px) {\n    .w-lg-25 {width: 25% !important;}\n    .w-lg-33 {width: 33.33% !important; }\n    .w-lg-50 {width: 50% !important;}\n    .w-lg-66 {width: 66.66% !important;}\n    .w-lg-75 {width: 75% !important;}\n    .w-lg-100 {width: 100% !important;}\n    .w-lg-auto {width: auto !important;}\n}\n@media (min-width: 1200px) {\n    .w-xl-25 {width: 25% !important;}\n    .w-xl-33 {width: 33.33% !important; }\n    .w-xl-50 {width: 50% !important;}\n    .w-xl-66 {width: 66.66% !important;}\n    .w-xl-75 {width: 75% !important;}\n    .w-xl-100 {width: 100% !important;}\n    .w-xl-auto {width: auto !important;}\n}\n@media (min-width: 1400px) {\n    .w-xxl-25 {width: 25% !important;}\n    .w-xxl-33 {width: 33.33% !important; }\n    .w-xxl-50 {width: 50% !important;}\n    .w-xxl-66 {width: 66.66% !important;}\n    .w-xxl-75 {width: 75% !important;}\n    .w-xxl-100 {width: 100% !important;}\n    .w-xxl-auto {width: auto !important;}\n} \n@media (min-height: 576px) {\n    .h-sm-25 {height: 25% !important; }\n    .h-sm-33 {height: 33.33% !important; }\n    .h-sm-50 {height: 50% !important;}\n    .h-sm-66 {height: 66.66% !important;}\n    .h-sm-75 {height: 75% !important;}\n    .h-sm-100 {height: 100% !important;}\n    .h-sm-auto {height: auto !important;}\n}\n@media (min-height: 768px) {\n    .h-md-25 {height: 25% !important;}\n    .h-md-33 {height: 33.33% !important; }\n    .h-md-50 {height: 50% !important;}\n    .h-md-66 {height: 66.66% !important;}\n    .h-md-75 {height: 75% !important;}\n    .h-md-100 {height: 100% !important;}\n    .h-md-auto {height: auto !important;}\n}\n@media (min-height: 992px) {\n    .h-lg-25 {height: 25% !important;}\n    .h-lg-33 {height: 33.33% !important; }\n    .h-lg-50 {height: 50% !important;}\n    .h-lg-66 {height: 66.66% !important;}\n    .h-lg-75 {height: 75% !important;}\n    .h-lg-100 {height: 100% !important;}\n    .h-lg-auto {height: auto !important;}\n}\n@media (min-height: 1200px) {\n    .h-xl-25 {height: 25% !important;}\n    .h-xl-33 {height: 33.33% !important; }\n    .h-xl-50 {height: 50% !important;}\n    .h-xl-66 {height: 66.66% !important;}\n    .h-xl-75 {height: 75% !important;}\n    .h-xl-100 {height: 100% !important;}\n    .h-xl-auto {height: auto !important;}\n}\n@media (min-height: 1400px) {\n    .h-xxl-25 {height: 25% !important;}\n    .h-xxl-33 {height: 33.33% !important; }\n    .h-xxl-50 {height: 50% !important;}\n    .h-xxl-66 {height: 66.66% !important;}\n    .h-xxl-75 {height: 75% !important;}\n    .h-xxl-100 {height: 100% !important;}\n    .h-xxl-auto {height: auto !important;}\n}", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ 645:
/***/ ((module) => {



/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
// eslint-disable-next-line func-names
module.exports = function (cssWithMappingToString) {
  var list = []; // return the list of modules as css string

  list.toString = function toString() {
    return this.map(function (item) {
      var content = cssWithMappingToString(item);

      if (item[2]) {
        return "@media ".concat(item[2], " {").concat(content, "}");
      }

      return content;
    }).join("");
  }; // import a list of modules into the list
  // eslint-disable-next-line func-names


  list.i = function (modules, mediaQuery, dedupe) {
    if (typeof modules === "string") {
      // eslint-disable-next-line no-param-reassign
      modules = [[null, modules, ""]];
    }

    var alreadyImportedModules = {};

    if (dedupe) {
      for (var i = 0; i < this.length; i++) {
        // eslint-disable-next-line prefer-destructuring
        var id = this[i][0];

        if (id != null) {
          alreadyImportedModules[id] = true;
        }
      }
    }

    for (var _i = 0; _i < modules.length; _i++) {
      var item = [].concat(modules[_i]);

      if (dedupe && alreadyImportedModules[item[0]]) {
        // eslint-disable-next-line no-continue
        continue;
      }

      if (mediaQuery) {
        if (!item[2]) {
          item[2] = mediaQuery;
        } else {
          item[2] = "".concat(mediaQuery, " and ").concat(item[2]);
        }
      }

      list.push(item);
    }
  };

  return list;
};

/***/ }),

/***/ 379:
/***/ ((module) => {



var stylesInDOM = [];

function getIndexByIdentifier(identifier) {
  var result = -1;

  for (var i = 0; i < stylesInDOM.length; i++) {
    if (stylesInDOM[i].identifier === identifier) {
      result = i;
      break;
    }
  }

  return result;
}

function modulesToDom(list, options) {
  var idCountMap = {};
  var identifiers = [];

  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var count = idCountMap[id] || 0;
    var identifier = "".concat(id, " ").concat(count);
    idCountMap[id] = count + 1;
    var indexByIdentifier = getIndexByIdentifier(identifier);
    var obj = {
      css: item[1],
      media: item[2],
      sourceMap: item[3],
      supports: item[4],
      layer: item[5]
    };

    if (indexByIdentifier !== -1) {
      stylesInDOM[indexByIdentifier].references++;
      stylesInDOM[indexByIdentifier].updater(obj);
    } else {
      var updater = addElementStyle(obj, options);
      options.byIndex = i;
      stylesInDOM.splice(i, 0, {
        identifier: identifier,
        updater: updater,
        references: 1
      });
    }

    identifiers.push(identifier);
  }

  return identifiers;
}

function addElementStyle(obj, options) {
  var api = options.domAPI(options);
  api.update(obj);

  var updater = function updater(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {
        return;
      }

      api.update(obj = newObj);
    } else {
      api.remove();
    }
  };

  return updater;
}

module.exports = function (list, options) {
  options = options || {};
  list = list || [];
  var lastIdentifiers = modulesToDom(list, options);
  return function update(newList) {
    newList = newList || [];

    for (var i = 0; i < lastIdentifiers.length; i++) {
      var identifier = lastIdentifiers[i];
      var index = getIndexByIdentifier(identifier);
      stylesInDOM[index].references--;
    }

    var newLastIdentifiers = modulesToDom(newList, options);

    for (var _i = 0; _i < lastIdentifiers.length; _i++) {
      var _identifier = lastIdentifiers[_i];

      var _index = getIndexByIdentifier(_identifier);

      if (stylesInDOM[_index].references === 0) {
        stylesInDOM[_index].updater();

        stylesInDOM.splice(_index, 1);
      }
    }

    lastIdentifiers = newLastIdentifiers;
  };
};

/***/ }),

/***/ 569:
/***/ ((module) => {



var memo = {};
/* istanbul ignore next  */

function getTarget(target) {
  if (typeof memo[target] === "undefined") {
    var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself

    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
      try {
        // This will throw an exception if access to iframe is blocked
        // due to cross-origin restrictions
        styleTarget = styleTarget.contentDocument.head;
      } catch (e) {
        // istanbul ignore next
        styleTarget = null;
      }
    }

    memo[target] = styleTarget;
  }

  return memo[target];
}
/* istanbul ignore next  */


function insertBySelector(insert, style) {
  var target = getTarget(insert);

  if (!target) {
    throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
  }

  target.appendChild(style);
}

module.exports = insertBySelector;

/***/ }),

/***/ 216:
/***/ ((module) => {



/* istanbul ignore next  */
function insertStyleElement(options) {
  var element = document.createElement("style");
  options.setAttributes(element, options.attributes);
  options.insert(element, options.options);
  return element;
}

module.exports = insertStyleElement;

/***/ }),

/***/ 565:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



/* istanbul ignore next  */
function setAttributesWithoutAttributes(styleElement) {
  var nonce =  true ? __webpack_require__.nc : 0;

  if (nonce) {
    styleElement.setAttribute("nonce", nonce);
  }
}

module.exports = setAttributesWithoutAttributes;

/***/ }),

/***/ 795:
/***/ ((module) => {



/* istanbul ignore next  */
function apply(styleElement, options, obj) {
  var css = "";

  if (obj.supports) {
    css += "@supports (".concat(obj.supports, ") {");
  }

  if (obj.media) {
    css += "@media ".concat(obj.media, " {");
  }

  var needLayer = typeof obj.layer !== "undefined";

  if (needLayer) {
    css += "@layer".concat(obj.layer.length > 0 ? " ".concat(obj.layer) : "", " {");
  }

  css += obj.css;

  if (needLayer) {
    css += "}";
  }

  if (obj.media) {
    css += "}";
  }

  if (obj.supports) {
    css += "}";
  }

  var sourceMap = obj.sourceMap;

  if (sourceMap && typeof btoa !== "undefined") {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  } // For old IE

  /* istanbul ignore if  */


  options.styleTagTransform(css, styleElement, options.options);
}

function removeStyleElement(styleElement) {
  // istanbul ignore if
  if (styleElement.parentNode === null) {
    return false;
  }

  styleElement.parentNode.removeChild(styleElement);
}
/* istanbul ignore next  */


function domAPI(options) {
  var styleElement = options.insertStyleElement(options);
  return {
    update: function update(obj) {
      apply(styleElement, options, obj);
    },
    remove: function remove() {
      removeStyleElement(styleElement);
    }
  };
}

module.exports = domAPI;

/***/ }),

/***/ 589:
/***/ ((module) => {



/* istanbul ignore next  */
function styleTagTransform(css, styleElement) {
  if (styleElement.styleSheet) {
    styleElement.styleSheet.cssText = css;
  } else {
    while (styleElement.firstChild) {
      styleElement.removeChild(styleElement.firstChild);
    }

    styleElement.appendChild(document.createTextNode(css));
  }
}

module.exports = styleTagTransform;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/nonce */
/******/ 	(() => {
/******/ 		__webpack_require__.nc = undefined;
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Accordion": () => (/* binding */ Accordion),
  "AccordionItem": () => (/* binding */ AccordionItem),
  "Alert": () => (/* binding */ Alert),
  "Anchor": () => (/* binding */ Anchor),
  "App": () => (/* binding */ App),
  "Badge": () => (/* binding */ Badge),
  "Blockquote": () => (/* binding */ Blockquote),
  "Body": () => (/* binding */ Body),
  "Breadcrumb": () => (/* binding */ Breadcrumb),
  "Button": () => (/* binding */ instantui_Button),
  "ButtonGroup": () => (/* binding */ ButtonGroup),
  "Card": () => (/* binding */ Card),
  "Carousel": () => (/* binding */ Carousel),
  "CarouselItem": () => (/* binding */ CarouselItem),
  "Checkbox": () => (/* binding */ Checkbox),
  "CodeBlock": () => (/* binding */ CodeBlock),
  "Collapse": () => (/* binding */ Collapse),
  "Color": () => (/* binding */ Color),
  "ColorInput": () => (/* binding */ ColorInput),
  "Column": () => (/* binding */ Column),
  "ContextMenu": () => (/* binding */ ContextMenu),
  "DisplayHeading": () => (/* binding */ DisplayHeading),
  "Divider": () => (/* binding */ Divider),
  "DropdownButton": () => (/* binding */ DropdownButton),
  "DropdownDivider": () => (/* binding */ DropdownDivider),
  "DropdownItem": () => (/* binding */ DropdownItem),
  "DropdownLink": () => (/* binding */ DropdownLink),
  "Figure": () => (/* binding */ Figure),
  "FloatingInput": () => (/* binding */ FloatingInput),
  "Form": () => (/* binding */ Form),
  "FormLabel": () => (/* binding */ FormLabel),
  "FormText": () => (/* binding */ FormText),
  "HTML": () => (/* binding */ HTML),
  "Heading": () => (/* binding */ Heading),
  "IFrame": () => (/* binding */ IFrame),
  "Icon": () => (/* binding */ Icon),
  "Image": () => (/* binding */ Image),
  "Input": () => (/* binding */ Input),
  "InputGroup": () => (/* binding */ InputGroup),
  "InputInvalidFeedback": () => (/* binding */ InputInvalidFeedback),
  "InputInvalidTooltip": () => (/* binding */ InputInvalidTooltip),
  "InputValidFeedback": () => (/* binding */ InputValidFeedback),
  "InputValidTooltip": () => (/* binding */ InputValidTooltip),
  "Label": () => (/* binding */ Label),
  "Layout": () => (/* binding */ Layout),
  "Link": () => (/* binding */ Link),
  "ListGroup": () => (/* binding */ ListGroup),
  "ListGroupItem": () => (/* binding */ ListGroupItem),
  "ListItem": () => (/* binding */ ListItem),
  "Mark": () => (/* binding */ Mark),
  "Markdown": () => (/* binding */ Markdown),
  "Modal": () => (/* binding */ Modal),
  "Nav": () => (/* binding */ Nav),
  "NavLink": () => (/* binding */ NavLink),
  "Navbar": () => (/* binding */ Navbar),
  "Offcanvas": () => (/* binding */ Offcanvas),
  "OrderedList": () => (/* binding */ OrderedList),
  "Pagination": () => (/* binding */ Pagination),
  "PaginationLink": () => (/* binding */ PaginationLink),
  "PlaceholderImage": () => (/* binding */ PlaceholderImage),
  "Progressbar": () => (/* binding */ Progressbar),
  "Radio": () => (/* binding */ Radio),
  "RadioButton": () => (/* binding */ RadioButton),
  "Route": () => (/* binding */ Route),
  "Router": () => (/* binding */ Router),
  "Row": () => (/* binding */ Row),
  "SelectionBox": () => (/* binding */ SelectionBox),
  "SelectionItem": () => (/* binding */ SelectionItem),
  "Slider": () => (/* binding */ Slider),
  "Small": () => (/* binding */ Small),
  "Span": () => (/* binding */ Span),
  "Spinner": () => (/* binding */ Spinner),
  "Split": () => (/* binding */ Split),
  "Stack": () => (/* binding */ Stack),
  "Stretch": () => (/* binding */ Stretch),
  "SubmenuItem": () => (/* binding */ SubmenuItem),
  "Switch": () => (/* binding */ Switch),
  "Tab": () => (/* binding */ instantui_Tab),
  "TabContent": () => (/* binding */ TabContent),
  "TabPanel": () => (/* binding */ TabPanel),
  "Table": () => (/* binding */ Table),
  "Text": () => (/* binding */ Text),
  "Toast": () => (/* binding */ Toast),
  "ToggleButton": () => (/* binding */ ToggleButton),
  "TreeNode": () => (/* binding */ TreeNode),
  "TreeView": () => (/* binding */ TreeView),
  "UnorderedList": () => (/* binding */ UnorderedList),
  "Video": () => (/* binding */ Video),
  "Widget": () => (/* binding */ Widget),
  "isMobileDevice": () => (/* binding */ isMobileDevice)
});

// NAMESPACE OBJECT: ./node_modules/@popperjs/core/lib/index.js
var lib_namespaceObject = {};
__webpack_require__.r(lib_namespaceObject);
__webpack_require__.d(lib_namespaceObject, {
  "afterMain": () => (afterMain),
  "afterRead": () => (afterRead),
  "afterWrite": () => (afterWrite),
  "applyStyles": () => (modifiers_applyStyles),
  "arrow": () => (modifiers_arrow),
  "auto": () => (auto),
  "basePlacements": () => (basePlacements),
  "beforeMain": () => (beforeMain),
  "beforeRead": () => (beforeRead),
  "beforeWrite": () => (beforeWrite),
  "bottom": () => (bottom),
  "clippingParents": () => (clippingParents),
  "computeStyles": () => (modifiers_computeStyles),
  "createPopper": () => (popper_createPopper),
  "createPopperBase": () => (createPopper),
  "createPopperLite": () => (popper_lite_createPopper),
  "detectOverflow": () => (detectOverflow),
  "end": () => (end),
  "eventListeners": () => (eventListeners),
  "flip": () => (modifiers_flip),
  "hide": () => (modifiers_hide),
  "left": () => (left),
  "main": () => (main),
  "modifierPhases": () => (modifierPhases),
  "offset": () => (modifiers_offset),
  "placements": () => (enums_placements),
  "popper": () => (popper),
  "popperGenerator": () => (popperGenerator),
  "popperOffsets": () => (modifiers_popperOffsets),
  "preventOverflow": () => (modifiers_preventOverflow),
  "read": () => (read),
  "reference": () => (reference),
  "right": () => (right),
  "start": () => (start),
  "top": () => (enums_top),
  "variationPlacements": () => (variationPlacements),
  "viewport": () => (viewport),
  "write": () => (write)
});

;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/enums.js
var enums_top = 'top';
var bottom = 'bottom';
var right = 'right';
var left = 'left';
var auto = 'auto';
var basePlacements = [enums_top, bottom, right, left];
var start = 'start';
var end = 'end';
var clippingParents = 'clippingParents';
var viewport = 'viewport';
var popper = 'popper';
var reference = 'reference';
var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {
  return acc.concat([placement + "-" + start, placement + "-" + end]);
}, []);
var enums_placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {
  return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
}, []); // modifiers that need to read the DOM

var beforeRead = 'beforeRead';
var read = 'read';
var afterRead = 'afterRead'; // pure-logic modifiers

var beforeMain = 'beforeMain';
var main = 'main';
var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)

var beforeWrite = 'beforeWrite';
var write = 'write';
var afterWrite = 'afterWrite';
var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];
;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js
function getNodeName(element) {
  return element ? (element.nodeName || '').toLowerCase() : null;
}
;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getWindow.js
function getWindow(node) {
  if (node == null) {
    return window;
  }

  if (node.toString() !== '[object Window]') {
    var ownerDocument = node.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView || window : window;
  }

  return node;
}
;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js


function isElement(node) {
  var OwnElement = getWindow(node).Element;
  return node instanceof OwnElement || node instanceof Element;
}

function isHTMLElement(node) {
  var OwnElement = getWindow(node).HTMLElement;
  return node instanceof OwnElement || node instanceof HTMLElement;
}

function isShadowRoot(node) {
  // IE 11 has no ShadowRoot
  if (typeof ShadowRoot === 'undefined') {
    return false;
  }

  var OwnElement = getWindow(node).ShadowRoot;
  return node instanceof OwnElement || node instanceof ShadowRoot;
}


;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/modifiers/applyStyles.js

 // This modifier takes the styles prepared by the `computeStyles` modifier
// and applies them to the HTMLElements such as popper and arrow

function applyStyles(_ref) {
  var state = _ref.state;
  Object.keys(state.elements).forEach(function (name) {
    var style = state.styles[name] || {};
    var attributes = state.attributes[name] || {};
    var element = state.elements[name]; // arrow is optional + virtual elements

    if (!isHTMLElement(element) || !getNodeName(element)) {
      return;
    } // Flow doesn't support to extend this property, but it's the most
    // effective way to apply styles to an HTMLElement
    // $FlowFixMe[cannot-write]


    Object.assign(element.style, style);
    Object.keys(attributes).forEach(function (name) {
      var value = attributes[name];

      if (value === false) {
        element.removeAttribute(name);
      } else {
        element.setAttribute(name, value === true ? '' : value);
      }
    });
  });
}

function effect(_ref2) {
  var state = _ref2.state;
  var initialStyles = {
    popper: {
      position: state.options.strategy,
      left: '0',
      top: '0',
      margin: '0'
    },
    arrow: {
      position: 'absolute'
    },
    reference: {}
  };
  Object.assign(state.elements.popper.style, initialStyles.popper);
  state.styles = initialStyles;

  if (state.elements.arrow) {
    Object.assign(state.elements.arrow.style, initialStyles.arrow);
  }

  return function () {
    Object.keys(state.elements).forEach(function (name) {
      var element = state.elements[name];
      var attributes = state.attributes[name] || {};
      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them

      var style = styleProperties.reduce(function (style, property) {
        style[property] = '';
        return style;
      }, {}); // arrow is optional + virtual elements

      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      }

      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function (attribute) {
        element.removeAttribute(attribute);
      });
    });
  };
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ const modifiers_applyStyles = ({
  name: 'applyStyles',
  enabled: true,
  phase: 'write',
  fn: applyStyles,
  effect: effect,
  requires: ['computeStyles']
});
;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/getBasePlacement.js

function getBasePlacement(placement) {
  return placement.split('-')[0];
}
;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/math.js
var math_max = Math.max;
var math_min = Math.min;
var round = Math.round;
;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/userAgent.js
function getUAString() {
  var uaData = navigator.userAgentData;

  if (uaData != null && uaData.brands) {
    return uaData.brands.map(function (item) {
      return item.brand + "/" + item.version;
    }).join(' ');
  }

  return navigator.userAgent;
}
;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js

function isLayoutViewport() {
  return !/^((?!chrome|android).)*safari/i.test(getUAString());
}
;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js




function getBoundingClientRect(element, includeScale, isFixedStrategy) {
  if (includeScale === void 0) {
    includeScale = false;
  }

  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }

  var clientRect = element.getBoundingClientRect();
  var scaleX = 1;
  var scaleY = 1;

  if (includeScale && isHTMLElement(element)) {
    scaleX = element.offsetWidth > 0 ? round(clientRect.width) / element.offsetWidth || 1 : 1;
    scaleY = element.offsetHeight > 0 ? round(clientRect.height) / element.offsetHeight || 1 : 1;
  }

  var _ref = isElement(element) ? getWindow(element) : window,
      visualViewport = _ref.visualViewport;

  var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
  var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
  var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
  var width = clientRect.width / scaleX;
  var height = clientRect.height / scaleY;
  return {
    width: width,
    height: height,
    top: y,
    right: x + width,
    bottom: y + height,
    left: x,
    x: x,
    y: y
  };
}
;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js
 // Returns the layout rect of an element relative to its offsetParent. Layout
// means it doesn't take into account transforms.

function getLayoutRect(element) {
  var clientRect = getBoundingClientRect(element); // Use the clientRect sizes if it's not been transformed.
  // Fixes https://github.com/popperjs/popper-core/issues/1223

  var width = element.offsetWidth;
  var height = element.offsetHeight;

  if (Math.abs(clientRect.width - width) <= 1) {
    width = clientRect.width;
  }

  if (Math.abs(clientRect.height - height) <= 1) {
    height = clientRect.height;
  }

  return {
    x: element.offsetLeft,
    y: element.offsetTop,
    width: width,
    height: height
  };
}
;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/contains.js

function contains(parent, child) {
  var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method

  if (parent.contains(child)) {
    return true;
  } // then fallback to custom implementation with Shadow DOM support
  else if (rootNode && isShadowRoot(rootNode)) {
      var next = child;

      do {
        if (next && parent.isSameNode(next)) {
          return true;
        } // $FlowFixMe[prop-missing]: need a better way to handle this...


        next = next.parentNode || next.host;
      } while (next);
    } // Give up, the result is false


  return false;
}
;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js

function getComputedStyle_getComputedStyle(element) {
  return getWindow(element).getComputedStyle(element);
}
;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/isTableElement.js

function isTableElement(element) {
  return ['table', 'td', 'th'].indexOf(getNodeName(element)) >= 0;
}
;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js

function getDocumentElement(element) {
  // $FlowFixMe[incompatible-return]: assume body is always available
  return ((isElement(element) ? element.ownerDocument : // $FlowFixMe[prop-missing]
  element.document) || window.document).documentElement;
}
;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js



function getParentNode(element) {
  if (getNodeName(element) === 'html') {
    return element;
  }

  return (// this is a quicker (but less type safe) way to save quite some bytes from the bundle
    // $FlowFixMe[incompatible-return]
    // $FlowFixMe[prop-missing]
    element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
    element.parentNode || ( // DOM Element detected
    isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
    // $FlowFixMe[incompatible-call]: HTMLElement is a Node
    getDocumentElement(element) // fallback

  );
}
;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js








function getTrueOffsetParent(element) {
  if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
  getComputedStyle_getComputedStyle(element).position === 'fixed') {
    return null;
  }

  return element.offsetParent;
} // `.offsetParent` reports `null` for fixed elements, while absolute elements
// return the containing block


function getContainingBlock(element) {
  var isFirefox = /firefox/i.test(getUAString());
  var isIE = /Trident/i.test(getUAString());

  if (isIE && isHTMLElement(element)) {
    // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
    var elementCss = getComputedStyle_getComputedStyle(element);

    if (elementCss.position === 'fixed') {
      return null;
    }
  }

  var currentNode = getParentNode(element);

  if (isShadowRoot(currentNode)) {
    currentNode = currentNode.host;
  }

  while (isHTMLElement(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {
    var css = getComputedStyle_getComputedStyle(currentNode); // This is non-exhaustive but covers the most common CSS properties that
    // create a containing block.
    // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block

    if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {
      return currentNode;
    } else {
      currentNode = currentNode.parentNode;
    }
  }

  return null;
} // Gets the closest ancestor positioned element. Handles some edge cases,
// such as table ancestors and cross browser bugs.


function getOffsetParent(element) {
  var window = getWindow(element);
  var offsetParent = getTrueOffsetParent(element);

  while (offsetParent && isTableElement(offsetParent) && getComputedStyle_getComputedStyle(offsetParent).position === 'static') {
    offsetParent = getTrueOffsetParent(offsetParent);
  }

  if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle_getComputedStyle(offsetParent).position === 'static')) {
    return window;
  }

  return offsetParent || getContainingBlock(element) || window;
}
;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js
function getMainAxisFromPlacement(placement) {
  return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';
}
;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/within.js

function within(min, value, max) {
  return math_max(min, math_min(value, max));
}
function withinMaxClamp(min, value, max) {
  var v = within(min, value, max);
  return v > max ? max : v;
}
;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/getFreshSideObject.js
function getFreshSideObject() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}
;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/mergePaddingObject.js

function mergePaddingObject(paddingObject) {
  return Object.assign({}, getFreshSideObject(), paddingObject);
}
;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/expandToHashMap.js
function expandToHashMap(value, keys) {
  return keys.reduce(function (hashMap, key) {
    hashMap[key] = value;
    return hashMap;
  }, {});
}
;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/modifiers/arrow.js









 // eslint-disable-next-line import/no-unused-modules

var toPaddingObject = function toPaddingObject(padding, state) {
  padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {
    placement: state.placement
  })) : padding;
  return mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
};

function arrow(_ref) {
  var _state$modifiersData$;

  var state = _ref.state,
      name = _ref.name,
      options = _ref.options;
  var arrowElement = state.elements.arrow;
  var popperOffsets = state.modifiersData.popperOffsets;
  var basePlacement = getBasePlacement(state.placement);
  var axis = getMainAxisFromPlacement(basePlacement);
  var isVertical = [left, right].indexOf(basePlacement) >= 0;
  var len = isVertical ? 'height' : 'width';

  if (!arrowElement || !popperOffsets) {
    return;
  }

  var paddingObject = toPaddingObject(options.padding, state);
  var arrowRect = getLayoutRect(arrowElement);
  var minProp = axis === 'y' ? enums_top : left;
  var maxProp = axis === 'y' ? bottom : right;
  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
  var startDiff = popperOffsets[axis] - state.rects.reference[axis];
  var arrowOffsetParent = getOffsetParent(arrowElement);
  var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
  var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
  // outside of the popper bounds

  var min = paddingObject[minProp];
  var max = clientSize - arrowRect[len] - paddingObject[maxProp];
  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
  var offset = within(min, center, max); // Prevents breaking syntax highlighting...

  var axisProp = axis;
  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
}

function arrow_effect(_ref2) {
  var state = _ref2.state,
      options = _ref2.options;
  var _options$element = options.element,
      arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;

  if (arrowElement == null) {
    return;
  } // CSS selector


  if (typeof arrowElement === 'string') {
    arrowElement = state.elements.popper.querySelector(arrowElement);

    if (!arrowElement) {
      return;
    }
  }

  if (false) {}

  if (!contains(state.elements.popper, arrowElement)) {
    if (false) {}

    return;
  }

  state.elements.arrow = arrowElement;
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ const modifiers_arrow = ({
  name: 'arrow',
  enabled: true,
  phase: 'main',
  fn: arrow,
  effect: arrow_effect,
  requires: ['popperOffsets'],
  requiresIfExists: ['preventOverflow']
});
;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/getVariation.js
function getVariation(placement) {
  return placement.split('-')[1];
}
;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/modifiers/computeStyles.js







 // eslint-disable-next-line import/no-unused-modules

var unsetSides = {
  top: 'auto',
  right: 'auto',
  bottom: 'auto',
  left: 'auto'
}; // Round the offsets to the nearest suitable subpixel based on the DPR.
// Zooming can change the DPR, but it seems to report a value that will
// cleanly divide the values into the appropriate subpixels.

function roundOffsetsByDPR(_ref) {
  var x = _ref.x,
      y = _ref.y;
  var win = window;
  var dpr = win.devicePixelRatio || 1;
  return {
    x: round(x * dpr) / dpr || 0,
    y: round(y * dpr) / dpr || 0
  };
}

function mapToStyles(_ref2) {
  var _Object$assign2;

  var popper = _ref2.popper,
      popperRect = _ref2.popperRect,
      placement = _ref2.placement,
      variation = _ref2.variation,
      offsets = _ref2.offsets,
      position = _ref2.position,
      gpuAcceleration = _ref2.gpuAcceleration,
      adaptive = _ref2.adaptive,
      roundOffsets = _ref2.roundOffsets,
      isFixed = _ref2.isFixed;
  var _offsets$x = offsets.x,
      x = _offsets$x === void 0 ? 0 : _offsets$x,
      _offsets$y = offsets.y,
      y = _offsets$y === void 0 ? 0 : _offsets$y;

  var _ref3 = typeof roundOffsets === 'function' ? roundOffsets({
    x: x,
    y: y
  }) : {
    x: x,
    y: y
  };

  x = _ref3.x;
  y = _ref3.y;
  var hasX = offsets.hasOwnProperty('x');
  var hasY = offsets.hasOwnProperty('y');
  var sideX = left;
  var sideY = enums_top;
  var win = window;

  if (adaptive) {
    var offsetParent = getOffsetParent(popper);
    var heightProp = 'clientHeight';
    var widthProp = 'clientWidth';

    if (offsetParent === getWindow(popper)) {
      offsetParent = getDocumentElement(popper);

      if (getComputedStyle_getComputedStyle(offsetParent).position !== 'static' && position === 'absolute') {
        heightProp = 'scrollHeight';
        widthProp = 'scrollWidth';
      }
    } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it


    offsetParent = offsetParent;

    if (placement === enums_top || (placement === left || placement === right) && variation === end) {
      sideY = bottom;
      var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : // $FlowFixMe[prop-missing]
      offsetParent[heightProp];
      y -= offsetY - popperRect.height;
      y *= gpuAcceleration ? 1 : -1;
    }

    if (placement === left || (placement === enums_top || placement === bottom) && variation === end) {
      sideX = right;
      var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : // $FlowFixMe[prop-missing]
      offsetParent[widthProp];
      x -= offsetX - popperRect.width;
      x *= gpuAcceleration ? 1 : -1;
    }
  }

  var commonStyles = Object.assign({
    position: position
  }, adaptive && unsetSides);

  var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
    x: x,
    y: y
  }) : {
    x: x,
    y: y
  };

  x = _ref4.x;
  y = _ref4.y;

  if (gpuAcceleration) {
    var _Object$assign;

    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
  }

  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
}

function computeStyles(_ref5) {
  var state = _ref5.state,
      options = _ref5.options;
  var _options$gpuAccelerat = options.gpuAcceleration,
      gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,
      _options$adaptive = options.adaptive,
      adaptive = _options$adaptive === void 0 ? true : _options$adaptive,
      _options$roundOffsets = options.roundOffsets,
      roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;

  if (false) { var transitionProperty; }

  var commonStyles = {
    placement: getBasePlacement(state.placement),
    variation: getVariation(state.placement),
    popper: state.elements.popper,
    popperRect: state.rects.popper,
    gpuAcceleration: gpuAcceleration,
    isFixed: state.options.strategy === 'fixed'
  };

  if (state.modifiersData.popperOffsets != null) {
    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.popperOffsets,
      position: state.options.strategy,
      adaptive: adaptive,
      roundOffsets: roundOffsets
    })));
  }

  if (state.modifiersData.arrow != null) {
    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.arrow,
      position: 'absolute',
      adaptive: false,
      roundOffsets: roundOffsets
    })));
  }

  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    'data-popper-placement': state.placement
  });
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ const modifiers_computeStyles = ({
  name: 'computeStyles',
  enabled: true,
  phase: 'beforeWrite',
  fn: computeStyles,
  data: {}
});
;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/modifiers/eventListeners.js
 // eslint-disable-next-line import/no-unused-modules

var passive = {
  passive: true
};

function eventListeners_effect(_ref) {
  var state = _ref.state,
      instance = _ref.instance,
      options = _ref.options;
  var _options$scroll = options.scroll,
      scroll = _options$scroll === void 0 ? true : _options$scroll,
      _options$resize = options.resize,
      resize = _options$resize === void 0 ? true : _options$resize;
  var window = getWindow(state.elements.popper);
  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);

  if (scroll) {
    scrollParents.forEach(function (scrollParent) {
      scrollParent.addEventListener('scroll', instance.update, passive);
    });
  }

  if (resize) {
    window.addEventListener('resize', instance.update, passive);
  }

  return function () {
    if (scroll) {
      scrollParents.forEach(function (scrollParent) {
        scrollParent.removeEventListener('scroll', instance.update, passive);
      });
    }

    if (resize) {
      window.removeEventListener('resize', instance.update, passive);
    }
  };
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ const eventListeners = ({
  name: 'eventListeners',
  enabled: true,
  phase: 'write',
  fn: function fn() {},
  effect: eventListeners_effect,
  data: {}
});
;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/getOppositePlacement.js
var hash = {
  left: 'right',
  right: 'left',
  bottom: 'top',
  top: 'bottom'
};
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, function (matched) {
    return hash[matched];
  });
}
;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js
var getOppositeVariationPlacement_hash = {
  start: 'end',
  end: 'start'
};
function getOppositeVariationPlacement(placement) {
  return placement.replace(/start|end/g, function (matched) {
    return getOppositeVariationPlacement_hash[matched];
  });
}
;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js

function getWindowScroll(node) {
  var win = getWindow(node);
  var scrollLeft = win.pageXOffset;
  var scrollTop = win.pageYOffset;
  return {
    scrollLeft: scrollLeft,
    scrollTop: scrollTop
  };
}
;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js



function getWindowScrollBarX(element) {
  // If <html> has a CSS width greater than the viewport, then this will be
  // incorrect for RTL.
  // Popper 1 is broken in this case and never had a bug report so let's assume
  // it's not an issue. I don't think anyone ever specifies width on <html>
  // anyway.
  // Browsers where the left scrollbar doesn't cause an issue report `0` for
  // this (e.g. Edge 2019, IE11, Safari)
  return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
}
;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js




function getViewportRect(element, strategy) {
  var win = getWindow(element);
  var html = getDocumentElement(element);
  var visualViewport = win.visualViewport;
  var width = html.clientWidth;
  var height = html.clientHeight;
  var x = 0;
  var y = 0;

  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    var layoutViewport = isLayoutViewport();

    if (layoutViewport || !layoutViewport && strategy === 'fixed') {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }

  return {
    width: width,
    height: height,
    x: x + getWindowScrollBarX(element),
    y: y
  };
}
;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js




 // Gets the entire size of the scrollable document area, even extending outside
// of the `<html>` and `<body>` rect bounds if horizontally scrollable

function getDocumentRect(element) {
  var _element$ownerDocumen;

  var html = getDocumentElement(element);
  var winScroll = getWindowScroll(element);
  var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
  var width = math_max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
  var height = math_max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
  var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
  var y = -winScroll.scrollTop;

  if (getComputedStyle_getComputedStyle(body || html).direction === 'rtl') {
    x += math_max(html.clientWidth, body ? body.clientWidth : 0) - width;
  }

  return {
    width: width,
    height: height,
    x: x,
    y: y
  };
}
;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js

function isScrollParent(element) {
  // Firefox wants us to check `-x` and `-y` variations as well
  var _getComputedStyle = getComputedStyle_getComputedStyle(element),
      overflow = _getComputedStyle.overflow,
      overflowX = _getComputedStyle.overflowX,
      overflowY = _getComputedStyle.overflowY;

  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}
;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js




function getScrollParent(node) {
  if (['html', 'body', '#document'].indexOf(getNodeName(node)) >= 0) {
    // $FlowFixMe[incompatible-return]: assume body is always available
    return node.ownerDocument.body;
  }

  if (isHTMLElement(node) && isScrollParent(node)) {
    return node;
  }

  return getScrollParent(getParentNode(node));
}
;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js




/*
given a DOM element, return the list of all scroll parents, up the list of ancesors
until we get to the top window object. This list is what we attach scroll listeners
to, because if any of these parent elements scroll, we'll need to re-calculate the
reference element's position.
*/

function listScrollParents(element, list) {
  var _element$ownerDocumen;

  if (list === void 0) {
    list = [];
  }

  var scrollParent = getScrollParent(element);
  var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
  var win = getWindow(scrollParent);
  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
  var updatedList = list.concat(target);
  return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
  updatedList.concat(listScrollParents(getParentNode(target)));
}
;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/rectToClientRect.js
function rectToClientRect(rect) {
  return Object.assign({}, rect, {
    left: rect.x,
    top: rect.y,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  });
}
;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js















function getInnerBoundingClientRect(element, strategy) {
  var rect = getBoundingClientRect(element, false, strategy === 'fixed');
  rect.top = rect.top + element.clientTop;
  rect.left = rect.left + element.clientLeft;
  rect.bottom = rect.top + element.clientHeight;
  rect.right = rect.left + element.clientWidth;
  rect.width = element.clientWidth;
  rect.height = element.clientHeight;
  rect.x = rect.left;
  rect.y = rect.top;
  return rect;
}

function getClientRectFromMixedType(element, clippingParent, strategy) {
  return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
} // A "clipping parent" is an overflowable container with the characteristic of
// clipping (or hiding) overflowing elements with a position different from
// `initial`


function getClippingParents(element) {
  var clippingParents = listScrollParents(getParentNode(element));
  var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle_getComputedStyle(element).position) >= 0;
  var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;

  if (!isElement(clipperElement)) {
    return [];
  } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414


  return clippingParents.filter(function (clippingParent) {
    return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== 'body';
  });
} // Gets the maximum area that the element is visible in due to any number of
// clipping parents


function getClippingRect(element, boundary, rootBoundary, strategy) {
  var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
  var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
  var firstClippingParent = clippingParents[0];
  var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {
    var rect = getClientRectFromMixedType(element, clippingParent, strategy);
    accRect.top = math_max(rect.top, accRect.top);
    accRect.right = math_min(rect.right, accRect.right);
    accRect.bottom = math_min(rect.bottom, accRect.bottom);
    accRect.left = math_max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromMixedType(element, firstClippingParent, strategy));
  clippingRect.width = clippingRect.right - clippingRect.left;
  clippingRect.height = clippingRect.bottom - clippingRect.top;
  clippingRect.x = clippingRect.left;
  clippingRect.y = clippingRect.top;
  return clippingRect;
}
;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/computeOffsets.js




function computeOffsets(_ref) {
  var reference = _ref.reference,
      element = _ref.element,
      placement = _ref.placement;
  var basePlacement = placement ? getBasePlacement(placement) : null;
  var variation = placement ? getVariation(placement) : null;
  var commonX = reference.x + reference.width / 2 - element.width / 2;
  var commonY = reference.y + reference.height / 2 - element.height / 2;
  var offsets;

  switch (basePlacement) {
    case enums_top:
      offsets = {
        x: commonX,
        y: reference.y - element.height
      };
      break;

    case bottom:
      offsets = {
        x: commonX,
        y: reference.y + reference.height
      };
      break;

    case right:
      offsets = {
        x: reference.x + reference.width,
        y: commonY
      };
      break;

    case left:
      offsets = {
        x: reference.x - element.width,
        y: commonY
      };
      break;

    default:
      offsets = {
        x: reference.x,
        y: reference.y
      };
  }

  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;

  if (mainAxis != null) {
    var len = mainAxis === 'y' ? 'height' : 'width';

    switch (variation) {
      case start:
        offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
        break;

      case end:
        offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
        break;

      default:
    }
  }

  return offsets;
}
;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/detectOverflow.js








 // eslint-disable-next-line import/no-unused-modules

function detectOverflow(state, options) {
  if (options === void 0) {
    options = {};
  }

  var _options = options,
      _options$placement = _options.placement,
      placement = _options$placement === void 0 ? state.placement : _options$placement,
      _options$strategy = _options.strategy,
      strategy = _options$strategy === void 0 ? state.strategy : _options$strategy,
      _options$boundary = _options.boundary,
      boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,
      _options$rootBoundary = _options.rootBoundary,
      rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,
      _options$elementConte = _options.elementContext,
      elementContext = _options$elementConte === void 0 ? popper : _options$elementConte,
      _options$altBoundary = _options.altBoundary,
      altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,
      _options$padding = _options.padding,
      padding = _options$padding === void 0 ? 0 : _options$padding;
  var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
  var altContext = elementContext === popper ? reference : popper;
  var popperRect = state.rects.popper;
  var element = state.elements[altBoundary ? altContext : elementContext];
  var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
  var referenceClientRect = getBoundingClientRect(state.elements.reference);
  var popperOffsets = computeOffsets({
    reference: referenceClientRect,
    element: popperRect,
    strategy: 'absolute',
    placement: placement
  });
  var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));
  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
  // 0 or negative = within the clipping rect

  var overflowOffsets = {
    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
  };
  var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element

  if (elementContext === popper && offsetData) {
    var offset = offsetData[placement];
    Object.keys(overflowOffsets).forEach(function (key) {
      var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
      var axis = [enums_top, bottom].indexOf(key) >= 0 ? 'y' : 'x';
      overflowOffsets[key] += offset[axis] * multiply;
    });
  }

  return overflowOffsets;
}
;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js




function computeAutoPlacement(state, options) {
  if (options === void 0) {
    options = {};
  }

  var _options = options,
      placement = _options.placement,
      boundary = _options.boundary,
      rootBoundary = _options.rootBoundary,
      padding = _options.padding,
      flipVariations = _options.flipVariations,
      _options$allowedAutoP = _options.allowedAutoPlacements,
      allowedAutoPlacements = _options$allowedAutoP === void 0 ? enums_placements : _options$allowedAutoP;
  var variation = getVariation(placement);
  var placements = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {
    return getVariation(placement) === variation;
  }) : basePlacements;
  var allowedPlacements = placements.filter(function (placement) {
    return allowedAutoPlacements.indexOf(placement) >= 0;
  });

  if (allowedPlacements.length === 0) {
    allowedPlacements = placements;

    if (false) {}
  } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...


  var overflows = allowedPlacements.reduce(function (acc, placement) {
    acc[placement] = detectOverflow(state, {
      placement: placement,
      boundary: boundary,
      rootBoundary: rootBoundary,
      padding: padding
    })[getBasePlacement(placement)];
    return acc;
  }, {});
  return Object.keys(overflows).sort(function (a, b) {
    return overflows[a] - overflows[b];
  });
}
;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/modifiers/flip.js






 // eslint-disable-next-line import/no-unused-modules

function getExpandedFallbackPlacements(placement) {
  if (getBasePlacement(placement) === auto) {
    return [];
  }

  var oppositePlacement = getOppositePlacement(placement);
  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
}

function flip(_ref) {
  var state = _ref.state,
      options = _ref.options,
      name = _ref.name;

  if (state.modifiersData[name]._skip) {
    return;
  }

  var _options$mainAxis = options.mainAxis,
      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
      _options$altAxis = options.altAxis,
      checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,
      specifiedFallbackPlacements = options.fallbackPlacements,
      padding = options.padding,
      boundary = options.boundary,
      rootBoundary = options.rootBoundary,
      altBoundary = options.altBoundary,
      _options$flipVariatio = options.flipVariations,
      flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,
      allowedAutoPlacements = options.allowedAutoPlacements;
  var preferredPlacement = state.options.placement;
  var basePlacement = getBasePlacement(preferredPlacement);
  var isBasePlacement = basePlacement === preferredPlacement;
  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
  var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {
    return acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {
      placement: placement,
      boundary: boundary,
      rootBoundary: rootBoundary,
      padding: padding,
      flipVariations: flipVariations,
      allowedAutoPlacements: allowedAutoPlacements
    }) : placement);
  }, []);
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var checksMap = new Map();
  var makeFallbackChecks = true;
  var firstFittingPlacement = placements[0];

  for (var i = 0; i < placements.length; i++) {
    var placement = placements[i];

    var _basePlacement = getBasePlacement(placement);

    var isStartVariation = getVariation(placement) === start;
    var isVertical = [enums_top, bottom].indexOf(_basePlacement) >= 0;
    var len = isVertical ? 'width' : 'height';
    var overflow = detectOverflow(state, {
      placement: placement,
      boundary: boundary,
      rootBoundary: rootBoundary,
      altBoundary: altBoundary,
      padding: padding
    });
    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : enums_top;

    if (referenceRect[len] > popperRect[len]) {
      mainVariationSide = getOppositePlacement(mainVariationSide);
    }

    var altVariationSide = getOppositePlacement(mainVariationSide);
    var checks = [];

    if (checkMainAxis) {
      checks.push(overflow[_basePlacement] <= 0);
    }

    if (checkAltAxis) {
      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
    }

    if (checks.every(function (check) {
      return check;
    })) {
      firstFittingPlacement = placement;
      makeFallbackChecks = false;
      break;
    }

    checksMap.set(placement, checks);
  }

  if (makeFallbackChecks) {
    // `2` may be desired in some cases – research later
    var numberOfChecks = flipVariations ? 3 : 1;

    var _loop = function _loop(_i) {
      var fittingPlacement = placements.find(function (placement) {
        var checks = checksMap.get(placement);

        if (checks) {
          return checks.slice(0, _i).every(function (check) {
            return check;
          });
        }
      });

      if (fittingPlacement) {
        firstFittingPlacement = fittingPlacement;
        return "break";
      }
    };

    for (var _i = numberOfChecks; _i > 0; _i--) {
      var _ret = _loop(_i);

      if (_ret === "break") break;
    }
  }

  if (state.placement !== firstFittingPlacement) {
    state.modifiersData[name]._skip = true;
    state.placement = firstFittingPlacement;
    state.reset = true;
  }
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ const modifiers_flip = ({
  name: 'flip',
  enabled: true,
  phase: 'main',
  fn: flip,
  requiresIfExists: ['offset'],
  data: {
    _skip: false
  }
});
;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/modifiers/hide.js



function getSideOffsets(overflow, rect, preventedOffsets) {
  if (preventedOffsets === void 0) {
    preventedOffsets = {
      x: 0,
      y: 0
    };
  }

  return {
    top: overflow.top - rect.height - preventedOffsets.y,
    right: overflow.right - rect.width + preventedOffsets.x,
    bottom: overflow.bottom - rect.height + preventedOffsets.y,
    left: overflow.left - rect.width - preventedOffsets.x
  };
}

function isAnySideFullyClipped(overflow) {
  return [enums_top, right, bottom, left].some(function (side) {
    return overflow[side] >= 0;
  });
}

function hide(_ref) {
  var state = _ref.state,
      name = _ref.name;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var preventedOffsets = state.modifiersData.preventOverflow;
  var referenceOverflow = detectOverflow(state, {
    elementContext: 'reference'
  });
  var popperAltOverflow = detectOverflow(state, {
    altBoundary: true
  });
  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
  state.modifiersData[name] = {
    referenceClippingOffsets: referenceClippingOffsets,
    popperEscapeOffsets: popperEscapeOffsets,
    isReferenceHidden: isReferenceHidden,
    hasPopperEscaped: hasPopperEscaped
  };
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    'data-popper-reference-hidden': isReferenceHidden,
    'data-popper-escaped': hasPopperEscaped
  });
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ const modifiers_hide = ({
  name: 'hide',
  enabled: true,
  phase: 'main',
  requiresIfExists: ['preventOverflow'],
  fn: hide
});
;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/modifiers/offset.js

 // eslint-disable-next-line import/no-unused-modules

function distanceAndSkiddingToXY(placement, rects, offset) {
  var basePlacement = getBasePlacement(placement);
  var invertDistance = [left, enums_top].indexOf(basePlacement) >= 0 ? -1 : 1;

  var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {
    placement: placement
  })) : offset,
      skidding = _ref[0],
      distance = _ref[1];

  skidding = skidding || 0;
  distance = (distance || 0) * invertDistance;
  return [left, right].indexOf(basePlacement) >= 0 ? {
    x: distance,
    y: skidding
  } : {
    x: skidding,
    y: distance
  };
}

function offset(_ref2) {
  var state = _ref2.state,
      options = _ref2.options,
      name = _ref2.name;
  var _options$offset = options.offset,
      offset = _options$offset === void 0 ? [0, 0] : _options$offset;
  var data = enums_placements.reduce(function (acc, placement) {
    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
    return acc;
  }, {});
  var _data$state$placement = data[state.placement],
      x = _data$state$placement.x,
      y = _data$state$placement.y;

  if (state.modifiersData.popperOffsets != null) {
    state.modifiersData.popperOffsets.x += x;
    state.modifiersData.popperOffsets.y += y;
  }

  state.modifiersData[name] = data;
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ const modifiers_offset = ({
  name: 'offset',
  enabled: true,
  phase: 'main',
  requires: ['popperOffsets'],
  fn: offset
});
;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js


function popperOffsets(_ref) {
  var state = _ref.state,
      name = _ref.name;
  // Offsets are the actual position the popper needs to have to be
  // properly positioned near its reference element
  // This is the most basic placement, and will be adjusted by
  // the modifiers in the next step
  state.modifiersData[name] = computeOffsets({
    reference: state.rects.reference,
    element: state.rects.popper,
    strategy: 'absolute',
    placement: state.placement
  });
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ const modifiers_popperOffsets = ({
  name: 'popperOffsets',
  enabled: true,
  phase: 'read',
  fn: popperOffsets,
  data: {}
});
;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/getAltAxis.js
function getAltAxis(axis) {
  return axis === 'x' ? 'y' : 'x';
}
;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/modifiers/preventOverflow.js












function preventOverflow(_ref) {
  var state = _ref.state,
      options = _ref.options,
      name = _ref.name;
  var _options$mainAxis = options.mainAxis,
      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
      _options$altAxis = options.altAxis,
      checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,
      boundary = options.boundary,
      rootBoundary = options.rootBoundary,
      altBoundary = options.altBoundary,
      padding = options.padding,
      _options$tether = options.tether,
      tether = _options$tether === void 0 ? true : _options$tether,
      _options$tetherOffset = options.tetherOffset,
      tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
  var overflow = detectOverflow(state, {
    boundary: boundary,
    rootBoundary: rootBoundary,
    padding: padding,
    altBoundary: altBoundary
  });
  var basePlacement = getBasePlacement(state.placement);
  var variation = getVariation(state.placement);
  var isBasePlacement = !variation;
  var mainAxis = getMainAxisFromPlacement(basePlacement);
  var altAxis = getAltAxis(mainAxis);
  var popperOffsets = state.modifiersData.popperOffsets;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {
    placement: state.placement
  })) : tetherOffset;
  var normalizedTetherOffsetValue = typeof tetherOffsetValue === 'number' ? {
    mainAxis: tetherOffsetValue,
    altAxis: tetherOffsetValue
  } : Object.assign({
    mainAxis: 0,
    altAxis: 0
  }, tetherOffsetValue);
  var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
  var data = {
    x: 0,
    y: 0
  };

  if (!popperOffsets) {
    return;
  }

  if (checkMainAxis) {
    var _offsetModifierState$;

    var mainSide = mainAxis === 'y' ? enums_top : left;
    var altSide = mainAxis === 'y' ? bottom : right;
    var len = mainAxis === 'y' ? 'height' : 'width';
    var offset = popperOffsets[mainAxis];
    var min = offset + overflow[mainSide];
    var max = offset - overflow[altSide];
    var additive = tether ? -popperRect[len] / 2 : 0;
    var minLen = variation === start ? referenceRect[len] : popperRect[len];
    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
    // outside the reference bounds

    var arrowElement = state.elements.arrow;
    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
      width: 0,
      height: 0
    };
    var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject();
    var arrowPaddingMin = arrowPaddingObject[mainSide];
    var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
    // to include its full size in the calculation. If the reference is small
    // and near the edge of a boundary, the popper can overflow even if the
    // reference is not overflowing as well (e.g. virtual elements with no
    // width or height)

    var arrowLen = within(0, referenceRect[len], arrowRect[len]);
    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
    var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
    var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
    var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;
    var tetherMax = offset + maxOffset - offsetModifierValue;
    var preventedOffset = within(tether ? math_min(min, tetherMin) : min, offset, tether ? math_max(max, tetherMax) : max);
    popperOffsets[mainAxis] = preventedOffset;
    data[mainAxis] = preventedOffset - offset;
  }

  if (checkAltAxis) {
    var _offsetModifierState$2;

    var _mainSide = mainAxis === 'x' ? enums_top : left;

    var _altSide = mainAxis === 'x' ? bottom : right;

    var _offset = popperOffsets[altAxis];

    var _len = altAxis === 'y' ? 'height' : 'width';

    var _min = _offset + overflow[_mainSide];

    var _max = _offset - overflow[_altSide];

    var isOriginSide = [enums_top, left].indexOf(basePlacement) !== -1;

    var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;

    var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;

    var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;

    var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);

    popperOffsets[altAxis] = _preventedOffset;
    data[altAxis] = _preventedOffset - _offset;
  }

  state.modifiersData[name] = data;
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ const modifiers_preventOverflow = ({
  name: 'preventOverflow',
  enabled: true,
  phase: 'main',
  fn: preventOverflow,
  requiresIfExists: ['offset']
});
;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/modifiers/index.js









;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js
function getHTMLElementScroll(element) {
  return {
    scrollLeft: element.scrollLeft,
    scrollTop: element.scrollTop
  };
}
;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js




function getNodeScroll(node) {
  if (node === getWindow(node) || !isHTMLElement(node)) {
    return getWindowScroll(node);
  } else {
    return getHTMLElementScroll(node);
  }
}
;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js









function isElementScaled(element) {
  var rect = element.getBoundingClientRect();
  var scaleX = round(rect.width) / element.offsetWidth || 1;
  var scaleY = round(rect.height) / element.offsetHeight || 1;
  return scaleX !== 1 || scaleY !== 1;
} // Returns the composite rect of an element relative to its offsetParent.
// Composite means it takes into account transforms as well as layout.


function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
  if (isFixed === void 0) {
    isFixed = false;
  }

  var isOffsetParentAnElement = isHTMLElement(offsetParent);
  var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
  var documentElement = getDocumentElement(offsetParent);
  var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
  var scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  var offsets = {
    x: 0,
    y: 0
  };

  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078
    isScrollParent(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }

    if (isHTMLElement(offsetParent)) {
      offsets = getBoundingClientRect(offsetParent, true);
      offsets.x += offsetParent.clientLeft;
      offsets.y += offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }

  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}
;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/orderModifiers.js
 // source: https://stackoverflow.com/questions/49875255

function order(modifiers) {
  var map = new Map();
  var visited = new Set();
  var result = [];
  modifiers.forEach(function (modifier) {
    map.set(modifier.name, modifier);
  }); // On visiting object, check for its dependencies and visit them recursively

  function sort(modifier) {
    visited.add(modifier.name);
    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
    requires.forEach(function (dep) {
      if (!visited.has(dep)) {
        var depModifier = map.get(dep);

        if (depModifier) {
          sort(depModifier);
        }
      }
    });
    result.push(modifier);
  }

  modifiers.forEach(function (modifier) {
    if (!visited.has(modifier.name)) {
      // check for visited object
      sort(modifier);
    }
  });
  return result;
}

function orderModifiers(modifiers) {
  // order based on dependencies
  var orderedModifiers = order(modifiers); // order based on phase

  return modifierPhases.reduce(function (acc, phase) {
    return acc.concat(orderedModifiers.filter(function (modifier) {
      return modifier.phase === phase;
    }));
  }, []);
}
;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/debounce.js
function debounce(fn) {
  var pending;
  return function () {
    if (!pending) {
      pending = new Promise(function (resolve) {
        Promise.resolve().then(function () {
          pending = undefined;
          resolve(fn());
        });
      });
    }

    return pending;
  };
}
;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/mergeByName.js
function mergeByName(modifiers) {
  var merged = modifiers.reduce(function (merged, current) {
    var existing = merged[current.name];
    merged[current.name] = existing ? Object.assign({}, existing, current, {
      options: Object.assign({}, existing.options, current.options),
      data: Object.assign({}, existing.data, current.data)
    }) : current;
    return merged;
  }, {}); // IE11 does not support Object.values

  return Object.keys(merged).map(function (key) {
    return merged[key];
  });
}
;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/createPopper.js














var INVALID_ELEMENT_ERROR = 'Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.';
var INFINITE_LOOP_ERROR = 'Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.';
var DEFAULT_OPTIONS = {
  placement: 'bottom',
  modifiers: [],
  strategy: 'absolute'
};

function areValidElements() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return !args.some(function (element) {
    return !(element && typeof element.getBoundingClientRect === 'function');
  });
}

function popperGenerator(generatorOptions) {
  if (generatorOptions === void 0) {
    generatorOptions = {};
  }

  var _generatorOptions = generatorOptions,
      _generatorOptions$def = _generatorOptions.defaultModifiers,
      defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,
      _generatorOptions$def2 = _generatorOptions.defaultOptions,
      defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
  return function createPopper(reference, popper, options) {
    if (options === void 0) {
      options = defaultOptions;
    }

    var state = {
      placement: 'bottom',
      orderedModifiers: [],
      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
      modifiersData: {},
      elements: {
        reference: reference,
        popper: popper
      },
      attributes: {},
      styles: {}
    };
    var effectCleanupFns = [];
    var isDestroyed = false;
    var instance = {
      state: state,
      setOptions: function setOptions(setOptionsAction) {
        var options = typeof setOptionsAction === 'function' ? setOptionsAction(state.options) : setOptionsAction;
        cleanupModifierEffects();
        state.options = Object.assign({}, defaultOptions, state.options, options);
        state.scrollParents = {
          reference: isElement(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],
          popper: listScrollParents(popper)
        }; // Orders the modifiers based on their dependencies and `phase`
        // properties

        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers

        state.orderedModifiers = orderedModifiers.filter(function (m) {
          return m.enabled;
        }); // Validate the provided modifiers so that the consumer will get warned
        // if one of the modifiers is invalid for any reason

        if (false) { var _getComputedStyle, marginTop, marginRight, marginBottom, marginLeft, flipModifier, modifiers; }

        runModifierEffects();
        return instance.update();
      },
      // Sync update – it will always be executed, even if not necessary. This
      // is useful for low frequency updates where sync behavior simplifies the
      // logic.
      // For high frequency updates (e.g. `resize` and `scroll` events), always
      // prefer the async Popper#update method
      forceUpdate: function forceUpdate() {
        if (isDestroyed) {
          return;
        }

        var _state$elements = state.elements,
            reference = _state$elements.reference,
            popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
        // anymore

        if (!areValidElements(reference, popper)) {
          if (false) {}

          return;
        } // Store the reference and popper rects to be read by modifiers


        state.rects = {
          reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),
          popper: getLayoutRect(popper)
        }; // Modifiers have the ability to reset the current update cycle. The
        // most common use case for this is the `flip` modifier changing the
        // placement, which then needs to re-run all the modifiers, because the
        // logic was previously ran for the previous placement and is therefore
        // stale/incorrect

        state.reset = false;
        state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
        // is filled with the initial data specified by the modifier. This means
        // it doesn't persist and is fresh on each update.
        // To ensure persistent data, use `${name}#persistent`

        state.orderedModifiers.forEach(function (modifier) {
          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
        });
        var __debug_loops__ = 0;

        for (var index = 0; index < state.orderedModifiers.length; index++) {
          if (false) {}

          if (state.reset === true) {
            state.reset = false;
            index = -1;
            continue;
          }

          var _state$orderedModifie = state.orderedModifiers[index],
              fn = _state$orderedModifie.fn,
              _state$orderedModifie2 = _state$orderedModifie.options,
              _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,
              name = _state$orderedModifie.name;

          if (typeof fn === 'function') {
            state = fn({
              state: state,
              options: _options,
              name: name,
              instance: instance
            }) || state;
          }
        }
      },
      // Async and optimistically optimized update – it will not be executed if
      // not necessary (debounced to run at most once-per-tick)
      update: debounce(function () {
        return new Promise(function (resolve) {
          instance.forceUpdate();
          resolve(state);
        });
      }),
      destroy: function destroy() {
        cleanupModifierEffects();
        isDestroyed = true;
      }
    };

    if (!areValidElements(reference, popper)) {
      if (false) {}

      return instance;
    }

    instance.setOptions(options).then(function (state) {
      if (!isDestroyed && options.onFirstUpdate) {
        options.onFirstUpdate(state);
      }
    }); // Modifiers have the ability to execute arbitrary code before the first
    // update cycle runs. They will be executed in the same order as the update
    // cycle. This is useful when a modifier adds some persistent data that
    // other modifiers need to use, but the modifier is run after the dependent
    // one.

    function runModifierEffects() {
      state.orderedModifiers.forEach(function (_ref3) {
        var name = _ref3.name,
            _ref3$options = _ref3.options,
            options = _ref3$options === void 0 ? {} : _ref3$options,
            effect = _ref3.effect;

        if (typeof effect === 'function') {
          var cleanupFn = effect({
            state: state,
            name: name,
            instance: instance,
            options: options
          });

          var noopFn = function noopFn() {};

          effectCleanupFns.push(cleanupFn || noopFn);
        }
      });
    }

    function cleanupModifierEffects() {
      effectCleanupFns.forEach(function (fn) {
        return fn();
      });
      effectCleanupFns = [];
    }

    return instance;
  };
}
var createPopper = /*#__PURE__*/popperGenerator(); // eslint-disable-next-line import/no-unused-modules


;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/popper.js










var defaultModifiers = [eventListeners, modifiers_popperOffsets, modifiers_computeStyles, modifiers_applyStyles, modifiers_offset, modifiers_flip, modifiers_preventOverflow, modifiers_arrow, modifiers_hide];
var popper_createPopper = /*#__PURE__*/popperGenerator({
  defaultModifiers: defaultModifiers
}); // eslint-disable-next-line import/no-unused-modules

 // eslint-disable-next-line import/no-unused-modules

 // eslint-disable-next-line import/no-unused-modules


;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/popper-lite.js





var popper_lite_defaultModifiers = [eventListeners, modifiers_popperOffsets, modifiers_computeStyles, modifiers_applyStyles];
var popper_lite_createPopper = /*#__PURE__*/popperGenerator({
  defaultModifiers: popper_lite_defaultModifiers
}); // eslint-disable-next-line import/no-unused-modules


;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/index.js

 // eslint-disable-next-line import/no-unused-modules

 // eslint-disable-next-line import/no-unused-modules

 // eslint-disable-next-line import/no-unused-modules


;// CONCATENATED MODULE: ./node_modules/bootstrap/dist/js/bootstrap.esm.js
/*!
  * Bootstrap v5.2.3 (https://getbootstrap.com/)
  * Copyright 2011-2022 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */


/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.2.3): util/index.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */
const MAX_UID = 1000000;
const MILLISECONDS_MULTIPLIER = 1000;
const TRANSITION_END = 'transitionend'; // Shout-out Angus Croll (https://goo.gl/pxwQGp)

const toType = object => {
  if (object === null || object === undefined) {
    return `${object}`;
  }

  return Object.prototype.toString.call(object).match(/\s([a-z]+)/i)[1].toLowerCase();
};
/**
 * Public Util API
 */


const getUID = prefix => {
  do {
    prefix += Math.floor(Math.random() * MAX_UID);
  } while (document.getElementById(prefix));

  return prefix;
};

const getSelector = element => {
  let selector = element.getAttribute('data-bs-target');

  if (!selector || selector === '#') {
    let hrefAttribute = element.getAttribute('href'); // The only valid content that could double as a selector are IDs or classes,
    // so everything starting with `#` or `.`. If a "real" URL is used as the selector,
    // `document.querySelector` will rightfully complain it is invalid.
    // See https://github.com/twbs/bootstrap/issues/32273

    if (!hrefAttribute || !hrefAttribute.includes('#') && !hrefAttribute.startsWith('.')) {
      return null;
    } // Just in case some CMS puts out a full URL with the anchor appended


    if (hrefAttribute.includes('#') && !hrefAttribute.startsWith('#')) {
      hrefAttribute = `#${hrefAttribute.split('#')[1]}`;
    }

    selector = hrefAttribute && hrefAttribute !== '#' ? hrefAttribute.trim() : null;
  }

  return selector;
};

const getSelectorFromElement = element => {
  const selector = getSelector(element);

  if (selector) {
    return document.querySelector(selector) ? selector : null;
  }

  return null;
};

const getElementFromSelector = element => {
  const selector = getSelector(element);
  return selector ? document.querySelector(selector) : null;
};

const getTransitionDurationFromElement = element => {
  if (!element) {
    return 0;
  } // Get transition-duration of the element


  let {
    transitionDuration,
    transitionDelay
  } = window.getComputedStyle(element);
  const floatTransitionDuration = Number.parseFloat(transitionDuration);
  const floatTransitionDelay = Number.parseFloat(transitionDelay); // Return 0 if element or transition duration is not found

  if (!floatTransitionDuration && !floatTransitionDelay) {
    return 0;
  } // If multiple durations are defined, take the first


  transitionDuration = transitionDuration.split(',')[0];
  transitionDelay = transitionDelay.split(',')[0];
  return (Number.parseFloat(transitionDuration) + Number.parseFloat(transitionDelay)) * MILLISECONDS_MULTIPLIER;
};

const triggerTransitionEnd = element => {
  element.dispatchEvent(new Event(TRANSITION_END));
};

const bootstrap_esm_isElement = object => {
  if (!object || typeof object !== 'object') {
    return false;
  }

  if (typeof object.jquery !== 'undefined') {
    object = object[0];
  }

  return typeof object.nodeType !== 'undefined';
};

const getElement = object => {
  // it's a jQuery object or a node element
  if (bootstrap_esm_isElement(object)) {
    return object.jquery ? object[0] : object;
  }

  if (typeof object === 'string' && object.length > 0) {
    return document.querySelector(object);
  }

  return null;
};

const isVisible = element => {
  if (!bootstrap_esm_isElement(element) || element.getClientRects().length === 0) {
    return false;
  }

  const elementIsVisible = getComputedStyle(element).getPropertyValue('visibility') === 'visible'; // Handle `details` element as its content may falsie appear visible when it is closed

  const closedDetails = element.closest('details:not([open])');

  if (!closedDetails) {
    return elementIsVisible;
  }

  if (closedDetails !== element) {
    const summary = element.closest('summary');

    if (summary && summary.parentNode !== closedDetails) {
      return false;
    }

    if (summary === null) {
      return false;
    }
  }

  return elementIsVisible;
};

const isDisabled = element => {
  if (!element || element.nodeType !== Node.ELEMENT_NODE) {
    return true;
  }

  if (element.classList.contains('disabled')) {
    return true;
  }

  if (typeof element.disabled !== 'undefined') {
    return element.disabled;
  }

  return element.hasAttribute('disabled') && element.getAttribute('disabled') !== 'false';
};

const findShadowRoot = element => {
  if (!document.documentElement.attachShadow) {
    return null;
  } // Can find the shadow root otherwise it'll return the document


  if (typeof element.getRootNode === 'function') {
    const root = element.getRootNode();
    return root instanceof ShadowRoot ? root : null;
  }

  if (element instanceof ShadowRoot) {
    return element;
  } // when we don't find a shadow root


  if (!element.parentNode) {
    return null;
  }

  return findShadowRoot(element.parentNode);
};

const noop = () => {};
/**
 * Trick to restart an element's animation
 *
 * @param {HTMLElement} element
 * @return void
 *
 * @see https://www.charistheo.io/blog/2021/02/restart-a-css-animation-with-javascript/#restarting-a-css-animation
 */


const reflow = element => {
  element.offsetHeight; // eslint-disable-line no-unused-expressions
};

const getjQuery = () => {
  if (window.jQuery && !document.body.hasAttribute('data-bs-no-jquery')) {
    return window.jQuery;
  }

  return null;
};

const DOMContentLoadedCallbacks = [];

const onDOMContentLoaded = callback => {
  if (document.readyState === 'loading') {
    // add listener on the first call when the document is in loading state
    if (!DOMContentLoadedCallbacks.length) {
      document.addEventListener('DOMContentLoaded', () => {
        for (const callback of DOMContentLoadedCallbacks) {
          callback();
        }
      });
    }

    DOMContentLoadedCallbacks.push(callback);
  } else {
    callback();
  }
};

const isRTL = () => document.documentElement.dir === 'rtl';

const defineJQueryPlugin = plugin => {
  onDOMContentLoaded(() => {
    const $ = getjQuery();
    /* istanbul ignore if */

    if ($) {
      const name = plugin.NAME;
      const JQUERY_NO_CONFLICT = $.fn[name];
      $.fn[name] = plugin.jQueryInterface;
      $.fn[name].Constructor = plugin;

      $.fn[name].noConflict = () => {
        $.fn[name] = JQUERY_NO_CONFLICT;
        return plugin.jQueryInterface;
      };
    }
  });
};

const execute = callback => {
  if (typeof callback === 'function') {
    callback();
  }
};

const executeAfterTransition = (callback, transitionElement, waitForTransition = true) => {
  if (!waitForTransition) {
    execute(callback);
    return;
  }

  const durationPadding = 5;
  const emulatedDuration = getTransitionDurationFromElement(transitionElement) + durationPadding;
  let called = false;

  const handler = ({
    target
  }) => {
    if (target !== transitionElement) {
      return;
    }

    called = true;
    transitionElement.removeEventListener(TRANSITION_END, handler);
    execute(callback);
  };

  transitionElement.addEventListener(TRANSITION_END, handler);
  setTimeout(() => {
    if (!called) {
      triggerTransitionEnd(transitionElement);
    }
  }, emulatedDuration);
};
/**
 * Return the previous/next element of a list.
 *
 * @param {array} list    The list of elements
 * @param activeElement   The active element
 * @param shouldGetNext   Choose to get next or previous element
 * @param isCycleAllowed
 * @return {Element|elem} The proper element
 */


const getNextActiveElement = (list, activeElement, shouldGetNext, isCycleAllowed) => {
  const listLength = list.length;
  let index = list.indexOf(activeElement); // if the element does not exist in the list return an element
  // depending on the direction and if cycle is allowed

  if (index === -1) {
    return !shouldGetNext && isCycleAllowed ? list[listLength - 1] : list[0];
  }

  index += shouldGetNext ? 1 : -1;

  if (isCycleAllowed) {
    index = (index + listLength) % listLength;
  }

  return list[Math.max(0, Math.min(index, listLength - 1))];
};

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.2.3): dom/event-handler.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */
/**
 * Constants
 */

const namespaceRegex = /[^.]*(?=\..*)\.|.*/;
const stripNameRegex = /\..*/;
const stripUidRegex = /::\d+$/;
const eventRegistry = {}; // Events storage

let uidEvent = 1;
const customEvents = {
  mouseenter: 'mouseover',
  mouseleave: 'mouseout'
};
const nativeEvents = new Set(['click', 'dblclick', 'mouseup', 'mousedown', 'contextmenu', 'mousewheel', 'DOMMouseScroll', 'mouseover', 'mouseout', 'mousemove', 'selectstart', 'selectend', 'keydown', 'keypress', 'keyup', 'orientationchange', 'touchstart', 'touchmove', 'touchend', 'touchcancel', 'pointerdown', 'pointermove', 'pointerup', 'pointerleave', 'pointercancel', 'gesturestart', 'gesturechange', 'gestureend', 'focus', 'blur', 'change', 'reset', 'select', 'submit', 'focusin', 'focusout', 'load', 'unload', 'beforeunload', 'resize', 'move', 'DOMContentLoaded', 'readystatechange', 'error', 'abort', 'scroll']);
/**
 * Private methods
 */

function makeEventUid(element, uid) {
  return uid && `${uid}::${uidEvent++}` || element.uidEvent || uidEvent++;
}

function getElementEvents(element) {
  const uid = makeEventUid(element);
  element.uidEvent = uid;
  eventRegistry[uid] = eventRegistry[uid] || {};
  return eventRegistry[uid];
}

function bootstrapHandler(element, fn) {
  return function handler(event) {
    hydrateObj(event, {
      delegateTarget: element
    });

    if (handler.oneOff) {
      EventHandler.off(element, event.type, fn);
    }

    return fn.apply(element, [event]);
  };
}

function bootstrapDelegationHandler(element, selector, fn) {
  return function handler(event) {
    const domElements = element.querySelectorAll(selector);

    for (let {
      target
    } = event; target && target !== this; target = target.parentNode) {
      for (const domElement of domElements) {
        if (domElement !== target) {
          continue;
        }

        hydrateObj(event, {
          delegateTarget: target
        });

        if (handler.oneOff) {
          EventHandler.off(element, event.type, selector, fn);
        }

        return fn.apply(target, [event]);
      }
    }
  };
}

function findHandler(events, callable, delegationSelector = null) {
  return Object.values(events).find(event => event.callable === callable && event.delegationSelector === delegationSelector);
}

function normalizeParameters(originalTypeEvent, handler, delegationFunction) {
  const isDelegated = typeof handler === 'string'; // todo: tooltip passes `false` instead of selector, so we need to check

  const callable = isDelegated ? delegationFunction : handler || delegationFunction;
  let typeEvent = getTypeEvent(originalTypeEvent);

  if (!nativeEvents.has(typeEvent)) {
    typeEvent = originalTypeEvent;
  }

  return [isDelegated, callable, typeEvent];
}

function addHandler(element, originalTypeEvent, handler, delegationFunction, oneOff) {
  if (typeof originalTypeEvent !== 'string' || !element) {
    return;
  }

  let [isDelegated, callable, typeEvent] = normalizeParameters(originalTypeEvent, handler, delegationFunction); // in case of mouseenter or mouseleave wrap the handler within a function that checks for its DOM position
  // this prevents the handler from being dispatched the same way as mouseover or mouseout does

  if (originalTypeEvent in customEvents) {
    const wrapFunction = fn => {
      return function (event) {
        if (!event.relatedTarget || event.relatedTarget !== event.delegateTarget && !event.delegateTarget.contains(event.relatedTarget)) {
          return fn.call(this, event);
        }
      };
    };

    callable = wrapFunction(callable);
  }

  const events = getElementEvents(element);
  const handlers = events[typeEvent] || (events[typeEvent] = {});
  const previousFunction = findHandler(handlers, callable, isDelegated ? handler : null);

  if (previousFunction) {
    previousFunction.oneOff = previousFunction.oneOff && oneOff;
    return;
  }

  const uid = makeEventUid(callable, originalTypeEvent.replace(namespaceRegex, ''));
  const fn = isDelegated ? bootstrapDelegationHandler(element, handler, callable) : bootstrapHandler(element, callable);
  fn.delegationSelector = isDelegated ? handler : null;
  fn.callable = callable;
  fn.oneOff = oneOff;
  fn.uidEvent = uid;
  handlers[uid] = fn;
  element.addEventListener(typeEvent, fn, isDelegated);
}

function removeHandler(element, events, typeEvent, handler, delegationSelector) {
  const fn = findHandler(events[typeEvent], handler, delegationSelector);

  if (!fn) {
    return;
  }

  element.removeEventListener(typeEvent, fn, Boolean(delegationSelector));
  delete events[typeEvent][fn.uidEvent];
}

function removeNamespacedHandlers(element, events, typeEvent, namespace) {
  const storeElementEvent = events[typeEvent] || {};

  for (const handlerKey of Object.keys(storeElementEvent)) {
    if (handlerKey.includes(namespace)) {
      const event = storeElementEvent[handlerKey];
      removeHandler(element, events, typeEvent, event.callable, event.delegationSelector);
    }
  }
}

function getTypeEvent(event) {
  // allow to get the native events from namespaced events ('click.bs.button' --> 'click')
  event = event.replace(stripNameRegex, '');
  return customEvents[event] || event;
}

const EventHandler = {
  on(element, event, handler, delegationFunction) {
    addHandler(element, event, handler, delegationFunction, false);
  },

  one(element, event, handler, delegationFunction) {
    addHandler(element, event, handler, delegationFunction, true);
  },

  off(element, originalTypeEvent, handler, delegationFunction) {
    if (typeof originalTypeEvent !== 'string' || !element) {
      return;
    }

    const [isDelegated, callable, typeEvent] = normalizeParameters(originalTypeEvent, handler, delegationFunction);
    const inNamespace = typeEvent !== originalTypeEvent;
    const events = getElementEvents(element);
    const storeElementEvent = events[typeEvent] || {};
    const isNamespace = originalTypeEvent.startsWith('.');

    if (typeof callable !== 'undefined') {
      // Simplest case: handler is passed, remove that listener ONLY.
      if (!Object.keys(storeElementEvent).length) {
        return;
      }

      removeHandler(element, events, typeEvent, callable, isDelegated ? handler : null);
      return;
    }

    if (isNamespace) {
      for (const elementEvent of Object.keys(events)) {
        removeNamespacedHandlers(element, events, elementEvent, originalTypeEvent.slice(1));
      }
    }

    for (const keyHandlers of Object.keys(storeElementEvent)) {
      const handlerKey = keyHandlers.replace(stripUidRegex, '');

      if (!inNamespace || originalTypeEvent.includes(handlerKey)) {
        const event = storeElementEvent[keyHandlers];
        removeHandler(element, events, typeEvent, event.callable, event.delegationSelector);
      }
    }
  },

  trigger(element, event, args) {
    if (typeof event !== 'string' || !element) {
      return null;
    }

    const $ = getjQuery();
    const typeEvent = getTypeEvent(event);
    const inNamespace = event !== typeEvent;
    let jQueryEvent = null;
    let bubbles = true;
    let nativeDispatch = true;
    let defaultPrevented = false;

    if (inNamespace && $) {
      jQueryEvent = $.Event(event, args);
      $(element).trigger(jQueryEvent);
      bubbles = !jQueryEvent.isPropagationStopped();
      nativeDispatch = !jQueryEvent.isImmediatePropagationStopped();
      defaultPrevented = jQueryEvent.isDefaultPrevented();
    }

    let evt = new Event(event, {
      bubbles,
      cancelable: true
    });
    evt = hydrateObj(evt, args);

    if (defaultPrevented) {
      evt.preventDefault();
    }

    if (nativeDispatch) {
      element.dispatchEvent(evt);
    }

    if (evt.defaultPrevented && jQueryEvent) {
      jQueryEvent.preventDefault();
    }

    return evt;
  }

};

function hydrateObj(obj, meta) {
  for (const [key, value] of Object.entries(meta || {})) {
    try {
      obj[key] = value;
    } catch (_unused) {
      Object.defineProperty(obj, key, {
        configurable: true,

        get() {
          return value;
        }

      });
    }
  }

  return obj;
}

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.2.3): dom/data.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */

/**
 * Constants
 */
const elementMap = new Map();
const Data = {
  set(element, key, instance) {
    if (!elementMap.has(element)) {
      elementMap.set(element, new Map());
    }

    const instanceMap = elementMap.get(element); // make it clear we only want one instance per element
    // can be removed later when multiple key/instances are fine to be used

    if (!instanceMap.has(key) && instanceMap.size !== 0) {
      // eslint-disable-next-line no-console
      console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(instanceMap.keys())[0]}.`);
      return;
    }

    instanceMap.set(key, instance);
  },

  get(element, key) {
    if (elementMap.has(element)) {
      return elementMap.get(element).get(key) || null;
    }

    return null;
  },

  remove(element, key) {
    if (!elementMap.has(element)) {
      return;
    }

    const instanceMap = elementMap.get(element);
    instanceMap.delete(key); // free up element references if there are no instances left for an element

    if (instanceMap.size === 0) {
      elementMap.delete(element);
    }
  }

};

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.2.3): dom/manipulator.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */
function normalizeData(value) {
  if (value === 'true') {
    return true;
  }

  if (value === 'false') {
    return false;
  }

  if (value === Number(value).toString()) {
    return Number(value);
  }

  if (value === '' || value === 'null') {
    return null;
  }

  if (typeof value !== 'string') {
    return value;
  }

  try {
    return JSON.parse(decodeURIComponent(value));
  } catch (_unused) {
    return value;
  }
}

function normalizeDataKey(key) {
  return key.replace(/[A-Z]/g, chr => `-${chr.toLowerCase()}`);
}

const Manipulator = {
  setDataAttribute(element, key, value) {
    element.setAttribute(`data-bs-${normalizeDataKey(key)}`, value);
  },

  removeDataAttribute(element, key) {
    element.removeAttribute(`data-bs-${normalizeDataKey(key)}`);
  },

  getDataAttributes(element) {
    if (!element) {
      return {};
    }

    const attributes = {};
    const bsKeys = Object.keys(element.dataset).filter(key => key.startsWith('bs') && !key.startsWith('bsConfig'));

    for (const key of bsKeys) {
      let pureKey = key.replace(/^bs/, '');
      pureKey = pureKey.charAt(0).toLowerCase() + pureKey.slice(1, pureKey.length);
      attributes[pureKey] = normalizeData(element.dataset[key]);
    }

    return attributes;
  },

  getDataAttribute(element, key) {
    return normalizeData(element.getAttribute(`data-bs-${normalizeDataKey(key)}`));
  }

};

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.2.3): util/config.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */
/**
 * Class definition
 */

class Config {
  // Getters
  static get Default() {
    return {};
  }

  static get DefaultType() {
    return {};
  }

  static get NAME() {
    throw new Error('You have to implement the static method "NAME", for each component!');
  }

  _getConfig(config) {
    config = this._mergeConfigObj(config);
    config = this._configAfterMerge(config);

    this._typeCheckConfig(config);

    return config;
  }

  _configAfterMerge(config) {
    return config;
  }

  _mergeConfigObj(config, element) {
    const jsonConfig = bootstrap_esm_isElement(element) ? Manipulator.getDataAttribute(element, 'config') : {}; // try to parse

    return { ...this.constructor.Default,
      ...(typeof jsonConfig === 'object' ? jsonConfig : {}),
      ...(bootstrap_esm_isElement(element) ? Manipulator.getDataAttributes(element) : {}),
      ...(typeof config === 'object' ? config : {})
    };
  }

  _typeCheckConfig(config, configTypes = this.constructor.DefaultType) {
    for (const property of Object.keys(configTypes)) {
      const expectedTypes = configTypes[property];
      const value = config[property];
      const valueType = bootstrap_esm_isElement(value) ? 'element' : toType(value);

      if (!new RegExp(expectedTypes).test(valueType)) {
        throw new TypeError(`${this.constructor.NAME.toUpperCase()}: Option "${property}" provided type "${valueType}" but expected type "${expectedTypes}".`);
      }
    }
  }

}

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.2.3): base-component.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */
/**
 * Constants
 */

const VERSION = '5.2.3';
/**
 * Class definition
 */

class BaseComponent extends Config {
  constructor(element, config) {
    super();
    element = getElement(element);

    if (!element) {
      return;
    }

    this._element = element;
    this._config = this._getConfig(config);
    Data.set(this._element, this.constructor.DATA_KEY, this);
  } // Public


  dispose() {
    Data.remove(this._element, this.constructor.DATA_KEY);
    EventHandler.off(this._element, this.constructor.EVENT_KEY);

    for (const propertyName of Object.getOwnPropertyNames(this)) {
      this[propertyName] = null;
    }
  }

  _queueCallback(callback, element, isAnimated = true) {
    executeAfterTransition(callback, element, isAnimated);
  }

  _getConfig(config) {
    config = this._mergeConfigObj(config, this._element);
    config = this._configAfterMerge(config);

    this._typeCheckConfig(config);

    return config;
  } // Static


  static getInstance(element) {
    return Data.get(getElement(element), this.DATA_KEY);
  }

  static getOrCreateInstance(element, config = {}) {
    return this.getInstance(element) || new this(element, typeof config === 'object' ? config : null);
  }

  static get VERSION() {
    return VERSION;
  }

  static get DATA_KEY() {
    return `bs.${this.NAME}`;
  }

  static get EVENT_KEY() {
    return `.${this.DATA_KEY}`;
  }

  static eventName(name) {
    return `${name}${this.EVENT_KEY}`;
  }

}

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.2.3): util/component-functions.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */

const enableDismissTrigger = (component, method = 'hide') => {
  const clickEvent = `click.dismiss${component.EVENT_KEY}`;
  const name = component.NAME;
  EventHandler.on(document, clickEvent, `[data-bs-dismiss="${name}"]`, function (event) {
    if (['A', 'AREA'].includes(this.tagName)) {
      event.preventDefault();
    }

    if (isDisabled(this)) {
      return;
    }

    const target = getElementFromSelector(this) || this.closest(`.${name}`);
    const instance = component.getOrCreateInstance(target); // Method argument is left, for Alert and only, as it doesn't implement the 'hide' method

    instance[method]();
  });
};

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.2.3): alert.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */
/**
 * Constants
 */

const NAME$f = 'alert';
const DATA_KEY$a = 'bs.alert';
const EVENT_KEY$b = `.${DATA_KEY$a}`;
const EVENT_CLOSE = `close${EVENT_KEY$b}`;
const EVENT_CLOSED = `closed${EVENT_KEY$b}`;
const CLASS_NAME_FADE$5 = 'fade';
const CLASS_NAME_SHOW$8 = 'show';
/**
 * Class definition
 */

class bootstrap_esm_Alert extends BaseComponent {
  // Getters
  static get NAME() {
    return NAME$f;
  } // Public


  close() {
    const closeEvent = EventHandler.trigger(this._element, EVENT_CLOSE);

    if (closeEvent.defaultPrevented) {
      return;
    }

    this._element.classList.remove(CLASS_NAME_SHOW$8);

    const isAnimated = this._element.classList.contains(CLASS_NAME_FADE$5);

    this._queueCallback(() => this._destroyElement(), this._element, isAnimated);
  } // Private


  _destroyElement() {
    this._element.remove();

    EventHandler.trigger(this._element, EVENT_CLOSED);
    this.dispose();
  } // Static


  static jQueryInterface(config) {
    return this.each(function () {
      const data = bootstrap_esm_Alert.getOrCreateInstance(this);

      if (typeof config !== 'string') {
        return;
      }

      if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {
        throw new TypeError(`No method named "${config}"`);
      }

      data[config](this);
    });
  }

}
/**
 * Data API implementation
 */


enableDismissTrigger(bootstrap_esm_Alert, 'close');
/**
 * jQuery
 */

defineJQueryPlugin(bootstrap_esm_Alert);

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.2.3): button.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */
/**
 * Constants
 */

const NAME$e = 'button';
const DATA_KEY$9 = 'bs.button';
const EVENT_KEY$a = `.${DATA_KEY$9}`;
const DATA_API_KEY$6 = '.data-api';
const CLASS_NAME_ACTIVE$3 = 'active';
const SELECTOR_DATA_TOGGLE$5 = '[data-bs-toggle="button"]';
const EVENT_CLICK_DATA_API$6 = `click${EVENT_KEY$a}${DATA_API_KEY$6}`;
/**
 * Class definition
 */

class Button extends BaseComponent {
  // Getters
  static get NAME() {
    return NAME$e;
  } // Public


  toggle() {
    // Toggle class and sync the `aria-pressed` attribute with the return value of the `.toggle()` method
    this._element.setAttribute('aria-pressed', this._element.classList.toggle(CLASS_NAME_ACTIVE$3));
  } // Static


  static jQueryInterface(config) {
    return this.each(function () {
      const data = Button.getOrCreateInstance(this);

      if (config === 'toggle') {
        data[config]();
      }
    });
  }

}
/**
 * Data API implementation
 */


EventHandler.on(document, EVENT_CLICK_DATA_API$6, SELECTOR_DATA_TOGGLE$5, event => {
  event.preventDefault();
  const button = event.target.closest(SELECTOR_DATA_TOGGLE$5);
  const data = Button.getOrCreateInstance(button);
  data.toggle();
});
/**
 * jQuery
 */

defineJQueryPlugin(Button);

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.2.3): dom/selector-engine.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */
/**
 * Constants
 */

const SelectorEngine = {
  find(selector, element = document.documentElement) {
    return [].concat(...Element.prototype.querySelectorAll.call(element, selector));
  },

  findOne(selector, element = document.documentElement) {
    return Element.prototype.querySelector.call(element, selector);
  },

  children(element, selector) {
    return [].concat(...element.children).filter(child => child.matches(selector));
  },

  parents(element, selector) {
    const parents = [];
    let ancestor = element.parentNode.closest(selector);

    while (ancestor) {
      parents.push(ancestor);
      ancestor = ancestor.parentNode.closest(selector);
    }

    return parents;
  },

  prev(element, selector) {
    let previous = element.previousElementSibling;

    while (previous) {
      if (previous.matches(selector)) {
        return [previous];
      }

      previous = previous.previousElementSibling;
    }

    return [];
  },

  // TODO: this is now unused; remove later along with prev()
  next(element, selector) {
    let next = element.nextElementSibling;

    while (next) {
      if (next.matches(selector)) {
        return [next];
      }

      next = next.nextElementSibling;
    }

    return [];
  },

  focusableChildren(element) {
    const focusables = ['a', 'button', 'input', 'textarea', 'select', 'details', '[tabindex]', '[contenteditable="true"]'].map(selector => `${selector}:not([tabindex^="-"])`).join(',');
    return this.find(focusables, element).filter(el => !isDisabled(el) && isVisible(el));
  }

};

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.2.3): util/swipe.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */
/**
 * Constants
 */

const NAME$d = 'swipe';
const EVENT_KEY$9 = '.bs.swipe';
const EVENT_TOUCHSTART = `touchstart${EVENT_KEY$9}`;
const EVENT_TOUCHMOVE = `touchmove${EVENT_KEY$9}`;
const EVENT_TOUCHEND = `touchend${EVENT_KEY$9}`;
const EVENT_POINTERDOWN = `pointerdown${EVENT_KEY$9}`;
const EVENT_POINTERUP = `pointerup${EVENT_KEY$9}`;
const POINTER_TYPE_TOUCH = 'touch';
const POINTER_TYPE_PEN = 'pen';
const CLASS_NAME_POINTER_EVENT = 'pointer-event';
const SWIPE_THRESHOLD = 40;
const Default$c = {
  endCallback: null,
  leftCallback: null,
  rightCallback: null
};
const DefaultType$c = {
  endCallback: '(function|null)',
  leftCallback: '(function|null)',
  rightCallback: '(function|null)'
};
/**
 * Class definition
 */

class Swipe extends Config {
  constructor(element, config) {
    super();
    this._element = element;

    if (!element || !Swipe.isSupported()) {
      return;
    }

    this._config = this._getConfig(config);
    this._deltaX = 0;
    this._supportPointerEvents = Boolean(window.PointerEvent);

    this._initEvents();
  } // Getters


  static get Default() {
    return Default$c;
  }

  static get DefaultType() {
    return DefaultType$c;
  }

  static get NAME() {
    return NAME$d;
  } // Public


  dispose() {
    EventHandler.off(this._element, EVENT_KEY$9);
  } // Private


  _start(event) {
    if (!this._supportPointerEvents) {
      this._deltaX = event.touches[0].clientX;
      return;
    }

    if (this._eventIsPointerPenTouch(event)) {
      this._deltaX = event.clientX;
    }
  }

  _end(event) {
    if (this._eventIsPointerPenTouch(event)) {
      this._deltaX = event.clientX - this._deltaX;
    }

    this._handleSwipe();

    execute(this._config.endCallback);
  }

  _move(event) {
    this._deltaX = event.touches && event.touches.length > 1 ? 0 : event.touches[0].clientX - this._deltaX;
  }

  _handleSwipe() {
    const absDeltaX = Math.abs(this._deltaX);

    if (absDeltaX <= SWIPE_THRESHOLD) {
      return;
    }

    const direction = absDeltaX / this._deltaX;
    this._deltaX = 0;

    if (!direction) {
      return;
    }

    execute(direction > 0 ? this._config.rightCallback : this._config.leftCallback);
  }

  _initEvents() {
    if (this._supportPointerEvents) {
      EventHandler.on(this._element, EVENT_POINTERDOWN, event => this._start(event));
      EventHandler.on(this._element, EVENT_POINTERUP, event => this._end(event));

      this._element.classList.add(CLASS_NAME_POINTER_EVENT);
    } else {
      EventHandler.on(this._element, EVENT_TOUCHSTART, event => this._start(event));
      EventHandler.on(this._element, EVENT_TOUCHMOVE, event => this._move(event));
      EventHandler.on(this._element, EVENT_TOUCHEND, event => this._end(event));
    }
  }

  _eventIsPointerPenTouch(event) {
    return this._supportPointerEvents && (event.pointerType === POINTER_TYPE_PEN || event.pointerType === POINTER_TYPE_TOUCH);
  } // Static


  static isSupported() {
    return 'ontouchstart' in document.documentElement || navigator.maxTouchPoints > 0;
  }

}

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.2.3): carousel.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */
/**
 * Constants
 */

const NAME$c = 'carousel';
const DATA_KEY$8 = 'bs.carousel';
const EVENT_KEY$8 = `.${DATA_KEY$8}`;
const DATA_API_KEY$5 = '.data-api';
const ARROW_LEFT_KEY$1 = 'ArrowLeft';
const ARROW_RIGHT_KEY$1 = 'ArrowRight';
const TOUCHEVENT_COMPAT_WAIT = 500; // Time for mouse compat events to fire after touch

const ORDER_NEXT = 'next';
const ORDER_PREV = 'prev';
const DIRECTION_LEFT = 'left';
const DIRECTION_RIGHT = 'right';
const EVENT_SLIDE = `slide${EVENT_KEY$8}`;
const EVENT_SLID = `slid${EVENT_KEY$8}`;
const EVENT_KEYDOWN$1 = `keydown${EVENT_KEY$8}`;
const EVENT_MOUSEENTER$1 = `mouseenter${EVENT_KEY$8}`;
const EVENT_MOUSELEAVE$1 = `mouseleave${EVENT_KEY$8}`;
const EVENT_DRAG_START = `dragstart${EVENT_KEY$8}`;
const EVENT_LOAD_DATA_API$3 = `load${EVENT_KEY$8}${DATA_API_KEY$5}`;
const EVENT_CLICK_DATA_API$5 = `click${EVENT_KEY$8}${DATA_API_KEY$5}`;
const CLASS_NAME_CAROUSEL = 'carousel';
const CLASS_NAME_ACTIVE$2 = 'active';
const CLASS_NAME_SLIDE = 'slide';
const CLASS_NAME_END = 'carousel-item-end';
const CLASS_NAME_START = 'carousel-item-start';
const CLASS_NAME_NEXT = 'carousel-item-next';
const CLASS_NAME_PREV = 'carousel-item-prev';
const SELECTOR_ACTIVE = '.active';
const SELECTOR_ITEM = '.carousel-item';
const SELECTOR_ACTIVE_ITEM = SELECTOR_ACTIVE + SELECTOR_ITEM;
const SELECTOR_ITEM_IMG = '.carousel-item img';
const SELECTOR_INDICATORS = '.carousel-indicators';
const SELECTOR_DATA_SLIDE = '[data-bs-slide], [data-bs-slide-to]';
const SELECTOR_DATA_RIDE = '[data-bs-ride="carousel"]';
const KEY_TO_DIRECTION = {
  [ARROW_LEFT_KEY$1]: DIRECTION_RIGHT,
  [ARROW_RIGHT_KEY$1]: DIRECTION_LEFT
};
const Default$b = {
  interval: 5000,
  keyboard: true,
  pause: 'hover',
  ride: false,
  touch: true,
  wrap: true
};
const DefaultType$b = {
  interval: '(number|boolean)',
  // TODO:v6 remove boolean support
  keyboard: 'boolean',
  pause: '(string|boolean)',
  ride: '(boolean|string)',
  touch: 'boolean',
  wrap: 'boolean'
};
/**
 * Class definition
 */

class bootstrap_esm_Carousel extends BaseComponent {
  constructor(element, config) {
    super(element, config);
    this._interval = null;
    this._activeElement = null;
    this._isSliding = false;
    this.touchTimeout = null;
    this._swipeHelper = null;
    this._indicatorsElement = SelectorEngine.findOne(SELECTOR_INDICATORS, this._element);

    this._addEventListeners();

    if (this._config.ride === CLASS_NAME_CAROUSEL) {
      this.cycle();
    }
  } // Getters


  static get Default() {
    return Default$b;
  }

  static get DefaultType() {
    return DefaultType$b;
  }

  static get NAME() {
    return NAME$c;
  } // Public


  next() {
    this._slide(ORDER_NEXT);
  }

  nextWhenVisible() {
    // FIXME TODO use `document.visibilityState`
    // Don't call next when the page isn't visible
    // or the carousel or its parent isn't visible
    if (!document.hidden && isVisible(this._element)) {
      this.next();
    }
  }

  prev() {
    this._slide(ORDER_PREV);
  }

  pause() {
    if (this._isSliding) {
      triggerTransitionEnd(this._element);
    }

    this._clearInterval();
  }

  cycle() {
    this._clearInterval();

    this._updateInterval();

    this._interval = setInterval(() => this.nextWhenVisible(), this._config.interval);
  }

  _maybeEnableCycle() {
    if (!this._config.ride) {
      return;
    }

    if (this._isSliding) {
      EventHandler.one(this._element, EVENT_SLID, () => this.cycle());
      return;
    }

    this.cycle();
  }

  to(index) {
    const items = this._getItems();

    if (index > items.length - 1 || index < 0) {
      return;
    }

    if (this._isSliding) {
      EventHandler.one(this._element, EVENT_SLID, () => this.to(index));
      return;
    }

    const activeIndex = this._getItemIndex(this._getActive());

    if (activeIndex === index) {
      return;
    }

    const order = index > activeIndex ? ORDER_NEXT : ORDER_PREV;

    this._slide(order, items[index]);
  }

  dispose() {
    if (this._swipeHelper) {
      this._swipeHelper.dispose();
    }

    super.dispose();
  } // Private


  _configAfterMerge(config) {
    config.defaultInterval = config.interval;
    return config;
  }

  _addEventListeners() {
    if (this._config.keyboard) {
      EventHandler.on(this._element, EVENT_KEYDOWN$1, event => this._keydown(event));
    }

    if (this._config.pause === 'hover') {
      EventHandler.on(this._element, EVENT_MOUSEENTER$1, () => this.pause());
      EventHandler.on(this._element, EVENT_MOUSELEAVE$1, () => this._maybeEnableCycle());
    }

    if (this._config.touch && Swipe.isSupported()) {
      this._addTouchEventListeners();
    }
  }

  _addTouchEventListeners() {
    for (const img of SelectorEngine.find(SELECTOR_ITEM_IMG, this._element)) {
      EventHandler.on(img, EVENT_DRAG_START, event => event.preventDefault());
    }

    const endCallBack = () => {
      if (this._config.pause !== 'hover') {
        return;
      } // If it's a touch-enabled device, mouseenter/leave are fired as
      // part of the mouse compatibility events on first tap - the carousel
      // would stop cycling until user tapped out of it;
      // here, we listen for touchend, explicitly pause the carousel
      // (as if it's the second time we tap on it, mouseenter compat event
      // is NOT fired) and after a timeout (to allow for mouse compatibility
      // events to fire) we explicitly restart cycling


      this.pause();

      if (this.touchTimeout) {
        clearTimeout(this.touchTimeout);
      }

      this.touchTimeout = setTimeout(() => this._maybeEnableCycle(), TOUCHEVENT_COMPAT_WAIT + this._config.interval);
    };

    const swipeConfig = {
      leftCallback: () => this._slide(this._directionToOrder(DIRECTION_LEFT)),
      rightCallback: () => this._slide(this._directionToOrder(DIRECTION_RIGHT)),
      endCallback: endCallBack
    };
    this._swipeHelper = new Swipe(this._element, swipeConfig);
  }

  _keydown(event) {
    if (/input|textarea/i.test(event.target.tagName)) {
      return;
    }

    const direction = KEY_TO_DIRECTION[event.key];

    if (direction) {
      event.preventDefault();

      this._slide(this._directionToOrder(direction));
    }
  }

  _getItemIndex(element) {
    return this._getItems().indexOf(element);
  }

  _setActiveIndicatorElement(index) {
    if (!this._indicatorsElement) {
      return;
    }

    const activeIndicator = SelectorEngine.findOne(SELECTOR_ACTIVE, this._indicatorsElement);
    activeIndicator.classList.remove(CLASS_NAME_ACTIVE$2);
    activeIndicator.removeAttribute('aria-current');
    const newActiveIndicator = SelectorEngine.findOne(`[data-bs-slide-to="${index}"]`, this._indicatorsElement);

    if (newActiveIndicator) {
      newActiveIndicator.classList.add(CLASS_NAME_ACTIVE$2);
      newActiveIndicator.setAttribute('aria-current', 'true');
    }
  }

  _updateInterval() {
    const element = this._activeElement || this._getActive();

    if (!element) {
      return;
    }

    const elementInterval = Number.parseInt(element.getAttribute('data-bs-interval'), 10);
    this._config.interval = elementInterval || this._config.defaultInterval;
  }

  _slide(order, element = null) {
    if (this._isSliding) {
      return;
    }

    const activeElement = this._getActive();

    const isNext = order === ORDER_NEXT;
    const nextElement = element || getNextActiveElement(this._getItems(), activeElement, isNext, this._config.wrap);

    if (nextElement === activeElement) {
      return;
    }

    const nextElementIndex = this._getItemIndex(nextElement);

    const triggerEvent = eventName => {
      return EventHandler.trigger(this._element, eventName, {
        relatedTarget: nextElement,
        direction: this._orderToDirection(order),
        from: this._getItemIndex(activeElement),
        to: nextElementIndex
      });
    };

    const slideEvent = triggerEvent(EVENT_SLIDE);

    if (slideEvent.defaultPrevented) {
      return;
    }

    if (!activeElement || !nextElement) {
      // Some weirdness is happening, so we bail
      // todo: change tests that use empty divs to avoid this check
      return;
    }

    const isCycling = Boolean(this._interval);
    this.pause();
    this._isSliding = true;

    this._setActiveIndicatorElement(nextElementIndex);

    this._activeElement = nextElement;
    const directionalClassName = isNext ? CLASS_NAME_START : CLASS_NAME_END;
    const orderClassName = isNext ? CLASS_NAME_NEXT : CLASS_NAME_PREV;
    nextElement.classList.add(orderClassName);
    reflow(nextElement);
    activeElement.classList.add(directionalClassName);
    nextElement.classList.add(directionalClassName);

    const completeCallBack = () => {
      nextElement.classList.remove(directionalClassName, orderClassName);
      nextElement.classList.add(CLASS_NAME_ACTIVE$2);
      activeElement.classList.remove(CLASS_NAME_ACTIVE$2, orderClassName, directionalClassName);
      this._isSliding = false;
      triggerEvent(EVENT_SLID);
    };

    this._queueCallback(completeCallBack, activeElement, this._isAnimated());

    if (isCycling) {
      this.cycle();
    }
  }

  _isAnimated() {
    return this._element.classList.contains(CLASS_NAME_SLIDE);
  }

  _getActive() {
    return SelectorEngine.findOne(SELECTOR_ACTIVE_ITEM, this._element);
  }

  _getItems() {
    return SelectorEngine.find(SELECTOR_ITEM, this._element);
  }

  _clearInterval() {
    if (this._interval) {
      clearInterval(this._interval);
      this._interval = null;
    }
  }

  _directionToOrder(direction) {
    if (isRTL()) {
      return direction === DIRECTION_LEFT ? ORDER_PREV : ORDER_NEXT;
    }

    return direction === DIRECTION_LEFT ? ORDER_NEXT : ORDER_PREV;
  }

  _orderToDirection(order) {
    if (isRTL()) {
      return order === ORDER_PREV ? DIRECTION_LEFT : DIRECTION_RIGHT;
    }

    return order === ORDER_PREV ? DIRECTION_RIGHT : DIRECTION_LEFT;
  } // Static


  static jQueryInterface(config) {
    return this.each(function () {
      const data = bootstrap_esm_Carousel.getOrCreateInstance(this, config);

      if (typeof config === 'number') {
        data.to(config);
        return;
      }

      if (typeof config === 'string') {
        if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {
          throw new TypeError(`No method named "${config}"`);
        }

        data[config]();
      }
    });
  }

}
/**
 * Data API implementation
 */


EventHandler.on(document, EVENT_CLICK_DATA_API$5, SELECTOR_DATA_SLIDE, function (event) {
  const target = getElementFromSelector(this);

  if (!target || !target.classList.contains(CLASS_NAME_CAROUSEL)) {
    return;
  }

  event.preventDefault();
  const carousel = bootstrap_esm_Carousel.getOrCreateInstance(target);
  const slideIndex = this.getAttribute('data-bs-slide-to');

  if (slideIndex) {
    carousel.to(slideIndex);

    carousel._maybeEnableCycle();

    return;
  }

  if (Manipulator.getDataAttribute(this, 'slide') === 'next') {
    carousel.next();

    carousel._maybeEnableCycle();

    return;
  }

  carousel.prev();

  carousel._maybeEnableCycle();
});
EventHandler.on(window, EVENT_LOAD_DATA_API$3, () => {
  const carousels = SelectorEngine.find(SELECTOR_DATA_RIDE);

  for (const carousel of carousels) {
    bootstrap_esm_Carousel.getOrCreateInstance(carousel);
  }
});
/**
 * jQuery
 */

defineJQueryPlugin(bootstrap_esm_Carousel);

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.2.3): collapse.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */
/**
 * Constants
 */

const NAME$b = 'collapse';
const DATA_KEY$7 = 'bs.collapse';
const EVENT_KEY$7 = `.${DATA_KEY$7}`;
const DATA_API_KEY$4 = '.data-api';
const EVENT_SHOW$6 = `show${EVENT_KEY$7}`;
const EVENT_SHOWN$6 = `shown${EVENT_KEY$7}`;
const EVENT_HIDE$6 = `hide${EVENT_KEY$7}`;
const EVENT_HIDDEN$6 = `hidden${EVENT_KEY$7}`;
const EVENT_CLICK_DATA_API$4 = `click${EVENT_KEY$7}${DATA_API_KEY$4}`;
const CLASS_NAME_SHOW$7 = 'show';
const CLASS_NAME_COLLAPSE = 'collapse';
const CLASS_NAME_COLLAPSING = 'collapsing';
const CLASS_NAME_COLLAPSED = 'collapsed';
const CLASS_NAME_DEEPER_CHILDREN = `:scope .${CLASS_NAME_COLLAPSE} .${CLASS_NAME_COLLAPSE}`;
const CLASS_NAME_HORIZONTAL = 'collapse-horizontal';
const WIDTH = 'width';
const HEIGHT = 'height';
const SELECTOR_ACTIVES = '.collapse.show, .collapse.collapsing';
const SELECTOR_DATA_TOGGLE$4 = '[data-bs-toggle="collapse"]';
const Default$a = {
  parent: null,
  toggle: true
};
const DefaultType$a = {
  parent: '(null|element)',
  toggle: 'boolean'
};
/**
 * Class definition
 */

class bootstrap_esm_Collapse extends BaseComponent {
  constructor(element, config) {
    super(element, config);
    this._isTransitioning = false;
    this._triggerArray = [];
    const toggleList = SelectorEngine.find(SELECTOR_DATA_TOGGLE$4);

    for (const elem of toggleList) {
      const selector = getSelectorFromElement(elem);
      const filterElement = SelectorEngine.find(selector).filter(foundElement => foundElement === this._element);

      if (selector !== null && filterElement.length) {
        this._triggerArray.push(elem);
      }
    }

    this._initializeChildren();

    if (!this._config.parent) {
      this._addAriaAndCollapsedClass(this._triggerArray, this._isShown());
    }

    if (this._config.toggle) {
      this.toggle();
    }
  } // Getters


  static get Default() {
    return Default$a;
  }

  static get DefaultType() {
    return DefaultType$a;
  }

  static get NAME() {
    return NAME$b;
  } // Public


  toggle() {
    if (this._isShown()) {
      this.hide();
    } else {
      this.show();
    }
  }

  show() {
    if (this._isTransitioning || this._isShown()) {
      return;
    }

    let activeChildren = []; // find active children

    if (this._config.parent) {
      activeChildren = this._getFirstLevelChildren(SELECTOR_ACTIVES).filter(element => element !== this._element).map(element => bootstrap_esm_Collapse.getOrCreateInstance(element, {
        toggle: false
      }));
    }

    if (activeChildren.length && activeChildren[0]._isTransitioning) {
      return;
    }

    const startEvent = EventHandler.trigger(this._element, EVENT_SHOW$6);

    if (startEvent.defaultPrevented) {
      return;
    }

    for (const activeInstance of activeChildren) {
      activeInstance.hide();
    }

    const dimension = this._getDimension();

    this._element.classList.remove(CLASS_NAME_COLLAPSE);

    this._element.classList.add(CLASS_NAME_COLLAPSING);

    this._element.style[dimension] = 0;

    this._addAriaAndCollapsedClass(this._triggerArray, true);

    this._isTransitioning = true;

    const complete = () => {
      this._isTransitioning = false;

      this._element.classList.remove(CLASS_NAME_COLLAPSING);

      this._element.classList.add(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW$7);

      this._element.style[dimension] = '';
      EventHandler.trigger(this._element, EVENT_SHOWN$6);
    };

    const capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);
    const scrollSize = `scroll${capitalizedDimension}`;

    this._queueCallback(complete, this._element, true);

    this._element.style[dimension] = `${this._element[scrollSize]}px`;
  }

  hide() {
    if (this._isTransitioning || !this._isShown()) {
      return;
    }

    const startEvent = EventHandler.trigger(this._element, EVENT_HIDE$6);

    if (startEvent.defaultPrevented) {
      return;
    }

    const dimension = this._getDimension();

    this._element.style[dimension] = `${this._element.getBoundingClientRect()[dimension]}px`;
    reflow(this._element);

    this._element.classList.add(CLASS_NAME_COLLAPSING);

    this._element.classList.remove(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW$7);

    for (const trigger of this._triggerArray) {
      const element = getElementFromSelector(trigger);

      if (element && !this._isShown(element)) {
        this._addAriaAndCollapsedClass([trigger], false);
      }
    }

    this._isTransitioning = true;

    const complete = () => {
      this._isTransitioning = false;

      this._element.classList.remove(CLASS_NAME_COLLAPSING);

      this._element.classList.add(CLASS_NAME_COLLAPSE);

      EventHandler.trigger(this._element, EVENT_HIDDEN$6);
    };

    this._element.style[dimension] = '';

    this._queueCallback(complete, this._element, true);
  }

  _isShown(element = this._element) {
    return element.classList.contains(CLASS_NAME_SHOW$7);
  } // Private


  _configAfterMerge(config) {
    config.toggle = Boolean(config.toggle); // Coerce string values

    config.parent = getElement(config.parent);
    return config;
  }

  _getDimension() {
    return this._element.classList.contains(CLASS_NAME_HORIZONTAL) ? WIDTH : HEIGHT;
  }

  _initializeChildren() {
    if (!this._config.parent) {
      return;
    }

    const children = this._getFirstLevelChildren(SELECTOR_DATA_TOGGLE$4);

    for (const element of children) {
      const selected = getElementFromSelector(element);

      if (selected) {
        this._addAriaAndCollapsedClass([element], this._isShown(selected));
      }
    }
  }

  _getFirstLevelChildren(selector) {
    const children = SelectorEngine.find(CLASS_NAME_DEEPER_CHILDREN, this._config.parent); // remove children if greater depth

    return SelectorEngine.find(selector, this._config.parent).filter(element => !children.includes(element));
  }

  _addAriaAndCollapsedClass(triggerArray, isOpen) {
    if (!triggerArray.length) {
      return;
    }

    for (const element of triggerArray) {
      element.classList.toggle(CLASS_NAME_COLLAPSED, !isOpen);
      element.setAttribute('aria-expanded', isOpen);
    }
  } // Static


  static jQueryInterface(config) {
    const _config = {};

    if (typeof config === 'string' && /show|hide/.test(config)) {
      _config.toggle = false;
    }

    return this.each(function () {
      const data = bootstrap_esm_Collapse.getOrCreateInstance(this, _config);

      if (typeof config === 'string') {
        if (typeof data[config] === 'undefined') {
          throw new TypeError(`No method named "${config}"`);
        }

        data[config]();
      }
    });
  }

}
/**
 * Data API implementation
 */


EventHandler.on(document, EVENT_CLICK_DATA_API$4, SELECTOR_DATA_TOGGLE$4, function (event) {
  // preventDefault only for <a> elements (which change the URL) not inside the collapsible element
  if (event.target.tagName === 'A' || event.delegateTarget && event.delegateTarget.tagName === 'A') {
    event.preventDefault();
  }

  const selector = getSelectorFromElement(this);
  const selectorElements = SelectorEngine.find(selector);

  for (const element of selectorElements) {
    bootstrap_esm_Collapse.getOrCreateInstance(element, {
      toggle: false
    }).toggle();
  }
});
/**
 * jQuery
 */

defineJQueryPlugin(bootstrap_esm_Collapse);

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.2.3): dropdown.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */
/**
 * Constants
 */

const NAME$a = 'dropdown';
const DATA_KEY$6 = 'bs.dropdown';
const EVENT_KEY$6 = `.${DATA_KEY$6}`;
const DATA_API_KEY$3 = '.data-api';
const ESCAPE_KEY$2 = 'Escape';
const TAB_KEY$1 = 'Tab';
const ARROW_UP_KEY$1 = 'ArrowUp';
const ARROW_DOWN_KEY$1 = 'ArrowDown';
const RIGHT_MOUSE_BUTTON = 2; // MouseEvent.button value for the secondary button, usually the right button

const EVENT_HIDE$5 = `hide${EVENT_KEY$6}`;
const EVENT_HIDDEN$5 = `hidden${EVENT_KEY$6}`;
const EVENT_SHOW$5 = `show${EVENT_KEY$6}`;
const EVENT_SHOWN$5 = `shown${EVENT_KEY$6}`;
const EVENT_CLICK_DATA_API$3 = `click${EVENT_KEY$6}${DATA_API_KEY$3}`;
const EVENT_KEYDOWN_DATA_API = `keydown${EVENT_KEY$6}${DATA_API_KEY$3}`;
const EVENT_KEYUP_DATA_API = `keyup${EVENT_KEY$6}${DATA_API_KEY$3}`;
const CLASS_NAME_SHOW$6 = 'show';
const CLASS_NAME_DROPUP = 'dropup';
const CLASS_NAME_DROPEND = 'dropend';
const CLASS_NAME_DROPSTART = 'dropstart';
const CLASS_NAME_DROPUP_CENTER = 'dropup-center';
const CLASS_NAME_DROPDOWN_CENTER = 'dropdown-center';
const SELECTOR_DATA_TOGGLE$3 = '[data-bs-toggle="dropdown"]:not(.disabled):not(:disabled)';
const SELECTOR_DATA_TOGGLE_SHOWN = `${SELECTOR_DATA_TOGGLE$3}.${CLASS_NAME_SHOW$6}`;
const SELECTOR_MENU = '.dropdown-menu';
const SELECTOR_NAVBAR = '.navbar';
const SELECTOR_NAVBAR_NAV = '.navbar-nav';
const SELECTOR_VISIBLE_ITEMS = '.dropdown-menu .dropdown-item:not(.disabled):not(:disabled)';
const PLACEMENT_TOP = isRTL() ? 'top-end' : 'top-start';
const PLACEMENT_TOPEND = isRTL() ? 'top-start' : 'top-end';
const PLACEMENT_BOTTOM = isRTL() ? 'bottom-end' : 'bottom-start';
const PLACEMENT_BOTTOMEND = isRTL() ? 'bottom-start' : 'bottom-end';
const PLACEMENT_RIGHT = isRTL() ? 'left-start' : 'right-start';
const PLACEMENT_LEFT = isRTL() ? 'right-start' : 'left-start';
const PLACEMENT_TOPCENTER = 'top';
const PLACEMENT_BOTTOMCENTER = 'bottom';
const Default$9 = {
  autoClose: true,
  boundary: 'clippingParents',
  display: 'dynamic',
  offset: [0, 2],
  popperConfig: null,
  reference: 'toggle'
};
const DefaultType$9 = {
  autoClose: '(boolean|string)',
  boundary: '(string|element)',
  display: 'string',
  offset: '(array|string|function)',
  popperConfig: '(null|object|function)',
  reference: '(string|element|object)'
};
/**
 * Class definition
 */

class Dropdown extends BaseComponent {
  constructor(element, config) {
    super(element, config);
    this._popper = null;
    this._parent = this._element.parentNode; // dropdown wrapper
    // todo: v6 revert #37011 & change markup https://getbootstrap.com/docs/5.2/forms/input-group/

    this._menu = SelectorEngine.next(this._element, SELECTOR_MENU)[0] || SelectorEngine.prev(this._element, SELECTOR_MENU)[0] || SelectorEngine.findOne(SELECTOR_MENU, this._parent);
    this._inNavbar = this._detectNavbar();
  } // Getters


  static get Default() {
    return Default$9;
  }

  static get DefaultType() {
    return DefaultType$9;
  }

  static get NAME() {
    return NAME$a;
  } // Public


  toggle() {
    return this._isShown() ? this.hide() : this.show();
  }

  show() {
    if (isDisabled(this._element) || this._isShown()) {
      return;
    }

    const relatedTarget = {
      relatedTarget: this._element
    };
    const showEvent = EventHandler.trigger(this._element, EVENT_SHOW$5, relatedTarget);

    if (showEvent.defaultPrevented) {
      return;
    }

    this._createPopper(); // If this is a touch-enabled device we add extra
    // empty mouseover listeners to the body's immediate children;
    // only needed because of broken event delegation on iOS
    // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html


    if ('ontouchstart' in document.documentElement && !this._parent.closest(SELECTOR_NAVBAR_NAV)) {
      for (const element of [].concat(...document.body.children)) {
        EventHandler.on(element, 'mouseover', noop);
      }
    }

    this._element.focus();

    this._element.setAttribute('aria-expanded', true);

    this._menu.classList.add(CLASS_NAME_SHOW$6);

    this._element.classList.add(CLASS_NAME_SHOW$6);

    EventHandler.trigger(this._element, EVENT_SHOWN$5, relatedTarget);
  }

  hide() {
    if (isDisabled(this._element) || !this._isShown()) {
      return;
    }

    const relatedTarget = {
      relatedTarget: this._element
    };

    this._completeHide(relatedTarget);
  }

  dispose() {
    if (this._popper) {
      this._popper.destroy();
    }

    super.dispose();
  }

  update() {
    this._inNavbar = this._detectNavbar();

    if (this._popper) {
      this._popper.update();
    }
  } // Private


  _completeHide(relatedTarget) {
    const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$5, relatedTarget);

    if (hideEvent.defaultPrevented) {
      return;
    } // If this is a touch-enabled device we remove the extra
    // empty mouseover listeners we added for iOS support


    if ('ontouchstart' in document.documentElement) {
      for (const element of [].concat(...document.body.children)) {
        EventHandler.off(element, 'mouseover', noop);
      }
    }

    if (this._popper) {
      this._popper.destroy();
    }

    this._menu.classList.remove(CLASS_NAME_SHOW$6);

    this._element.classList.remove(CLASS_NAME_SHOW$6);

    this._element.setAttribute('aria-expanded', 'false');

    Manipulator.removeDataAttribute(this._menu, 'popper');
    EventHandler.trigger(this._element, EVENT_HIDDEN$5, relatedTarget);
  }

  _getConfig(config) {
    config = super._getConfig(config);

    if (typeof config.reference === 'object' && !bootstrap_esm_isElement(config.reference) && typeof config.reference.getBoundingClientRect !== 'function') {
      // Popper virtual elements require a getBoundingClientRect method
      throw new TypeError(`${NAME$a.toUpperCase()}: Option "reference" provided type "object" without a required "getBoundingClientRect" method.`);
    }

    return config;
  }

  _createPopper() {
    if (typeof lib_namespaceObject === 'undefined') {
      throw new TypeError('Bootstrap\'s dropdowns require Popper (https://popper.js.org)');
    }

    let referenceElement = this._element;

    if (this._config.reference === 'parent') {
      referenceElement = this._parent;
    } else if (bootstrap_esm_isElement(this._config.reference)) {
      referenceElement = getElement(this._config.reference);
    } else if (typeof this._config.reference === 'object') {
      referenceElement = this._config.reference;
    }

    const popperConfig = this._getPopperConfig();

    this._popper = popper_createPopper(referenceElement, this._menu, popperConfig);
  }

  _isShown() {
    return this._menu.classList.contains(CLASS_NAME_SHOW$6);
  }

  _getPlacement() {
    const parentDropdown = this._parent;

    if (parentDropdown.classList.contains(CLASS_NAME_DROPEND)) {
      return PLACEMENT_RIGHT;
    }

    if (parentDropdown.classList.contains(CLASS_NAME_DROPSTART)) {
      return PLACEMENT_LEFT;
    }

    if (parentDropdown.classList.contains(CLASS_NAME_DROPUP_CENTER)) {
      return PLACEMENT_TOPCENTER;
    }

    if (parentDropdown.classList.contains(CLASS_NAME_DROPDOWN_CENTER)) {
      return PLACEMENT_BOTTOMCENTER;
    } // We need to trim the value because custom properties can also include spaces


    const isEnd = getComputedStyle(this._menu).getPropertyValue('--bs-position').trim() === 'end';

    if (parentDropdown.classList.contains(CLASS_NAME_DROPUP)) {
      return isEnd ? PLACEMENT_TOPEND : PLACEMENT_TOP;
    }

    return isEnd ? PLACEMENT_BOTTOMEND : PLACEMENT_BOTTOM;
  }

  _detectNavbar() {
    return this._element.closest(SELECTOR_NAVBAR) !== null;
  }

  _getOffset() {
    const {
      offset
    } = this._config;

    if (typeof offset === 'string') {
      return offset.split(',').map(value => Number.parseInt(value, 10));
    }

    if (typeof offset === 'function') {
      return popperData => offset(popperData, this._element);
    }

    return offset;
  }

  _getPopperConfig() {
    const defaultBsPopperConfig = {
      placement: this._getPlacement(),
      modifiers: [{
        name: 'preventOverflow',
        options: {
          boundary: this._config.boundary
        }
      }, {
        name: 'offset',
        options: {
          offset: this._getOffset()
        }
      }]
    }; // Disable Popper if we have a static display or Dropdown is in Navbar

    if (this._inNavbar || this._config.display === 'static') {
      Manipulator.setDataAttribute(this._menu, 'popper', 'static'); // todo:v6 remove

      defaultBsPopperConfig.modifiers = [{
        name: 'applyStyles',
        enabled: false
      }];
    }

    return { ...defaultBsPopperConfig,
      ...(typeof this._config.popperConfig === 'function' ? this._config.popperConfig(defaultBsPopperConfig) : this._config.popperConfig)
    };
  }

  _selectMenuItem({
    key,
    target
  }) {
    const items = SelectorEngine.find(SELECTOR_VISIBLE_ITEMS, this._menu).filter(element => isVisible(element));

    if (!items.length) {
      return;
    } // if target isn't included in items (e.g. when expanding the dropdown)
    // allow cycling to get the last item in case key equals ARROW_UP_KEY


    getNextActiveElement(items, target, key === ARROW_DOWN_KEY$1, !items.includes(target)).focus();
  } // Static


  static jQueryInterface(config) {
    return this.each(function () {
      const data = Dropdown.getOrCreateInstance(this, config);

      if (typeof config !== 'string') {
        return;
      }

      if (typeof data[config] === 'undefined') {
        throw new TypeError(`No method named "${config}"`);
      }

      data[config]();
    });
  }

  static clearMenus(event) {
    if (event.button === RIGHT_MOUSE_BUTTON || event.type === 'keyup' && event.key !== TAB_KEY$1) {
      return;
    }

    const openToggles = SelectorEngine.find(SELECTOR_DATA_TOGGLE_SHOWN);

    for (const toggle of openToggles) {
      const context = Dropdown.getInstance(toggle);

      if (!context || context._config.autoClose === false) {
        continue;
      }

      const composedPath = event.composedPath();
      const isMenuTarget = composedPath.includes(context._menu);

      if (composedPath.includes(context._element) || context._config.autoClose === 'inside' && !isMenuTarget || context._config.autoClose === 'outside' && isMenuTarget) {
        continue;
      } // Tab navigation through the dropdown menu or events from contained inputs shouldn't close the menu


      if (context._menu.contains(event.target) && (event.type === 'keyup' && event.key === TAB_KEY$1 || /input|select|option|textarea|form/i.test(event.target.tagName))) {
        continue;
      }

      const relatedTarget = {
        relatedTarget: context._element
      };

      if (event.type === 'click') {
        relatedTarget.clickEvent = event;
      }

      context._completeHide(relatedTarget);
    }
  }

  static dataApiKeydownHandler(event) {
    // If not an UP | DOWN | ESCAPE key => not a dropdown command
    // If input/textarea && if key is other than ESCAPE => not a dropdown command
    const isInput = /input|textarea/i.test(event.target.tagName);
    const isEscapeEvent = event.key === ESCAPE_KEY$2;
    const isUpOrDownEvent = [ARROW_UP_KEY$1, ARROW_DOWN_KEY$1].includes(event.key);

    if (!isUpOrDownEvent && !isEscapeEvent) {
      return;
    }

    if (isInput && !isEscapeEvent) {
      return;
    }

    event.preventDefault(); // todo: v6 revert #37011 & change markup https://getbootstrap.com/docs/5.2/forms/input-group/

    const getToggleButton = this.matches(SELECTOR_DATA_TOGGLE$3) ? this : SelectorEngine.prev(this, SELECTOR_DATA_TOGGLE$3)[0] || SelectorEngine.next(this, SELECTOR_DATA_TOGGLE$3)[0] || SelectorEngine.findOne(SELECTOR_DATA_TOGGLE$3, event.delegateTarget.parentNode);
    const instance = Dropdown.getOrCreateInstance(getToggleButton);

    if (isUpOrDownEvent) {
      event.stopPropagation();
      instance.show();

      instance._selectMenuItem(event);

      return;
    }

    if (instance._isShown()) {
      // else is escape and we check if it is shown
      event.stopPropagation();
      instance.hide();
      getToggleButton.focus();
    }
  }

}
/**
 * Data API implementation
 */


EventHandler.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_DATA_TOGGLE$3, Dropdown.dataApiKeydownHandler);
EventHandler.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_MENU, Dropdown.dataApiKeydownHandler);
EventHandler.on(document, EVENT_CLICK_DATA_API$3, Dropdown.clearMenus);
EventHandler.on(document, EVENT_KEYUP_DATA_API, Dropdown.clearMenus);
EventHandler.on(document, EVENT_CLICK_DATA_API$3, SELECTOR_DATA_TOGGLE$3, function (event) {
  event.preventDefault();
  Dropdown.getOrCreateInstance(this).toggle();
});
/**
 * jQuery
 */

defineJQueryPlugin(Dropdown);

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.2.3): util/scrollBar.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */
/**
 * Constants
 */

const SELECTOR_FIXED_CONTENT = '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top';
const SELECTOR_STICKY_CONTENT = '.sticky-top';
const PROPERTY_PADDING = 'padding-right';
const PROPERTY_MARGIN = 'margin-right';
/**
 * Class definition
 */

class ScrollBarHelper {
  constructor() {
    this._element = document.body;
  } // Public


  getWidth() {
    // https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth#usage_notes
    const documentWidth = document.documentElement.clientWidth;
    return Math.abs(window.innerWidth - documentWidth);
  }

  hide() {
    const width = this.getWidth();

    this._disableOverFlow(); // give padding to element to balance the hidden scrollbar width


    this._setElementAttributes(this._element, PROPERTY_PADDING, calculatedValue => calculatedValue + width); // trick: We adjust positive paddingRight and negative marginRight to sticky-top elements to keep showing fullwidth


    this._setElementAttributes(SELECTOR_FIXED_CONTENT, PROPERTY_PADDING, calculatedValue => calculatedValue + width);

    this._setElementAttributes(SELECTOR_STICKY_CONTENT, PROPERTY_MARGIN, calculatedValue => calculatedValue - width);
  }

  reset() {
    this._resetElementAttributes(this._element, 'overflow');

    this._resetElementAttributes(this._element, PROPERTY_PADDING);

    this._resetElementAttributes(SELECTOR_FIXED_CONTENT, PROPERTY_PADDING);

    this._resetElementAttributes(SELECTOR_STICKY_CONTENT, PROPERTY_MARGIN);
  }

  isOverflowing() {
    return this.getWidth() > 0;
  } // Private


  _disableOverFlow() {
    this._saveInitialAttribute(this._element, 'overflow');

    this._element.style.overflow = 'hidden';
  }

  _setElementAttributes(selector, styleProperty, callback) {
    const scrollbarWidth = this.getWidth();

    const manipulationCallBack = element => {
      if (element !== this._element && window.innerWidth > element.clientWidth + scrollbarWidth) {
        return;
      }

      this._saveInitialAttribute(element, styleProperty);

      const calculatedValue = window.getComputedStyle(element).getPropertyValue(styleProperty);
      element.style.setProperty(styleProperty, `${callback(Number.parseFloat(calculatedValue))}px`);
    };

    this._applyManipulationCallback(selector, manipulationCallBack);
  }

  _saveInitialAttribute(element, styleProperty) {
    const actualValue = element.style.getPropertyValue(styleProperty);

    if (actualValue) {
      Manipulator.setDataAttribute(element, styleProperty, actualValue);
    }
  }

  _resetElementAttributes(selector, styleProperty) {
    const manipulationCallBack = element => {
      const value = Manipulator.getDataAttribute(element, styleProperty); // We only want to remove the property if the value is `null`; the value can also be zero

      if (value === null) {
        element.style.removeProperty(styleProperty);
        return;
      }

      Manipulator.removeDataAttribute(element, styleProperty);
      element.style.setProperty(styleProperty, value);
    };

    this._applyManipulationCallback(selector, manipulationCallBack);
  }

  _applyManipulationCallback(selector, callBack) {
    if (bootstrap_esm_isElement(selector)) {
      callBack(selector);
      return;
    }

    for (const sel of SelectorEngine.find(selector, this._element)) {
      callBack(sel);
    }
  }

}

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.2.3): util/backdrop.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */
/**
 * Constants
 */

const NAME$9 = 'backdrop';
const CLASS_NAME_FADE$4 = 'fade';
const CLASS_NAME_SHOW$5 = 'show';
const EVENT_MOUSEDOWN = `mousedown.bs.${NAME$9}`;
const Default$8 = {
  className: 'modal-backdrop',
  clickCallback: null,
  isAnimated: false,
  isVisible: true,
  // if false, we use the backdrop helper without adding any element to the dom
  rootElement: 'body' // give the choice to place backdrop under different elements

};
const DefaultType$8 = {
  className: 'string',
  clickCallback: '(function|null)',
  isAnimated: 'boolean',
  isVisible: 'boolean',
  rootElement: '(element|string)'
};
/**
 * Class definition
 */

class Backdrop extends Config {
  constructor(config) {
    super();
    this._config = this._getConfig(config);
    this._isAppended = false;
    this._element = null;
  } // Getters


  static get Default() {
    return Default$8;
  }

  static get DefaultType() {
    return DefaultType$8;
  }

  static get NAME() {
    return NAME$9;
  } // Public


  show(callback) {
    if (!this._config.isVisible) {
      execute(callback);
      return;
    }

    this._append();

    const element = this._getElement();

    if (this._config.isAnimated) {
      reflow(element);
    }

    element.classList.add(CLASS_NAME_SHOW$5);

    this._emulateAnimation(() => {
      execute(callback);
    });
  }

  hide(callback) {
    if (!this._config.isVisible) {
      execute(callback);
      return;
    }

    this._getElement().classList.remove(CLASS_NAME_SHOW$5);

    this._emulateAnimation(() => {
      this.dispose();
      execute(callback);
    });
  }

  dispose() {
    if (!this._isAppended) {
      return;
    }

    EventHandler.off(this._element, EVENT_MOUSEDOWN);

    this._element.remove();

    this._isAppended = false;
  } // Private


  _getElement() {
    if (!this._element) {
      const backdrop = document.createElement('div');
      backdrop.className = this._config.className;

      if (this._config.isAnimated) {
        backdrop.classList.add(CLASS_NAME_FADE$4);
      }

      this._element = backdrop;
    }

    return this._element;
  }

  _configAfterMerge(config) {
    // use getElement() with the default "body" to get a fresh Element on each instantiation
    config.rootElement = getElement(config.rootElement);
    return config;
  }

  _append() {
    if (this._isAppended) {
      return;
    }

    const element = this._getElement();

    this._config.rootElement.append(element);

    EventHandler.on(element, EVENT_MOUSEDOWN, () => {
      execute(this._config.clickCallback);
    });
    this._isAppended = true;
  }

  _emulateAnimation(callback) {
    executeAfterTransition(callback, this._getElement(), this._config.isAnimated);
  }

}

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.2.3): util/focustrap.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */
/**
 * Constants
 */

const NAME$8 = 'focustrap';
const DATA_KEY$5 = 'bs.focustrap';
const EVENT_KEY$5 = `.${DATA_KEY$5}`;
const EVENT_FOCUSIN$2 = `focusin${EVENT_KEY$5}`;
const EVENT_KEYDOWN_TAB = `keydown.tab${EVENT_KEY$5}`;
const TAB_KEY = 'Tab';
const TAB_NAV_FORWARD = 'forward';
const TAB_NAV_BACKWARD = 'backward';
const Default$7 = {
  autofocus: true,
  trapElement: null // The element to trap focus inside of

};
const DefaultType$7 = {
  autofocus: 'boolean',
  trapElement: 'element'
};
/**
 * Class definition
 */

class FocusTrap extends Config {
  constructor(config) {
    super();
    this._config = this._getConfig(config);
    this._isActive = false;
    this._lastTabNavDirection = null;
  } // Getters


  static get Default() {
    return Default$7;
  }

  static get DefaultType() {
    return DefaultType$7;
  }

  static get NAME() {
    return NAME$8;
  } // Public


  activate() {
    if (this._isActive) {
      return;
    }

    if (this._config.autofocus) {
      this._config.trapElement.focus();
    }

    EventHandler.off(document, EVENT_KEY$5); // guard against infinite focus loop

    EventHandler.on(document, EVENT_FOCUSIN$2, event => this._handleFocusin(event));
    EventHandler.on(document, EVENT_KEYDOWN_TAB, event => this._handleKeydown(event));
    this._isActive = true;
  }

  deactivate() {
    if (!this._isActive) {
      return;
    }

    this._isActive = false;
    EventHandler.off(document, EVENT_KEY$5);
  } // Private


  _handleFocusin(event) {
    const {
      trapElement
    } = this._config;

    if (event.target === document || event.target === trapElement || trapElement.contains(event.target)) {
      return;
    }

    const elements = SelectorEngine.focusableChildren(trapElement);

    if (elements.length === 0) {
      trapElement.focus();
    } else if (this._lastTabNavDirection === TAB_NAV_BACKWARD) {
      elements[elements.length - 1].focus();
    } else {
      elements[0].focus();
    }
  }

  _handleKeydown(event) {
    if (event.key !== TAB_KEY) {
      return;
    }

    this._lastTabNavDirection = event.shiftKey ? TAB_NAV_BACKWARD : TAB_NAV_FORWARD;
  }

}

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.2.3): modal.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */
/**
 * Constants
 */

const NAME$7 = 'modal';
const DATA_KEY$4 = 'bs.modal';
const EVENT_KEY$4 = `.${DATA_KEY$4}`;
const DATA_API_KEY$2 = '.data-api';
const ESCAPE_KEY$1 = 'Escape';
const EVENT_HIDE$4 = `hide${EVENT_KEY$4}`;
const EVENT_HIDE_PREVENTED$1 = `hidePrevented${EVENT_KEY$4}`;
const EVENT_HIDDEN$4 = `hidden${EVENT_KEY$4}`;
const EVENT_SHOW$4 = `show${EVENT_KEY$4}`;
const EVENT_SHOWN$4 = `shown${EVENT_KEY$4}`;
const EVENT_RESIZE$1 = `resize${EVENT_KEY$4}`;
const EVENT_CLICK_DISMISS = `click.dismiss${EVENT_KEY$4}`;
const EVENT_MOUSEDOWN_DISMISS = `mousedown.dismiss${EVENT_KEY$4}`;
const EVENT_KEYDOWN_DISMISS$1 = `keydown.dismiss${EVENT_KEY$4}`;
const EVENT_CLICK_DATA_API$2 = `click${EVENT_KEY$4}${DATA_API_KEY$2}`;
const CLASS_NAME_OPEN = 'modal-open';
const CLASS_NAME_FADE$3 = 'fade';
const CLASS_NAME_SHOW$4 = 'show';
const CLASS_NAME_STATIC = 'modal-static';
const OPEN_SELECTOR$1 = '.modal.show';
const SELECTOR_DIALOG = '.modal-dialog';
const SELECTOR_MODAL_BODY = '.modal-body';
const SELECTOR_DATA_TOGGLE$2 = '[data-bs-toggle="modal"]';
const Default$6 = {
  backdrop: true,
  focus: true,
  keyboard: true
};
const DefaultType$6 = {
  backdrop: '(boolean|string)',
  focus: 'boolean',
  keyboard: 'boolean'
};
/**
 * Class definition
 */

class bootstrap_esm_Modal extends BaseComponent {
  constructor(element, config) {
    super(element, config);
    this._dialog = SelectorEngine.findOne(SELECTOR_DIALOG, this._element);
    this._backdrop = this._initializeBackDrop();
    this._focustrap = this._initializeFocusTrap();
    this._isShown = false;
    this._isTransitioning = false;
    this._scrollBar = new ScrollBarHelper();

    this._addEventListeners();
  } // Getters


  static get Default() {
    return Default$6;
  }

  static get DefaultType() {
    return DefaultType$6;
  }

  static get NAME() {
    return NAME$7;
  } // Public


  toggle(relatedTarget) {
    return this._isShown ? this.hide() : this.show(relatedTarget);
  }

  show(relatedTarget) {
    if (this._isShown || this._isTransitioning) {
      return;
    }

    const showEvent = EventHandler.trigger(this._element, EVENT_SHOW$4, {
      relatedTarget
    });

    if (showEvent.defaultPrevented) {
      return;
    }

    this._isShown = true;
    this._isTransitioning = true;

    this._scrollBar.hide();

    document.body.classList.add(CLASS_NAME_OPEN);

    this._adjustDialog();

    this._backdrop.show(() => this._showElement(relatedTarget));
  }

  hide() {
    if (!this._isShown || this._isTransitioning) {
      return;
    }

    const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$4);

    if (hideEvent.defaultPrevented) {
      return;
    }

    this._isShown = false;
    this._isTransitioning = true;

    this._focustrap.deactivate();

    this._element.classList.remove(CLASS_NAME_SHOW$4);

    this._queueCallback(() => this._hideModal(), this._element, this._isAnimated());
  }

  dispose() {
    for (const htmlElement of [window, this._dialog]) {
      EventHandler.off(htmlElement, EVENT_KEY$4);
    }

    this._backdrop.dispose();

    this._focustrap.deactivate();

    super.dispose();
  }

  handleUpdate() {
    this._adjustDialog();
  } // Private


  _initializeBackDrop() {
    return new Backdrop({
      isVisible: Boolean(this._config.backdrop),
      // 'static' option will be translated to true, and booleans will keep their value,
      isAnimated: this._isAnimated()
    });
  }

  _initializeFocusTrap() {
    return new FocusTrap({
      trapElement: this._element
    });
  }

  _showElement(relatedTarget) {
    // try to append dynamic modal
    if (!document.body.contains(this._element)) {
      document.body.append(this._element);
    }

    this._element.style.display = 'block';

    this._element.removeAttribute('aria-hidden');

    this._element.setAttribute('aria-modal', true);

    this._element.setAttribute('role', 'dialog');

    this._element.scrollTop = 0;
    const modalBody = SelectorEngine.findOne(SELECTOR_MODAL_BODY, this._dialog);

    if (modalBody) {
      modalBody.scrollTop = 0;
    }

    reflow(this._element);

    this._element.classList.add(CLASS_NAME_SHOW$4);

    const transitionComplete = () => {
      if (this._config.focus) {
        this._focustrap.activate();
      }

      this._isTransitioning = false;
      EventHandler.trigger(this._element, EVENT_SHOWN$4, {
        relatedTarget
      });
    };

    this._queueCallback(transitionComplete, this._dialog, this._isAnimated());
  }

  _addEventListeners() {
    EventHandler.on(this._element, EVENT_KEYDOWN_DISMISS$1, event => {
      if (event.key !== ESCAPE_KEY$1) {
        return;
      }

      if (this._config.keyboard) {
        event.preventDefault();
        this.hide();
        return;
      }

      this._triggerBackdropTransition();
    });
    EventHandler.on(window, EVENT_RESIZE$1, () => {
      if (this._isShown && !this._isTransitioning) {
        this._adjustDialog();
      }
    });
    EventHandler.on(this._element, EVENT_MOUSEDOWN_DISMISS, event => {
      // a bad trick to segregate clicks that may start inside dialog but end outside, and avoid listen to scrollbar clicks
      EventHandler.one(this._element, EVENT_CLICK_DISMISS, event2 => {
        if (this._element !== event.target || this._element !== event2.target) {
          return;
        }

        if (this._config.backdrop === 'static') {
          this._triggerBackdropTransition();

          return;
        }

        if (this._config.backdrop) {
          this.hide();
        }
      });
    });
  }

  _hideModal() {
    this._element.style.display = 'none';

    this._element.setAttribute('aria-hidden', true);

    this._element.removeAttribute('aria-modal');

    this._element.removeAttribute('role');

    this._isTransitioning = false;

    this._backdrop.hide(() => {
      document.body.classList.remove(CLASS_NAME_OPEN);

      this._resetAdjustments();

      this._scrollBar.reset();

      EventHandler.trigger(this._element, EVENT_HIDDEN$4);
    });
  }

  _isAnimated() {
    return this._element.classList.contains(CLASS_NAME_FADE$3);
  }

  _triggerBackdropTransition() {
    const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE_PREVENTED$1);

    if (hideEvent.defaultPrevented) {
      return;
    }

    const isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;
    const initialOverflowY = this._element.style.overflowY; // return if the following background transition hasn't yet completed

    if (initialOverflowY === 'hidden' || this._element.classList.contains(CLASS_NAME_STATIC)) {
      return;
    }

    if (!isModalOverflowing) {
      this._element.style.overflowY = 'hidden';
    }

    this._element.classList.add(CLASS_NAME_STATIC);

    this._queueCallback(() => {
      this._element.classList.remove(CLASS_NAME_STATIC);

      this._queueCallback(() => {
        this._element.style.overflowY = initialOverflowY;
      }, this._dialog);
    }, this._dialog);

    this._element.focus();
  }
  /**
   * The following methods are used to handle overflowing modals
   */


  _adjustDialog() {
    const isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;

    const scrollbarWidth = this._scrollBar.getWidth();

    const isBodyOverflowing = scrollbarWidth > 0;

    if (isBodyOverflowing && !isModalOverflowing) {
      const property = isRTL() ? 'paddingLeft' : 'paddingRight';
      this._element.style[property] = `${scrollbarWidth}px`;
    }

    if (!isBodyOverflowing && isModalOverflowing) {
      const property = isRTL() ? 'paddingRight' : 'paddingLeft';
      this._element.style[property] = `${scrollbarWidth}px`;
    }
  }

  _resetAdjustments() {
    this._element.style.paddingLeft = '';
    this._element.style.paddingRight = '';
  } // Static


  static jQueryInterface(config, relatedTarget) {
    return this.each(function () {
      const data = bootstrap_esm_Modal.getOrCreateInstance(this, config);

      if (typeof config !== 'string') {
        return;
      }

      if (typeof data[config] === 'undefined') {
        throw new TypeError(`No method named "${config}"`);
      }

      data[config](relatedTarget);
    });
  }

}
/**
 * Data API implementation
 */


EventHandler.on(document, EVENT_CLICK_DATA_API$2, SELECTOR_DATA_TOGGLE$2, function (event) {
  const target = getElementFromSelector(this);

  if (['A', 'AREA'].includes(this.tagName)) {
    event.preventDefault();
  }

  EventHandler.one(target, EVENT_SHOW$4, showEvent => {
    if (showEvent.defaultPrevented) {
      // only register focus restorer if modal will actually get shown
      return;
    }

    EventHandler.one(target, EVENT_HIDDEN$4, () => {
      if (isVisible(this)) {
        this.focus();
      }
    });
  }); // avoid conflict when clicking modal toggler while another one is open

  const alreadyOpen = SelectorEngine.findOne(OPEN_SELECTOR$1);

  if (alreadyOpen) {
    bootstrap_esm_Modal.getInstance(alreadyOpen).hide();
  }

  const data = bootstrap_esm_Modal.getOrCreateInstance(target);
  data.toggle(this);
});
enableDismissTrigger(bootstrap_esm_Modal);
/**
 * jQuery
 */

defineJQueryPlugin(bootstrap_esm_Modal);

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.2.3): offcanvas.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */
/**
 * Constants
 */

const NAME$6 = 'offcanvas';
const DATA_KEY$3 = 'bs.offcanvas';
const EVENT_KEY$3 = `.${DATA_KEY$3}`;
const DATA_API_KEY$1 = '.data-api';
const EVENT_LOAD_DATA_API$2 = `load${EVENT_KEY$3}${DATA_API_KEY$1}`;
const ESCAPE_KEY = 'Escape';
const CLASS_NAME_SHOW$3 = 'show';
const CLASS_NAME_SHOWING$1 = 'showing';
const CLASS_NAME_HIDING = 'hiding';
const CLASS_NAME_BACKDROP = 'offcanvas-backdrop';
const OPEN_SELECTOR = '.offcanvas.show';
const EVENT_SHOW$3 = `show${EVENT_KEY$3}`;
const EVENT_SHOWN$3 = `shown${EVENT_KEY$3}`;
const EVENT_HIDE$3 = `hide${EVENT_KEY$3}`;
const EVENT_HIDE_PREVENTED = `hidePrevented${EVENT_KEY$3}`;
const EVENT_HIDDEN$3 = `hidden${EVENT_KEY$3}`;
const EVENT_RESIZE = `resize${EVENT_KEY$3}`;
const EVENT_CLICK_DATA_API$1 = `click${EVENT_KEY$3}${DATA_API_KEY$1}`;
const EVENT_KEYDOWN_DISMISS = `keydown.dismiss${EVENT_KEY$3}`;
const SELECTOR_DATA_TOGGLE$1 = '[data-bs-toggle="offcanvas"]';
const Default$5 = {
  backdrop: true,
  keyboard: true,
  scroll: false
};
const DefaultType$5 = {
  backdrop: '(boolean|string)',
  keyboard: 'boolean',
  scroll: 'boolean'
};
/**
 * Class definition
 */

class bootstrap_esm_Offcanvas extends BaseComponent {
  constructor(element, config) {
    super(element, config);
    this._isShown = false;
    this._backdrop = this._initializeBackDrop();
    this._focustrap = this._initializeFocusTrap();

    this._addEventListeners();
  } // Getters


  static get Default() {
    return Default$5;
  }

  static get DefaultType() {
    return DefaultType$5;
  }

  static get NAME() {
    return NAME$6;
  } // Public


  toggle(relatedTarget) {
    return this._isShown ? this.hide() : this.show(relatedTarget);
  }

  show(relatedTarget) {
    if (this._isShown) {
      return;
    }

    const showEvent = EventHandler.trigger(this._element, EVENT_SHOW$3, {
      relatedTarget
    });

    if (showEvent.defaultPrevented) {
      return;
    }

    this._isShown = true;

    this._backdrop.show();

    if (!this._config.scroll) {
      new ScrollBarHelper().hide();
    }

    this._element.setAttribute('aria-modal', true);

    this._element.setAttribute('role', 'dialog');

    this._element.classList.add(CLASS_NAME_SHOWING$1);

    const completeCallBack = () => {
      if (!this._config.scroll || this._config.backdrop) {
        this._focustrap.activate();
      }

      this._element.classList.add(CLASS_NAME_SHOW$3);

      this._element.classList.remove(CLASS_NAME_SHOWING$1);

      EventHandler.trigger(this._element, EVENT_SHOWN$3, {
        relatedTarget
      });
    };

    this._queueCallback(completeCallBack, this._element, true);
  }

  hide() {
    if (!this._isShown) {
      return;
    }

    const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$3);

    if (hideEvent.defaultPrevented) {
      return;
    }

    this._focustrap.deactivate();

    this._element.blur();

    this._isShown = false;

    this._element.classList.add(CLASS_NAME_HIDING);

    this._backdrop.hide();

    const completeCallback = () => {
      this._element.classList.remove(CLASS_NAME_SHOW$3, CLASS_NAME_HIDING);

      this._element.removeAttribute('aria-modal');

      this._element.removeAttribute('role');

      if (!this._config.scroll) {
        new ScrollBarHelper().reset();
      }

      EventHandler.trigger(this._element, EVENT_HIDDEN$3);
    };

    this._queueCallback(completeCallback, this._element, true);
  }

  dispose() {
    this._backdrop.dispose();

    this._focustrap.deactivate();

    super.dispose();
  } // Private


  _initializeBackDrop() {
    const clickCallback = () => {
      if (this._config.backdrop === 'static') {
        EventHandler.trigger(this._element, EVENT_HIDE_PREVENTED);
        return;
      }

      this.hide();
    }; // 'static' option will be translated to true, and booleans will keep their value


    const isVisible = Boolean(this._config.backdrop);
    return new Backdrop({
      className: CLASS_NAME_BACKDROP,
      isVisible,
      isAnimated: true,
      rootElement: this._element.parentNode,
      clickCallback: isVisible ? clickCallback : null
    });
  }

  _initializeFocusTrap() {
    return new FocusTrap({
      trapElement: this._element
    });
  }

  _addEventListeners() {
    EventHandler.on(this._element, EVENT_KEYDOWN_DISMISS, event => {
      if (event.key !== ESCAPE_KEY) {
        return;
      }

      if (!this._config.keyboard) {
        EventHandler.trigger(this._element, EVENT_HIDE_PREVENTED);
        return;
      }

      this.hide();
    });
  } // Static


  static jQueryInterface(config) {
    return this.each(function () {
      const data = bootstrap_esm_Offcanvas.getOrCreateInstance(this, config);

      if (typeof config !== 'string') {
        return;
      }

      if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {
        throw new TypeError(`No method named "${config}"`);
      }

      data[config](this);
    });
  }

}
/**
 * Data API implementation
 */


EventHandler.on(document, EVENT_CLICK_DATA_API$1, SELECTOR_DATA_TOGGLE$1, function (event) {
  const target = getElementFromSelector(this);

  if (['A', 'AREA'].includes(this.tagName)) {
    event.preventDefault();
  }

  if (isDisabled(this)) {
    return;
  }

  EventHandler.one(target, EVENT_HIDDEN$3, () => {
    // focus on trigger when it is closed
    if (isVisible(this)) {
      this.focus();
    }
  }); // avoid conflict when clicking a toggler of an offcanvas, while another is open

  const alreadyOpen = SelectorEngine.findOne(OPEN_SELECTOR);

  if (alreadyOpen && alreadyOpen !== target) {
    bootstrap_esm_Offcanvas.getInstance(alreadyOpen).hide();
  }

  const data = bootstrap_esm_Offcanvas.getOrCreateInstance(target);
  data.toggle(this);
});
EventHandler.on(window, EVENT_LOAD_DATA_API$2, () => {
  for (const selector of SelectorEngine.find(OPEN_SELECTOR)) {
    bootstrap_esm_Offcanvas.getOrCreateInstance(selector).show();
  }
});
EventHandler.on(window, EVENT_RESIZE, () => {
  for (const element of SelectorEngine.find('[aria-modal][class*=show][class*=offcanvas-]')) {
    if (getComputedStyle(element).position !== 'fixed') {
      bootstrap_esm_Offcanvas.getOrCreateInstance(element).hide();
    }
  }
});
enableDismissTrigger(bootstrap_esm_Offcanvas);
/**
 * jQuery
 */

defineJQueryPlugin(bootstrap_esm_Offcanvas);

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.2.3): util/sanitizer.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */
const uriAttributes = new Set(['background', 'cite', 'href', 'itemtype', 'longdesc', 'poster', 'src', 'xlink:href']);
const ARIA_ATTRIBUTE_PATTERN = /^aria-[\w-]*$/i;
/**
 * A pattern that recognizes a commonly useful subset of URLs that are safe.
 *
 * Shout-out to Angular https://github.com/angular/angular/blob/12.2.x/packages/core/src/sanitization/url_sanitizer.ts
 */

const SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i;
/**
 * A pattern that matches safe data URLs. Only matches image, video and audio types.
 *
 * Shout-out to Angular https://github.com/angular/angular/blob/12.2.x/packages/core/src/sanitization/url_sanitizer.ts
 */

const DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i;

const allowedAttribute = (attribute, allowedAttributeList) => {
  const attributeName = attribute.nodeName.toLowerCase();

  if (allowedAttributeList.includes(attributeName)) {
    if (uriAttributes.has(attributeName)) {
      return Boolean(SAFE_URL_PATTERN.test(attribute.nodeValue) || DATA_URL_PATTERN.test(attribute.nodeValue));
    }

    return true;
  } // Check if a regular expression validates the attribute.


  return allowedAttributeList.filter(attributeRegex => attributeRegex instanceof RegExp).some(regex => regex.test(attributeName));
};

const DefaultAllowlist = {
  // Global attributes allowed on any supplied element below.
  '*': ['class', 'dir', 'id', 'lang', 'role', ARIA_ATTRIBUTE_PATTERN],
  a: ['target', 'href', 'title', 'rel'],
  area: [],
  b: [],
  br: [],
  col: [],
  code: [],
  div: [],
  em: [],
  hr: [],
  h1: [],
  h2: [],
  h3: [],
  h4: [],
  h5: [],
  h6: [],
  i: [],
  img: ['src', 'srcset', 'alt', 'title', 'width', 'height'],
  li: [],
  ol: [],
  p: [],
  pre: [],
  s: [],
  small: [],
  span: [],
  sub: [],
  sup: [],
  strong: [],
  u: [],
  ul: []
};
function sanitizeHtml(unsafeHtml, allowList, sanitizeFunction) {
  if (!unsafeHtml.length) {
    return unsafeHtml;
  }

  if (sanitizeFunction && typeof sanitizeFunction === 'function') {
    return sanitizeFunction(unsafeHtml);
  }

  const domParser = new window.DOMParser();
  const createdDocument = domParser.parseFromString(unsafeHtml, 'text/html');
  const elements = [].concat(...createdDocument.body.querySelectorAll('*'));

  for (const element of elements) {
    const elementName = element.nodeName.toLowerCase();

    if (!Object.keys(allowList).includes(elementName)) {
      element.remove();
      continue;
    }

    const attributeList = [].concat(...element.attributes);
    const allowedAttributes = [].concat(allowList['*'] || [], allowList[elementName] || []);

    for (const attribute of attributeList) {
      if (!allowedAttribute(attribute, allowedAttributes)) {
        element.removeAttribute(attribute.nodeName);
      }
    }
  }

  return createdDocument.body.innerHTML;
}

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.2.3): util/template-factory.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */
/**
 * Constants
 */

const NAME$5 = 'TemplateFactory';
const Default$4 = {
  allowList: DefaultAllowlist,
  content: {},
  // { selector : text ,  selector2 : text2 , }
  extraClass: '',
  html: false,
  sanitize: true,
  sanitizeFn: null,
  template: '<div></div>'
};
const DefaultType$4 = {
  allowList: 'object',
  content: 'object',
  extraClass: '(string|function)',
  html: 'boolean',
  sanitize: 'boolean',
  sanitizeFn: '(null|function)',
  template: 'string'
};
const DefaultContentType = {
  entry: '(string|element|function|null)',
  selector: '(string|element)'
};
/**
 * Class definition
 */

class TemplateFactory extends Config {
  constructor(config) {
    super();
    this._config = this._getConfig(config);
  } // Getters


  static get Default() {
    return Default$4;
  }

  static get DefaultType() {
    return DefaultType$4;
  }

  static get NAME() {
    return NAME$5;
  } // Public


  getContent() {
    return Object.values(this._config.content).map(config => this._resolvePossibleFunction(config)).filter(Boolean);
  }

  hasContent() {
    return this.getContent().length > 0;
  }

  changeContent(content) {
    this._checkContent(content);

    this._config.content = { ...this._config.content,
      ...content
    };
    return this;
  }

  toHtml() {
    const templateWrapper = document.createElement('div');
    templateWrapper.innerHTML = this._maybeSanitize(this._config.template);

    for (const [selector, text] of Object.entries(this._config.content)) {
      this._setContent(templateWrapper, text, selector);
    }

    const template = templateWrapper.children[0];

    const extraClass = this._resolvePossibleFunction(this._config.extraClass);

    if (extraClass) {
      template.classList.add(...extraClass.split(' '));
    }

    return template;
  } // Private


  _typeCheckConfig(config) {
    super._typeCheckConfig(config);

    this._checkContent(config.content);
  }

  _checkContent(arg) {
    for (const [selector, content] of Object.entries(arg)) {
      super._typeCheckConfig({
        selector,
        entry: content
      }, DefaultContentType);
    }
  }

  _setContent(template, content, selector) {
    const templateElement = SelectorEngine.findOne(selector, template);

    if (!templateElement) {
      return;
    }

    content = this._resolvePossibleFunction(content);

    if (!content) {
      templateElement.remove();
      return;
    }

    if (bootstrap_esm_isElement(content)) {
      this._putElementInTemplate(getElement(content), templateElement);

      return;
    }

    if (this._config.html) {
      templateElement.innerHTML = this._maybeSanitize(content);
      return;
    }

    templateElement.textContent = content;
  }

  _maybeSanitize(arg) {
    return this._config.sanitize ? sanitizeHtml(arg, this._config.allowList, this._config.sanitizeFn) : arg;
  }

  _resolvePossibleFunction(arg) {
    return typeof arg === 'function' ? arg(this) : arg;
  }

  _putElementInTemplate(element, templateElement) {
    if (this._config.html) {
      templateElement.innerHTML = '';
      templateElement.append(element);
      return;
    }

    templateElement.textContent = element.textContent;
  }

}

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.2.3): tooltip.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */
/**
 * Constants
 */

const NAME$4 = 'tooltip';
const DISALLOWED_ATTRIBUTES = new Set(['sanitize', 'allowList', 'sanitizeFn']);
const CLASS_NAME_FADE$2 = 'fade';
const CLASS_NAME_MODAL = 'modal';
const CLASS_NAME_SHOW$2 = 'show';
const SELECTOR_TOOLTIP_INNER = '.tooltip-inner';
const SELECTOR_MODAL = `.${CLASS_NAME_MODAL}`;
const EVENT_MODAL_HIDE = 'hide.bs.modal';
const TRIGGER_HOVER = 'hover';
const TRIGGER_FOCUS = 'focus';
const TRIGGER_CLICK = 'click';
const TRIGGER_MANUAL = 'manual';
const EVENT_HIDE$2 = 'hide';
const EVENT_HIDDEN$2 = 'hidden';
const EVENT_SHOW$2 = 'show';
const EVENT_SHOWN$2 = 'shown';
const EVENT_INSERTED = 'inserted';
const EVENT_CLICK$1 = 'click';
const EVENT_FOCUSIN$1 = 'focusin';
const EVENT_FOCUSOUT$1 = 'focusout';
const EVENT_MOUSEENTER = 'mouseenter';
const EVENT_MOUSELEAVE = 'mouseleave';
const AttachmentMap = {
  AUTO: 'auto',
  TOP: 'top',
  RIGHT: isRTL() ? 'left' : 'right',
  BOTTOM: 'bottom',
  LEFT: isRTL() ? 'right' : 'left'
};
const Default$3 = {
  allowList: DefaultAllowlist,
  animation: true,
  boundary: 'clippingParents',
  container: false,
  customClass: '',
  delay: 0,
  fallbackPlacements: ['top', 'right', 'bottom', 'left'],
  html: false,
  offset: [0, 0],
  placement: 'top',
  popperConfig: null,
  sanitize: true,
  sanitizeFn: null,
  selector: false,
  template: '<div class="tooltip" role="tooltip">' + '<div class="tooltip-arrow"></div>' + '<div class="tooltip-inner"></div>' + '</div>',
  title: '',
  trigger: 'hover focus'
};
const DefaultType$3 = {
  allowList: 'object',
  animation: 'boolean',
  boundary: '(string|element)',
  container: '(string|element|boolean)',
  customClass: '(string|function)',
  delay: '(number|object)',
  fallbackPlacements: 'array',
  html: 'boolean',
  offset: '(array|string|function)',
  placement: '(string|function)',
  popperConfig: '(null|object|function)',
  sanitize: 'boolean',
  sanitizeFn: '(null|function)',
  selector: '(string|boolean)',
  template: 'string',
  title: '(string|element|function)',
  trigger: 'string'
};
/**
 * Class definition
 */

class Tooltip extends BaseComponent {
  constructor(element, config) {
    if (typeof lib_namespaceObject === 'undefined') {
      throw new TypeError('Bootstrap\'s tooltips require Popper (https://popper.js.org)');
    }

    super(element, config); // Private

    this._isEnabled = true;
    this._timeout = 0;
    this._isHovered = null;
    this._activeTrigger = {};
    this._popper = null;
    this._templateFactory = null;
    this._newContent = null; // Protected

    this.tip = null;

    this._setListeners();

    if (!this._config.selector) {
      this._fixTitle();
    }
  } // Getters


  static get Default() {
    return Default$3;
  }

  static get DefaultType() {
    return DefaultType$3;
  }

  static get NAME() {
    return NAME$4;
  } // Public


  enable() {
    this._isEnabled = true;
  }

  disable() {
    this._isEnabled = false;
  }

  toggleEnabled() {
    this._isEnabled = !this._isEnabled;
  }

  toggle() {
    if (!this._isEnabled) {
      return;
    }

    this._activeTrigger.click = !this._activeTrigger.click;

    if (this._isShown()) {
      this._leave();

      return;
    }

    this._enter();
  }

  dispose() {
    clearTimeout(this._timeout);
    EventHandler.off(this._element.closest(SELECTOR_MODAL), EVENT_MODAL_HIDE, this._hideModalHandler);

    if (this._element.getAttribute('data-bs-original-title')) {
      this._element.setAttribute('title', this._element.getAttribute('data-bs-original-title'));
    }

    this._disposePopper();

    super.dispose();
  }

  show() {
    if (this._element.style.display === 'none') {
      throw new Error('Please use show on visible elements');
    }

    if (!(this._isWithContent() && this._isEnabled)) {
      return;
    }

    const showEvent = EventHandler.trigger(this._element, this.constructor.eventName(EVENT_SHOW$2));
    const shadowRoot = findShadowRoot(this._element);

    const isInTheDom = (shadowRoot || this._element.ownerDocument.documentElement).contains(this._element);

    if (showEvent.defaultPrevented || !isInTheDom) {
      return;
    } // todo v6 remove this OR make it optional


    this._disposePopper();

    const tip = this._getTipElement();

    this._element.setAttribute('aria-describedby', tip.getAttribute('id'));

    const {
      container
    } = this._config;

    if (!this._element.ownerDocument.documentElement.contains(this.tip)) {
      container.append(tip);
      EventHandler.trigger(this._element, this.constructor.eventName(EVENT_INSERTED));
    }

    this._popper = this._createPopper(tip);
    tip.classList.add(CLASS_NAME_SHOW$2); // If this is a touch-enabled device we add extra
    // empty mouseover listeners to the body's immediate children;
    // only needed because of broken event delegation on iOS
    // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html

    if ('ontouchstart' in document.documentElement) {
      for (const element of [].concat(...document.body.children)) {
        EventHandler.on(element, 'mouseover', noop);
      }
    }

    const complete = () => {
      EventHandler.trigger(this._element, this.constructor.eventName(EVENT_SHOWN$2));

      if (this._isHovered === false) {
        this._leave();
      }

      this._isHovered = false;
    };

    this._queueCallback(complete, this.tip, this._isAnimated());
  }

  hide() {
    if (!this._isShown()) {
      return;
    }

    const hideEvent = EventHandler.trigger(this._element, this.constructor.eventName(EVENT_HIDE$2));

    if (hideEvent.defaultPrevented) {
      return;
    }

    const tip = this._getTipElement();

    tip.classList.remove(CLASS_NAME_SHOW$2); // If this is a touch-enabled device we remove the extra
    // empty mouseover listeners we added for iOS support

    if ('ontouchstart' in document.documentElement) {
      for (const element of [].concat(...document.body.children)) {
        EventHandler.off(element, 'mouseover', noop);
      }
    }

    this._activeTrigger[TRIGGER_CLICK] = false;
    this._activeTrigger[TRIGGER_FOCUS] = false;
    this._activeTrigger[TRIGGER_HOVER] = false;
    this._isHovered = null; // it is a trick to support manual triggering

    const complete = () => {
      if (this._isWithActiveTrigger()) {
        return;
      }

      if (!this._isHovered) {
        this._disposePopper();
      }

      this._element.removeAttribute('aria-describedby');

      EventHandler.trigger(this._element, this.constructor.eventName(EVENT_HIDDEN$2));
    };

    this._queueCallback(complete, this.tip, this._isAnimated());
  }

  update() {
    if (this._popper) {
      this._popper.update();
    }
  } // Protected


  _isWithContent() {
    return Boolean(this._getTitle());
  }

  _getTipElement() {
    if (!this.tip) {
      this.tip = this._createTipElement(this._newContent || this._getContentForTemplate());
    }

    return this.tip;
  }

  _createTipElement(content) {
    const tip = this._getTemplateFactory(content).toHtml(); // todo: remove this check on v6


    if (!tip) {
      return null;
    }

    tip.classList.remove(CLASS_NAME_FADE$2, CLASS_NAME_SHOW$2); // todo: on v6 the following can be achieved with CSS only

    tip.classList.add(`bs-${this.constructor.NAME}-auto`);
    const tipId = getUID(this.constructor.NAME).toString();
    tip.setAttribute('id', tipId);

    if (this._isAnimated()) {
      tip.classList.add(CLASS_NAME_FADE$2);
    }

    return tip;
  }

  setContent(content) {
    this._newContent = content;

    if (this._isShown()) {
      this._disposePopper();

      this.show();
    }
  }

  _getTemplateFactory(content) {
    if (this._templateFactory) {
      this._templateFactory.changeContent(content);
    } else {
      this._templateFactory = new TemplateFactory({ ...this._config,
        // the `content` var has to be after `this._config`
        // to override config.content in case of popover
        content,
        extraClass: this._resolvePossibleFunction(this._config.customClass)
      });
    }

    return this._templateFactory;
  }

  _getContentForTemplate() {
    return {
      [SELECTOR_TOOLTIP_INNER]: this._getTitle()
    };
  }

  _getTitle() {
    return this._resolvePossibleFunction(this._config.title) || this._element.getAttribute('data-bs-original-title');
  } // Private


  _initializeOnDelegatedTarget(event) {
    return this.constructor.getOrCreateInstance(event.delegateTarget, this._getDelegateConfig());
  }

  _isAnimated() {
    return this._config.animation || this.tip && this.tip.classList.contains(CLASS_NAME_FADE$2);
  }

  _isShown() {
    return this.tip && this.tip.classList.contains(CLASS_NAME_SHOW$2);
  }

  _createPopper(tip) {
    const placement = typeof this._config.placement === 'function' ? this._config.placement.call(this, tip, this._element) : this._config.placement;
    const attachment = AttachmentMap[placement.toUpperCase()];
    return popper_createPopper(this._element, tip, this._getPopperConfig(attachment));
  }

  _getOffset() {
    const {
      offset
    } = this._config;

    if (typeof offset === 'string') {
      return offset.split(',').map(value => Number.parseInt(value, 10));
    }

    if (typeof offset === 'function') {
      return popperData => offset(popperData, this._element);
    }

    return offset;
  }

  _resolvePossibleFunction(arg) {
    return typeof arg === 'function' ? arg.call(this._element) : arg;
  }

  _getPopperConfig(attachment) {
    const defaultBsPopperConfig = {
      placement: attachment,
      modifiers: [{
        name: 'flip',
        options: {
          fallbackPlacements: this._config.fallbackPlacements
        }
      }, {
        name: 'offset',
        options: {
          offset: this._getOffset()
        }
      }, {
        name: 'preventOverflow',
        options: {
          boundary: this._config.boundary
        }
      }, {
        name: 'arrow',
        options: {
          element: `.${this.constructor.NAME}-arrow`
        }
      }, {
        name: 'preSetPlacement',
        enabled: true,
        phase: 'beforeMain',
        fn: data => {
          // Pre-set Popper's placement attribute in order to read the arrow sizes properly.
          // Otherwise, Popper mixes up the width and height dimensions since the initial arrow style is for top placement
          this._getTipElement().setAttribute('data-popper-placement', data.state.placement);
        }
      }]
    };
    return { ...defaultBsPopperConfig,
      ...(typeof this._config.popperConfig === 'function' ? this._config.popperConfig(defaultBsPopperConfig) : this._config.popperConfig)
    };
  }

  _setListeners() {
    const triggers = this._config.trigger.split(' ');

    for (const trigger of triggers) {
      if (trigger === 'click') {
        EventHandler.on(this._element, this.constructor.eventName(EVENT_CLICK$1), this._config.selector, event => {
          const context = this._initializeOnDelegatedTarget(event);

          context.toggle();
        });
      } else if (trigger !== TRIGGER_MANUAL) {
        const eventIn = trigger === TRIGGER_HOVER ? this.constructor.eventName(EVENT_MOUSEENTER) : this.constructor.eventName(EVENT_FOCUSIN$1);
        const eventOut = trigger === TRIGGER_HOVER ? this.constructor.eventName(EVENT_MOUSELEAVE) : this.constructor.eventName(EVENT_FOCUSOUT$1);
        EventHandler.on(this._element, eventIn, this._config.selector, event => {
          const context = this._initializeOnDelegatedTarget(event);

          context._activeTrigger[event.type === 'focusin' ? TRIGGER_FOCUS : TRIGGER_HOVER] = true;

          context._enter();
        });
        EventHandler.on(this._element, eventOut, this._config.selector, event => {
          const context = this._initializeOnDelegatedTarget(event);

          context._activeTrigger[event.type === 'focusout' ? TRIGGER_FOCUS : TRIGGER_HOVER] = context._element.contains(event.relatedTarget);

          context._leave();
        });
      }
    }

    this._hideModalHandler = () => {
      if (this._element) {
        this.hide();
      }
    };

    EventHandler.on(this._element.closest(SELECTOR_MODAL), EVENT_MODAL_HIDE, this._hideModalHandler);
  }

  _fixTitle() {
    const title = this._element.getAttribute('title');

    if (!title) {
      return;
    }

    if (!this._element.getAttribute('aria-label') && !this._element.textContent.trim()) {
      this._element.setAttribute('aria-label', title);
    }

    this._element.setAttribute('data-bs-original-title', title); // DO NOT USE IT. Is only for backwards compatibility


    this._element.removeAttribute('title');
  }

  _enter() {
    if (this._isShown() || this._isHovered) {
      this._isHovered = true;
      return;
    }

    this._isHovered = true;

    this._setTimeout(() => {
      if (this._isHovered) {
        this.show();
      }
    }, this._config.delay.show);
  }

  _leave() {
    if (this._isWithActiveTrigger()) {
      return;
    }

    this._isHovered = false;

    this._setTimeout(() => {
      if (!this._isHovered) {
        this.hide();
      }
    }, this._config.delay.hide);
  }

  _setTimeout(handler, timeout) {
    clearTimeout(this._timeout);
    this._timeout = setTimeout(handler, timeout);
  }

  _isWithActiveTrigger() {
    return Object.values(this._activeTrigger).includes(true);
  }

  _getConfig(config) {
    const dataAttributes = Manipulator.getDataAttributes(this._element);

    for (const dataAttribute of Object.keys(dataAttributes)) {
      if (DISALLOWED_ATTRIBUTES.has(dataAttribute)) {
        delete dataAttributes[dataAttribute];
      }
    }

    config = { ...dataAttributes,
      ...(typeof config === 'object' && config ? config : {})
    };
    config = this._mergeConfigObj(config);
    config = this._configAfterMerge(config);

    this._typeCheckConfig(config);

    return config;
  }

  _configAfterMerge(config) {
    config.container = config.container === false ? document.body : getElement(config.container);

    if (typeof config.delay === 'number') {
      config.delay = {
        show: config.delay,
        hide: config.delay
      };
    }

    if (typeof config.title === 'number') {
      config.title = config.title.toString();
    }

    if (typeof config.content === 'number') {
      config.content = config.content.toString();
    }

    return config;
  }

  _getDelegateConfig() {
    const config = {};

    for (const key in this._config) {
      if (this.constructor.Default[key] !== this._config[key]) {
        config[key] = this._config[key];
      }
    }

    config.selector = false;
    config.trigger = 'manual'; // In the future can be replaced with:
    // const keysWithDifferentValues = Object.entries(this._config).filter(entry => this.constructor.Default[entry[0]] !== this._config[entry[0]])
    // `Object.fromEntries(keysWithDifferentValues)`

    return config;
  }

  _disposePopper() {
    if (this._popper) {
      this._popper.destroy();

      this._popper = null;
    }

    if (this.tip) {
      this.tip.remove();
      this.tip = null;
    }
  } // Static


  static jQueryInterface(config) {
    return this.each(function () {
      const data = Tooltip.getOrCreateInstance(this, config);

      if (typeof config !== 'string') {
        return;
      }

      if (typeof data[config] === 'undefined') {
        throw new TypeError(`No method named "${config}"`);
      }

      data[config]();
    });
  }

}
/**
 * jQuery
 */


defineJQueryPlugin(Tooltip);

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.2.3): popover.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */
/**
 * Constants
 */

const NAME$3 = 'popover';
const SELECTOR_TITLE = '.popover-header';
const SELECTOR_CONTENT = '.popover-body';
const Default$2 = { ...Tooltip.Default,
  content: '',
  offset: [0, 8],
  placement: 'right',
  template: '<div class="popover" role="tooltip">' + '<div class="popover-arrow"></div>' + '<h3 class="popover-header"></h3>' + '<div class="popover-body"></div>' + '</div>',
  trigger: 'click'
};
const DefaultType$2 = { ...Tooltip.DefaultType,
  content: '(null|string|element|function)'
};
/**
 * Class definition
 */

class Popover extends Tooltip {
  // Getters
  static get Default() {
    return Default$2;
  }

  static get DefaultType() {
    return DefaultType$2;
  }

  static get NAME() {
    return NAME$3;
  } // Overrides


  _isWithContent() {
    return this._getTitle() || this._getContent();
  } // Private


  _getContentForTemplate() {
    return {
      [SELECTOR_TITLE]: this._getTitle(),
      [SELECTOR_CONTENT]: this._getContent()
    };
  }

  _getContent() {
    return this._resolvePossibleFunction(this._config.content);
  } // Static


  static jQueryInterface(config) {
    return this.each(function () {
      const data = Popover.getOrCreateInstance(this, config);

      if (typeof config !== 'string') {
        return;
      }

      if (typeof data[config] === 'undefined') {
        throw new TypeError(`No method named "${config}"`);
      }

      data[config]();
    });
  }

}
/**
 * jQuery
 */


defineJQueryPlugin(Popover);

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.2.3): scrollspy.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */
/**
 * Constants
 */

const NAME$2 = 'scrollspy';
const DATA_KEY$2 = 'bs.scrollspy';
const EVENT_KEY$2 = `.${DATA_KEY$2}`;
const DATA_API_KEY = '.data-api';
const EVENT_ACTIVATE = `activate${EVENT_KEY$2}`;
const EVENT_CLICK = `click${EVENT_KEY$2}`;
const EVENT_LOAD_DATA_API$1 = `load${EVENT_KEY$2}${DATA_API_KEY}`;
const CLASS_NAME_DROPDOWN_ITEM = 'dropdown-item';
const CLASS_NAME_ACTIVE$1 = 'active';
const SELECTOR_DATA_SPY = '[data-bs-spy="scroll"]';
const SELECTOR_TARGET_LINKS = '[href]';
const SELECTOR_NAV_LIST_GROUP = '.nav, .list-group';
const SELECTOR_NAV_LINKS = '.nav-link';
const SELECTOR_NAV_ITEMS = '.nav-item';
const SELECTOR_LIST_ITEMS = '.list-group-item';
const SELECTOR_LINK_ITEMS = `${SELECTOR_NAV_LINKS}, ${SELECTOR_NAV_ITEMS} > ${SELECTOR_NAV_LINKS}, ${SELECTOR_LIST_ITEMS}`;
const SELECTOR_DROPDOWN = '.dropdown';
const SELECTOR_DROPDOWN_TOGGLE$1 = '.dropdown-toggle';
const Default$1 = {
  offset: null,
  // TODO: v6 @deprecated, keep it for backwards compatibility reasons
  rootMargin: '0px 0px -25%',
  smoothScroll: false,
  target: null,
  threshold: [0.1, 0.5, 1]
};
const DefaultType$1 = {
  offset: '(number|null)',
  // TODO v6 @deprecated, keep it for backwards compatibility reasons
  rootMargin: 'string',
  smoothScroll: 'boolean',
  target: 'element',
  threshold: 'array'
};
/**
 * Class definition
 */

class ScrollSpy extends BaseComponent {
  constructor(element, config) {
    super(element, config); // this._element is the observablesContainer and config.target the menu links wrapper

    this._targetLinks = new Map();
    this._observableSections = new Map();
    this._rootElement = getComputedStyle(this._element).overflowY === 'visible' ? null : this._element;
    this._activeTarget = null;
    this._observer = null;
    this._previousScrollData = {
      visibleEntryTop: 0,
      parentScrollTop: 0
    };
    this.refresh(); // initialize
  } // Getters


  static get Default() {
    return Default$1;
  }

  static get DefaultType() {
    return DefaultType$1;
  }

  static get NAME() {
    return NAME$2;
  } // Public


  refresh() {
    this._initializeTargetsAndObservables();

    this._maybeEnableSmoothScroll();

    if (this._observer) {
      this._observer.disconnect();
    } else {
      this._observer = this._getNewObserver();
    }

    for (const section of this._observableSections.values()) {
      this._observer.observe(section);
    }
  }

  dispose() {
    this._observer.disconnect();

    super.dispose();
  } // Private


  _configAfterMerge(config) {
    // TODO: on v6 target should be given explicitly & remove the {target: 'ss-target'} case
    config.target = getElement(config.target) || document.body; // TODO: v6 Only for backwards compatibility reasons. Use rootMargin only

    config.rootMargin = config.offset ? `${config.offset}px 0px -30%` : config.rootMargin;

    if (typeof config.threshold === 'string') {
      config.threshold = config.threshold.split(',').map(value => Number.parseFloat(value));
    }

    return config;
  }

  _maybeEnableSmoothScroll() {
    if (!this._config.smoothScroll) {
      return;
    } // unregister any previous listeners


    EventHandler.off(this._config.target, EVENT_CLICK);
    EventHandler.on(this._config.target, EVENT_CLICK, SELECTOR_TARGET_LINKS, event => {
      const observableSection = this._observableSections.get(event.target.hash);

      if (observableSection) {
        event.preventDefault();
        const root = this._rootElement || window;
        const height = observableSection.offsetTop - this._element.offsetTop;

        if (root.scrollTo) {
          root.scrollTo({
            top: height,
            behavior: 'smooth'
          });
          return;
        } // Chrome 60 doesn't support `scrollTo`


        root.scrollTop = height;
      }
    });
  }

  _getNewObserver() {
    const options = {
      root: this._rootElement,
      threshold: this._config.threshold,
      rootMargin: this._config.rootMargin
    };
    return new IntersectionObserver(entries => this._observerCallback(entries), options);
  } // The logic of selection


  _observerCallback(entries) {
    const targetElement = entry => this._targetLinks.get(`#${entry.target.id}`);

    const activate = entry => {
      this._previousScrollData.visibleEntryTop = entry.target.offsetTop;

      this._process(targetElement(entry));
    };

    const parentScrollTop = (this._rootElement || document.documentElement).scrollTop;
    const userScrollsDown = parentScrollTop >= this._previousScrollData.parentScrollTop;
    this._previousScrollData.parentScrollTop = parentScrollTop;

    for (const entry of entries) {
      if (!entry.isIntersecting) {
        this._activeTarget = null;

        this._clearActiveClass(targetElement(entry));

        continue;
      }

      const entryIsLowerThanPrevious = entry.target.offsetTop >= this._previousScrollData.visibleEntryTop; // if we are scrolling down, pick the bigger offsetTop

      if (userScrollsDown && entryIsLowerThanPrevious) {
        activate(entry); // if parent isn't scrolled, let's keep the first visible item, breaking the iteration

        if (!parentScrollTop) {
          return;
        }

        continue;
      } // if we are scrolling up, pick the smallest offsetTop


      if (!userScrollsDown && !entryIsLowerThanPrevious) {
        activate(entry);
      }
    }
  }

  _initializeTargetsAndObservables() {
    this._targetLinks = new Map();
    this._observableSections = new Map();
    const targetLinks = SelectorEngine.find(SELECTOR_TARGET_LINKS, this._config.target);

    for (const anchor of targetLinks) {
      // ensure that the anchor has an id and is not disabled
      if (!anchor.hash || isDisabled(anchor)) {
        continue;
      }

      const observableSection = SelectorEngine.findOne(anchor.hash, this._element); // ensure that the observableSection exists & is visible

      if (isVisible(observableSection)) {
        this._targetLinks.set(anchor.hash, anchor);

        this._observableSections.set(anchor.hash, observableSection);
      }
    }
  }

  _process(target) {
    if (this._activeTarget === target) {
      return;
    }

    this._clearActiveClass(this._config.target);

    this._activeTarget = target;
    target.classList.add(CLASS_NAME_ACTIVE$1);

    this._activateParents(target);

    EventHandler.trigger(this._element, EVENT_ACTIVATE, {
      relatedTarget: target
    });
  }

  _activateParents(target) {
    // Activate dropdown parents
    if (target.classList.contains(CLASS_NAME_DROPDOWN_ITEM)) {
      SelectorEngine.findOne(SELECTOR_DROPDOWN_TOGGLE$1, target.closest(SELECTOR_DROPDOWN)).classList.add(CLASS_NAME_ACTIVE$1);
      return;
    }

    for (const listGroup of SelectorEngine.parents(target, SELECTOR_NAV_LIST_GROUP)) {
      // Set triggered links parents as active
      // With both <ul> and <nav> markup a parent is the previous sibling of any nav ancestor
      for (const item of SelectorEngine.prev(listGroup, SELECTOR_LINK_ITEMS)) {
        item.classList.add(CLASS_NAME_ACTIVE$1);
      }
    }
  }

  _clearActiveClass(parent) {
    parent.classList.remove(CLASS_NAME_ACTIVE$1);
    const activeNodes = SelectorEngine.find(`${SELECTOR_TARGET_LINKS}.${CLASS_NAME_ACTIVE$1}`, parent);

    for (const node of activeNodes) {
      node.classList.remove(CLASS_NAME_ACTIVE$1);
    }
  } // Static


  static jQueryInterface(config) {
    return this.each(function () {
      const data = ScrollSpy.getOrCreateInstance(this, config);

      if (typeof config !== 'string') {
        return;
      }

      if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {
        throw new TypeError(`No method named "${config}"`);
      }

      data[config]();
    });
  }

}
/**
 * Data API implementation
 */


EventHandler.on(window, EVENT_LOAD_DATA_API$1, () => {
  for (const spy of SelectorEngine.find(SELECTOR_DATA_SPY)) {
    ScrollSpy.getOrCreateInstance(spy);
  }
});
/**
 * jQuery
 */

defineJQueryPlugin(ScrollSpy);

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.2.3): tab.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */
/**
 * Constants
 */

const NAME$1 = 'tab';
const DATA_KEY$1 = 'bs.tab';
const EVENT_KEY$1 = `.${DATA_KEY$1}`;
const EVENT_HIDE$1 = `hide${EVENT_KEY$1}`;
const EVENT_HIDDEN$1 = `hidden${EVENT_KEY$1}`;
const EVENT_SHOW$1 = `show${EVENT_KEY$1}`;
const EVENT_SHOWN$1 = `shown${EVENT_KEY$1}`;
const EVENT_CLICK_DATA_API = `click${EVENT_KEY$1}`;
const EVENT_KEYDOWN = `keydown${EVENT_KEY$1}`;
const EVENT_LOAD_DATA_API = `load${EVENT_KEY$1}`;
const ARROW_LEFT_KEY = 'ArrowLeft';
const ARROW_RIGHT_KEY = 'ArrowRight';
const ARROW_UP_KEY = 'ArrowUp';
const ARROW_DOWN_KEY = 'ArrowDown';
const CLASS_NAME_ACTIVE = 'active';
const CLASS_NAME_FADE$1 = 'fade';
const CLASS_NAME_SHOW$1 = 'show';
const CLASS_DROPDOWN = 'dropdown';
const SELECTOR_DROPDOWN_TOGGLE = '.dropdown-toggle';
const SELECTOR_DROPDOWN_MENU = '.dropdown-menu';
const NOT_SELECTOR_DROPDOWN_TOGGLE = ':not(.dropdown-toggle)';
const SELECTOR_TAB_PANEL = '.list-group, .nav, [role="tablist"]';
const SELECTOR_OUTER = '.nav-item, .list-group-item';
const SELECTOR_INNER = `.nav-link${NOT_SELECTOR_DROPDOWN_TOGGLE}, .list-group-item${NOT_SELECTOR_DROPDOWN_TOGGLE}, [role="tab"]${NOT_SELECTOR_DROPDOWN_TOGGLE}`;
const SELECTOR_DATA_TOGGLE = '[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]'; // todo:v6: could be only `tab`

const SELECTOR_INNER_ELEM = `${SELECTOR_INNER}, ${SELECTOR_DATA_TOGGLE}`;
const SELECTOR_DATA_TOGGLE_ACTIVE = `.${CLASS_NAME_ACTIVE}[data-bs-toggle="tab"], .${CLASS_NAME_ACTIVE}[data-bs-toggle="pill"], .${CLASS_NAME_ACTIVE}[data-bs-toggle="list"]`;
/**
 * Class definition
 */

class Tab extends BaseComponent {
  constructor(element) {
    super(element);
    this._parent = this._element.closest(SELECTOR_TAB_PANEL);

    if (!this._parent) {
      return; // todo: should Throw exception on v6
      // throw new TypeError(`${element.outerHTML} has not a valid parent ${SELECTOR_INNER_ELEM}`)
    } // Set up initial aria attributes


    this._setInitialAttributes(this._parent, this._getChildren());

    EventHandler.on(this._element, EVENT_KEYDOWN, event => this._keydown(event));
  } // Getters


  static get NAME() {
    return NAME$1;
  } // Public


  show() {
    // Shows this elem and deactivate the active sibling if exists
    const innerElem = this._element;

    if (this._elemIsActive(innerElem)) {
      return;
    } // Search for active tab on same parent to deactivate it


    const active = this._getActiveElem();

    const hideEvent = active ? EventHandler.trigger(active, EVENT_HIDE$1, {
      relatedTarget: innerElem
    }) : null;
    const showEvent = EventHandler.trigger(innerElem, EVENT_SHOW$1, {
      relatedTarget: active
    });

    if (showEvent.defaultPrevented || hideEvent && hideEvent.defaultPrevented) {
      return;
    }

    this._deactivate(active, innerElem);

    this._activate(innerElem, active);
  } // Private


  _activate(element, relatedElem) {
    if (!element) {
      return;
    }

    element.classList.add(CLASS_NAME_ACTIVE);

    this._activate(getElementFromSelector(element)); // Search and activate/show the proper section


    const complete = () => {
      if (element.getAttribute('role') !== 'tab') {
        element.classList.add(CLASS_NAME_SHOW$1);
        return;
      }

      element.removeAttribute('tabindex');
      element.setAttribute('aria-selected', true);

      this._toggleDropDown(element, true);

      EventHandler.trigger(element, EVENT_SHOWN$1, {
        relatedTarget: relatedElem
      });
    };

    this._queueCallback(complete, element, element.classList.contains(CLASS_NAME_FADE$1));
  }

  _deactivate(element, relatedElem) {
    if (!element) {
      return;
    }

    element.classList.remove(CLASS_NAME_ACTIVE);
    element.blur();

    this._deactivate(getElementFromSelector(element)); // Search and deactivate the shown section too


    const complete = () => {
      if (element.getAttribute('role') !== 'tab') {
        element.classList.remove(CLASS_NAME_SHOW$1);
        return;
      }

      element.setAttribute('aria-selected', false);
      element.setAttribute('tabindex', '-1');

      this._toggleDropDown(element, false);

      EventHandler.trigger(element, EVENT_HIDDEN$1, {
        relatedTarget: relatedElem
      });
    };

    this._queueCallback(complete, element, element.classList.contains(CLASS_NAME_FADE$1));
  }

  _keydown(event) {
    if (![ARROW_LEFT_KEY, ARROW_RIGHT_KEY, ARROW_UP_KEY, ARROW_DOWN_KEY].includes(event.key)) {
      return;
    }

    event.stopPropagation(); // stopPropagation/preventDefault both added to support up/down keys without scrolling the page

    event.preventDefault();
    const isNext = [ARROW_RIGHT_KEY, ARROW_DOWN_KEY].includes(event.key);
    const nextActiveElement = getNextActiveElement(this._getChildren().filter(element => !isDisabled(element)), event.target, isNext, true);

    if (nextActiveElement) {
      nextActiveElement.focus({
        preventScroll: true
      });
      Tab.getOrCreateInstance(nextActiveElement).show();
    }
  }

  _getChildren() {
    // collection of inner elements
    return SelectorEngine.find(SELECTOR_INNER_ELEM, this._parent);
  }

  _getActiveElem() {
    return this._getChildren().find(child => this._elemIsActive(child)) || null;
  }

  _setInitialAttributes(parent, children) {
    this._setAttributeIfNotExists(parent, 'role', 'tablist');

    for (const child of children) {
      this._setInitialAttributesOnChild(child);
    }
  }

  _setInitialAttributesOnChild(child) {
    child = this._getInnerElement(child);

    const isActive = this._elemIsActive(child);

    const outerElem = this._getOuterElement(child);

    child.setAttribute('aria-selected', isActive);

    if (outerElem !== child) {
      this._setAttributeIfNotExists(outerElem, 'role', 'presentation');
    }

    if (!isActive) {
      child.setAttribute('tabindex', '-1');
    }

    this._setAttributeIfNotExists(child, 'role', 'tab'); // set attributes to the related panel too


    this._setInitialAttributesOnTargetPanel(child);
  }

  _setInitialAttributesOnTargetPanel(child) {
    const target = getElementFromSelector(child);

    if (!target) {
      return;
    }

    this._setAttributeIfNotExists(target, 'role', 'tabpanel');

    if (child.id) {
      this._setAttributeIfNotExists(target, 'aria-labelledby', `#${child.id}`);
    }
  }

  _toggleDropDown(element, open) {
    const outerElem = this._getOuterElement(element);

    if (!outerElem.classList.contains(CLASS_DROPDOWN)) {
      return;
    }

    const toggle = (selector, className) => {
      const element = SelectorEngine.findOne(selector, outerElem);

      if (element) {
        element.classList.toggle(className, open);
      }
    };

    toggle(SELECTOR_DROPDOWN_TOGGLE, CLASS_NAME_ACTIVE);
    toggle(SELECTOR_DROPDOWN_MENU, CLASS_NAME_SHOW$1);
    outerElem.setAttribute('aria-expanded', open);
  }

  _setAttributeIfNotExists(element, attribute, value) {
    if (!element.hasAttribute(attribute)) {
      element.setAttribute(attribute, value);
    }
  }

  _elemIsActive(elem) {
    return elem.classList.contains(CLASS_NAME_ACTIVE);
  } // Try to get the inner element (usually the .nav-link)


  _getInnerElement(elem) {
    return elem.matches(SELECTOR_INNER_ELEM) ? elem : SelectorEngine.findOne(SELECTOR_INNER_ELEM, elem);
  } // Try to get the outer element (usually the .nav-item)


  _getOuterElement(elem) {
    return elem.closest(SELECTOR_OUTER) || elem;
  } // Static


  static jQueryInterface(config) {
    return this.each(function () {
      const data = Tab.getOrCreateInstance(this);

      if (typeof config !== 'string') {
        return;
      }

      if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {
        throw new TypeError(`No method named "${config}"`);
      }

      data[config]();
    });
  }

}
/**
 * Data API implementation
 */


EventHandler.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, function (event) {
  if (['A', 'AREA'].includes(this.tagName)) {
    event.preventDefault();
  }

  if (isDisabled(this)) {
    return;
  }

  Tab.getOrCreateInstance(this).show();
});
/**
 * Initialize on focus
 */

EventHandler.on(window, EVENT_LOAD_DATA_API, () => {
  for (const element of SelectorEngine.find(SELECTOR_DATA_TOGGLE_ACTIVE)) {
    Tab.getOrCreateInstance(element);
  }
});
/**
 * jQuery
 */

defineJQueryPlugin(Tab);

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.2.3): toast.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */
/**
 * Constants
 */

const NAME = 'toast';
const DATA_KEY = 'bs.toast';
const EVENT_KEY = `.${DATA_KEY}`;
const EVENT_MOUSEOVER = `mouseover${EVENT_KEY}`;
const EVENT_MOUSEOUT = `mouseout${EVENT_KEY}`;
const EVENT_FOCUSIN = `focusin${EVENT_KEY}`;
const EVENT_FOCUSOUT = `focusout${EVENT_KEY}`;
const EVENT_HIDE = `hide${EVENT_KEY}`;
const EVENT_HIDDEN = `hidden${EVENT_KEY}`;
const EVENT_SHOW = `show${EVENT_KEY}`;
const EVENT_SHOWN = `shown${EVENT_KEY}`;
const CLASS_NAME_FADE = 'fade';
const CLASS_NAME_HIDE = 'hide'; // @deprecated - kept here only for backwards compatibility

const CLASS_NAME_SHOW = 'show';
const CLASS_NAME_SHOWING = 'showing';
const DefaultType = {
  animation: 'boolean',
  autohide: 'boolean',
  delay: 'number'
};
const Default = {
  animation: true,
  autohide: true,
  delay: 5000
};
/**
 * Class definition
 */

class bootstrap_esm_Toast extends BaseComponent {
  constructor(element, config) {
    super(element, config);
    this._timeout = null;
    this._hasMouseInteraction = false;
    this._hasKeyboardInteraction = false;

    this._setListeners();
  } // Getters


  static get Default() {
    return Default;
  }

  static get DefaultType() {
    return DefaultType;
  }

  static get NAME() {
    return NAME;
  } // Public


  show() {
    const showEvent = EventHandler.trigger(this._element, EVENT_SHOW);

    if (showEvent.defaultPrevented) {
      return;
    }

    this._clearTimeout();

    if (this._config.animation) {
      this._element.classList.add(CLASS_NAME_FADE);
    }

    const complete = () => {
      this._element.classList.remove(CLASS_NAME_SHOWING);

      EventHandler.trigger(this._element, EVENT_SHOWN);

      this._maybeScheduleHide();
    };

    this._element.classList.remove(CLASS_NAME_HIDE); // @deprecated


    reflow(this._element);

    this._element.classList.add(CLASS_NAME_SHOW, CLASS_NAME_SHOWING);

    this._queueCallback(complete, this._element, this._config.animation);
  }

  hide() {
    if (!this.isShown()) {
      return;
    }

    const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE);

    if (hideEvent.defaultPrevented) {
      return;
    }

    const complete = () => {
      this._element.classList.add(CLASS_NAME_HIDE); // @deprecated


      this._element.classList.remove(CLASS_NAME_SHOWING, CLASS_NAME_SHOW);

      EventHandler.trigger(this._element, EVENT_HIDDEN);
    };

    this._element.classList.add(CLASS_NAME_SHOWING);

    this._queueCallback(complete, this._element, this._config.animation);
  }

  dispose() {
    this._clearTimeout();

    if (this.isShown()) {
      this._element.classList.remove(CLASS_NAME_SHOW);
    }

    super.dispose();
  }

  isShown() {
    return this._element.classList.contains(CLASS_NAME_SHOW);
  } // Private


  _maybeScheduleHide() {
    if (!this._config.autohide) {
      return;
    }

    if (this._hasMouseInteraction || this._hasKeyboardInteraction) {
      return;
    }

    this._timeout = setTimeout(() => {
      this.hide();
    }, this._config.delay);
  }

  _onInteraction(event, isInteracting) {
    switch (event.type) {
      case 'mouseover':
      case 'mouseout':
        {
          this._hasMouseInteraction = isInteracting;
          break;
        }

      case 'focusin':
      case 'focusout':
        {
          this._hasKeyboardInteraction = isInteracting;
          break;
        }
    }

    if (isInteracting) {
      this._clearTimeout();

      return;
    }

    const nextElement = event.relatedTarget;

    if (this._element === nextElement || this._element.contains(nextElement)) {
      return;
    }

    this._maybeScheduleHide();
  }

  _setListeners() {
    EventHandler.on(this._element, EVENT_MOUSEOVER, event => this._onInteraction(event, true));
    EventHandler.on(this._element, EVENT_MOUSEOUT, event => this._onInteraction(event, false));
    EventHandler.on(this._element, EVENT_FOCUSIN, event => this._onInteraction(event, true));
    EventHandler.on(this._element, EVENT_FOCUSOUT, event => this._onInteraction(event, false));
  }

  _clearTimeout() {
    clearTimeout(this._timeout);
    this._timeout = null;
  } // Static


  static jQueryInterface(config) {
    return this.each(function () {
      const data = bootstrap_esm_Toast.getOrCreateInstance(this, config);

      if (typeof config === 'string') {
        if (typeof data[config] === 'undefined') {
          throw new TypeError(`No method named "${config}"`);
        }

        data[config](this);
      }
    });
  }

}
/**
 * Data API implementation
 */


enableDismissTrigger(bootstrap_esm_Toast);
/**
 * jQuery
 */

defineJQueryPlugin(bootstrap_esm_Toast);


//# sourceMappingURL=bootstrap.esm.js.map

// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js
var injectStylesIntoStyleTag = __webpack_require__(379);
var injectStylesIntoStyleTag_default = /*#__PURE__*/__webpack_require__.n(injectStylesIntoStyleTag);
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleDomAPI.js
var styleDomAPI = __webpack_require__(795);
var styleDomAPI_default = /*#__PURE__*/__webpack_require__.n(styleDomAPI);
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertBySelector.js
var insertBySelector = __webpack_require__(569);
var insertBySelector_default = /*#__PURE__*/__webpack_require__.n(insertBySelector);
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js
var setAttributesWithoutAttributes = __webpack_require__(565);
var setAttributesWithoutAttributes_default = /*#__PURE__*/__webpack_require__.n(setAttributesWithoutAttributes);
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertStyleElement.js
var insertStyleElement = __webpack_require__(216);
var insertStyleElement_default = /*#__PURE__*/__webpack_require__.n(insertStyleElement);
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleTagTransform.js
var styleTagTransform = __webpack_require__(589);
var styleTagTransform_default = /*#__PURE__*/__webpack_require__.n(styleTagTransform);
// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./src/css/icons.css
var icons = __webpack_require__(198);
;// CONCATENATED MODULE: ./src/css/icons.css

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (styleTagTransform_default());
options.setAttributes = (setAttributesWithoutAttributes_default());

      options.insert = insertBySelector_default().bind(null, "head");
    
options.domAPI = (styleDomAPI_default());
options.insertStyleElement = (insertStyleElement_default());

var update = injectStylesIntoStyleTag_default()(icons/* default */.Z, options);




       /* harmony default export */ const css_icons = (icons/* default */.Z && icons/* default.locals */.Z.locals ? icons/* default.locals */.Z.locals : undefined);

// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./src/css/main.css
var css_main = __webpack_require__(556);
;// CONCATENATED MODULE: ./src/css/main.css

      
      
      
      
      
      
      
      
      

var main_options = {};

main_options.styleTagTransform = (styleTagTransform_default());
main_options.setAttributes = (setAttributesWithoutAttributes_default());

      main_options.insert = insertBySelector_default().bind(null, "head");
    
main_options.domAPI = (styleDomAPI_default());
main_options.insertStyleElement = (insertStyleElement_default());

var main_update = injectStylesIntoStyleTag_default()(css_main/* default */.Z, main_options);




       /* harmony default export */ const src_css_main = (css_main/* default */.Z && css_main/* default.locals */.Z.locals ? css_main/* default.locals */.Z.locals : undefined);

;// CONCATENATED MODULE: ./build/instantui.js
// Make everything work out of the box, let it to be customized later
var __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Widget_elem, _Widget_children, _Widget_parent, _Widget_listeners, _Widget_onclickCallback, _Layout_type, _Layout_stretches, _Layout_container, _Layout_contextMenuListener, _Layout_scrollToBottomListener, _routes, _a, _Route_baseRoute, _App_onloadCallback, _Input_type, _Input_validationCallback, _Input_onChangeCallback, _Input_onInputCallback, _Accordion_id, _Accordion_syncronized, _Accordion_button, _Accordion_changeCallbacks, _Accordion_onChangeCallback, _AccordionItem_collapseId, _AccordionItem_showButton, _AccordionItem_header, _AccordionItem_button, _AccordionItem_collapse, _AccordionItem_body, _AccordionItem_changeCallbacks, _AccordionItem_fireChangeEvenet, _AccordionItem_onChangeCallback, _Alert_color, _Alert_button, _Badge_value, _Badge_color, _Breadcrumb_breadcrumb, _Button_color, _ButtonGroup_id, _ButtonGroup_truncate, _ButtonGroup_changeCallbacks, _ButtonGroup_onChangeCallback, _Carousel_id, _Carousel_inner, _Carousel_indicators, _Carousel_prevButton, _Carousel_nextButton, _Carousel_activeIdx, _Carousel_interval, _Carousel_keyboard, _Carousel_pause, _Carousel_wrap, _Carousel_ride, _Carousel_touch, _Carousel_withControls, _Carousel_withIndicators, _CarouselItem_image, _CarouselItem_captionHeader, _CarouselItem_captionBody, _Card_header, _Card_image, _Card_body, _Card_footer, _Card_bodyContent, _Card_bodyTitle, _Card_bodySubtitle, _Card_bodyText, _Checkbox_lastState, _Checkbox_id, _Checkbox_input, _Checkbox_label, _Checkbox_changeCallbacks, _Checkbox_fireChangeEvenet, _Checkbox_onChangeCallback, _Checkbox_validationCallback, _Checkbox_customValidityMessage, _Collapse_onChangeCallback, _Divider_vertical, _Divider_length, _Divider_width, _Divider_color, _DropdownButton_color, _DropdownButton_button, _DropdownButton_dropdownMenu, _DropdownButton_togglable, _DropdownButton_onclickCallback, _DropdownButton_onchangeCallback, _DropdownItem_link, _DropdownItem_onclickCallback, _DropdownLink_color, _DropdownLink_link, _DropdownLink_dropdownMenu, _DropdownLink_onclickCallback, _Figure_image, _Figure_caption, _FloatingInput_input, _FloatingInput_label, _Form_customValidation, _Icon_iconName, _IFrame_messageCallback, _CodeBlock_fireChangeEvent, _CodeBlock_fireSaveEvent, _CodeBlock_onChangeCallback, _CodeBlock_onSaveCallback, _InputGroup_updateClass, _Link_color, _Link_type, _ListGroup_toggleable, _ListGroupItem_color, _Markdown_markdownContent, _Markdown_needsHighlight, _Markdown_markdownStyle, _Modal_headerTitle, _Modal_header, _Modal_body, _Modal_footer, _Modal_modalDialog, _Modal_headerCloseButton, _Navbar_responsive, _Navbar_navbar, _Navbar_brand, _Navbar_container, _Navbar_toggler, _Navbar_collapse, _Navbar_navGroup, _Navbar_id, _Navbar_offCanvas, _Navbar_offCanvasBody, _Navbar_offCanvasClose, _Offcanvas_header, _Offcanvas_body, _Offcanvas_headerCloseButton, _Offcanvas_backdrop, _Offcanvas_keyboard, _Offcanvas_scroll, _PaginationLink_pagination, _PaginationLink_activeIdx, _Pagination_onChangeCallback, _Progressbar_progressBar, _Radio_input, _Radio_label, _Radio_changeCallbacks, _Radio_fireChangeEvenet, _Radio_onChangeCallback, _RadioButton_color, _RadioButton_id, _RadioButton_input, _RadioButton_text, _RadioButton_changeCallbacks, _RadioButton_fireChangeEvenet, _RadioButton_onChangeCallback, _SelectionBox_lastState, _SelectionBox_changeCallbacks, _SelectionBox_onChangeCallback, _Spinner_color, _Spinner_spinner, _Spinner_type, _Spinner_small, _Split_isRow, _Split_dividerPos, _Split_dividerThickness, _Split_snapTolerance, _Split_minSize, _Split_maxSize, _Split_dividerMax, _Split_firstVisState, _Split_secondVisState, _Split_firstContent, _Split_secondContent, _Split_first, _Split_second, _Split_divider, _Split_resizable, _Split_callback, _SubmenuItem_submenu, _SubmenuItem_dropdownMenu, _SubmenuItem_link, _SubmenuItem_onclickCallback, _Switch_input, _Switch_label, _Switch_changeCallbacks, _Switch_fireChangeEvenet, _Switch_onChangeCallback, _Table_table, _Table_header, _Table_headerRow, _Table_body, _Table_bodyRows, _Table_footer, _Table_footerRow, _Table_caption, _Table_rows, _Table_cols, _Table_headerColor, _Table_headerColors, _Table_rowColors, _Table_cellColors, _Table_footerColor, _Table_footerColors, _Table_tableColor, _TabPanel_tabBar, _TabPanel_tabBody, _TabPanel_lastState, _TabPanel_changeCallbacks, _TabPanel_fireChangeEvenet, _TabPanel_onChangeCallback, _Tab_content, _Tab_id, _Toast_headerWrapper, _Toast_header, _Toast_body, _Toast_color, _ToggleButton_id, _ToggleButton_text, _ToggleButton_input, _ToggleButton_color, _ToggleButton_lastState, _ToggleButton_changeCallbacks, _ToggleButton_fireChangeEvenet, _ToggleButton_onChangeCallback, _TreeView_textColor, _TreeView_bgColor, _TreeNode_link, _TreeNode_iconGroup, _TreeNode_iconOpen, _TreeNode_iconClose, _TreeNode_isSublist, _TreeNode_collapse, _TreeNode_subList, _Video_source;



class Widget {
    /**
    * @param tag - The tag type of the widget.
    * @param ns - The namespace of the widget.
    */
    constructor(tag = "div", ns) {
        _Widget_elem.set(this, void 0);
        _Widget_children.set(this, []);
        _Widget_parent.set(this, void 0);
        _Widget_listeners.set(this, []);
        _Widget_onclickCallback.set(this, void 0);
        if (tag instanceof HTMLElement) {
            __classPrivateFieldSet(this, _Widget_elem, tag, "f");
        }
        else {
            if (ns) {
                __classPrivateFieldSet(this, _Widget_elem, document.createElementNS(ns, tag), "f");
            }
            else {
                __classPrivateFieldSet(this, _Widget_elem, document.createElement(tag), "f");
            }
        }
        __classPrivateFieldGet(this, _Widget_elem, "f").appendChild(document.createTextNode(""));
    }
    /**
     * Adds child widget to the widget.
     * @param child - The child widget to add.
     * @returns - Itself.
     */
    addChild(child) {
        this.addChildren(child);
        return this;
    }
    /**
     * Adds child widgets to the widget.
     * @param children - The child widgets to add.
     * @returns - Itself.
     */
    addChildren(...args) {
        for (let i = 0; i < args.length; i++) {
            const child = args[i];
            if (!child)
                continue;
            // lazyAdd(this.elem, child.getDom())
            __classPrivateFieldGet(this, _Widget_elem, "f").appendChild(child.getDom());
            __classPrivateFieldGet(this, _Widget_children, "f").push(child);
            child.setParent(this);
        }
        return this;
    }
    /**
     * Adds given CSS classes to the widget.
     * @param args
     * @returns - Itself.
     */
    addClass(...args) {
        for (let i = 0; i < args.length; i++) {
            let cls = args[i];
            if (!__classPrivateFieldGet(this, _Widget_elem, "f").classList.contains(cls))
                __classPrivateFieldGet(this, _Widget_elem, "f").classList.add(cls);
        }
        return this;
    }
    /**
     * Attaches an event handler to the widget
     * @param event - A String that specifies the name of the {@link https://developer.mozilla.org/en-US/docs/Web/Events | event.}
     * @param callback - Specifies the function to run when the event occurs.
     * @param options - A Boolean value that specifies whether the event should be executed in the capturing or in the bubbling phase.
     * @example
     * ```javascript
     * myWidget.addEventListener("click", () => consoleLog("clicked"))
     * ```
     * @returns - Itself.
     */
    addEventListener(event, callback, options = false) {
        __classPrivateFieldGet(this, _Widget_elem, "f").addEventListener(event, callback, options);
        callback.event = event;
        callback.options = options;
        __classPrivateFieldGet(this, _Widget_listeners, "f").push(callback);
        return this;
    }
    /**
     * The classes are named using the format {property}{sides}-{size} for xs and
     * {property}{sides}-{breakpoint}-{size} for sm, md, lg, xl, and xxl. <br>
     * <br>
     * Where property is one of: <br>
     * - m - for classes that set margin <br>
     * - p - for classes that set padding <br>
     *  <br>
     * Where sides is one of: <br>
     * - t - for classes that set margin-top or padding-top <br>
     * - b - for classes that set margin-bottom or padding-bottom <br>
     * - s - for classes that set margin-left or padding-left in LTR, margin-right or padding-right in RTL <br>
     * - e - for classes that set margin-right or padding-right in LTR, margin-left or padding-left in RTL <br>
     * - x - for classes that set both *-left and *-right <br>
     * - y - for classes that set both *-top and *-bottom <br>
     * - blank - for classes that set a margin or padding on all 4 sides of the element <br>
     *  <br>
     * Where size is one of: <br>
     * - 0 - for classes that eliminate the margin or padding by setting it to 0 <br>
     * - 1 - (by default) for classes that set the margin or padding to $spacer * .25 <br>
     * - 2 - (by default) for classes that set the margin or padding to $spacer * .5 <br>
     * - 3 - (by default) for classes that set the margin or padding to $spacer <br>
     * - 4 - (by default) for classes that set the margin or padding to $spacer * 1.5 <br>
     * - 5 - (by default) for classes that set the margin or padding to $spacer * 3 <br>
     * - auto - for classes that set the margin to auto <br>
     *
     * @example
     * ```javascript
     * myWidget.setSpace("m-2", "ps-1")
     * ```
     * @param args
     * @returns - Itself.
     */
    addSpacing(...args) {
        this.addClass(...args);
        return this;
    }
    /**
    * Sets alignment of the widget along the {@link ALIGN_CROSS | cross axis} in parent layout space. This is the vertical axis for {@link Row | Row}, horizontal axis for {@link Column | Column}.
    * @param alignment
    * @param breakpoint
    * @example
    * ```javascript
    * // Button will be aligned to center position in it's parent space.
    * myWidget.align("center")
    * // Button will be aligned to start position in it's parent space.
    * // Once small breakpoint is reached, button will be aligned to end position.
    * myWidget.align("start").align("end", "sm")
    * ```
    * @returns - Itself.
    */
    align(alignment, breakpoint) {
        if (!breakpoint) {
            for (const align of ALIGNS) {
                this.removeClass(`align-self-${align}`);
                for (const bp of BREAKPOINTS) {
                    this.removeClass(`align-self-${bp}-${align}`);
                }
            }
        }
        if (alignment) {
            if (breakpoint) {
                this.addClass(`align-self-${breakpoint}-${alignment}`);
            }
            else {
                this.addClass(`align-self-${alignment}`);
            }
        }
        return this;
    }
    /**
    * Sets the alingment of the widget's inner text.
    * @param value
    * @param breakpoint
    * @returns - Itself.
    */
    alignText(value, breakpoint) {
        if (!breakpoint) {
            for (const align of ["start", "center", "end"]) {
                this.removeClass(`text-${align}`);
                for (const bp of BREAKPOINTS) {
                    this.removeClass(`text-${bp}-${align}`);
                }
            }
        }
        if (value != null) {
            if (breakpoint) {
                this.addClass(`text-${breakpoint}-${value}`);
            }
            else {
                this.addClass(`text-${value}`);
            }
        }
        return this;
    }
    /**
    * Allows performing additional computations inside method chain by providing object - Itself..
    * @param callback
    * @example
    * ```javascript
    * myWidget.addChild(
    *   new Text().apply(self => {
    *       count(self, 0);
    *   })
    * )
    * function count(widget, timer) {
    *   widget.setText(`${timer++} seconds passed.`);
    *   setTimeout(()=>count(widget, timer), 1000);
    * }
    * ```
    * @returns - Itself.
    */
    apply(callback) {
        //if callback is promise do not return caller - Itself., cause infinite loop
        callback.bind(this)(this);
        return this;
    }
    /**
     * Applies a Gaussian blur to the input image.
     * @param value
     * @param unit
     * @returns - Itself.
     */
    blur(value, unit = "px") {
        let style = this.getStyle("filter");
        style = style.replace(/blur\(.*?\)/g, "").replace(/\s+/g, " ");
        value != null && (style += `blur(${value}${unit})`);
        this.setStyle("filter", style);
        return this;
    }
    /**
     * Clears all children from the widget.
     * @returns - Itself.
     */
    clearChildren() {
        var _a, _b;
        let len = __classPrivateFieldGet(this, _Widget_elem, "f").children.length;
        for (let i = 0; i < len; i++) {
            let child = __classPrivateFieldGet(this, _Widget_elem, "f").children[0];
            (_a = child.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(child);
            (_b = __classPrivateFieldGet(this, _Widget_children, "f")[i]) === null || _b === void 0 ? void 0 : _b.setParent();
        }
        __classPrivateFieldGet(this, _Widget_children, "f").length = 0;
        return this;
    }
    /**
     * Clears all events from the widget.
     * @returns - Itself.
     */
    clearEventListeners() {
        let len = __classPrivateFieldGet(this, _Widget_listeners, "f").length;
        for (let i = 0; i < len; i++) {
            let callback = __classPrivateFieldGet(this, _Widget_listeners, "f")[i];
            __classPrivateFieldGet(this, _Widget_elem, "f").removeEventListener(callback.event, callback, callback.options);
        }
        __classPrivateFieldGet(this, _Widget_listeners, "f").length = 0;
        return this;
    }
    /**
     * Clears space classes from the widget.
     * @returns - Itself.
     */
    clearSpacing() {
        let values = [];
        for (const property of ["m", "p"]) {
            for (const side of ["", "t", "b", "s", "e", "x", "y"]) {
                for (const size of ["1", "2", "3", "4", "5", "auto"]) {
                    values.push(`${property}${side}-${size}`);
                    for (const bp of ["sm", "md", "lg", "xl", "xxl"]) {
                        values.push(`${property}${side}-${bp}-${size}`);
                    }
                }
            }
        }
        this.removeClass(...values);
        return this;
    }
    click() {
        __classPrivateFieldGet(this, _Widget_elem, "f").click();
        return this;
    }
    /**
     * Disables the widget for user interaction.
     * @returns - Itself.
     */
    disable() {
        this.addClass("disabled");
        __classPrivateFieldGet(this, _Widget_elem, "f").disabled = true;
        return this;
    }
    /**
     * Sets the visibility property of element.
     * @param value
     * @param breakpoint
     * @returns - Itself.
     */
    display(value = true, breakpoint) {
        if (!breakpoint) {
            this.removeClass("d-none", "d-flex");
            for (const bp of BREAKPOINTS) {
                this.removeClass(`d-${bp}-none`, `d-${bp}-flex`);
            }
        }
        !value && (breakpoint ? this.addClass(`d-${breakpoint}-none`) : this.addClass(`d-none`));
        value && (breakpoint ? this.addClass(`d-${breakpoint}-flex`) : this.addClass(`d-flex`));
        return this;
    }
    /**
     * Enables the widget for user interaction.
     * @returns - Itself.
     */
    enable() {
        this.removeClass("disabled");
        __classPrivateFieldGet(this, _Widget_elem, "f").disabled = false;
        return this;
    }
    /**
     * Fills the widget on parent's available space on main axis relative to its content size or width value if its set.
     * @param value
     * @param breakpoint
     * @returns - Itself.
     */
    fill(value = true, breakpoint) {
        this.removeClass("flex-fill");
        for (const bp of BREAKPOINTS) {
            this.removeClass(`flex-${bp}-fill`);
        }
        if (value) {
            if (breakpoint) {
                this.addClass(`flex-${breakpoint}-fill`);
            }
            else {
                this.addClass("flex-fill");
            }
        }
        return this;
    }
    /**
     * Fixes position on the screen. It will only work if parent's overflow poroperty not set.
     * @param value
     * @returns - Itself.
     */
    fixPosition(value) {
        this.removeClass("fixed-top", "fixed-bottom", "sticky-top", "sticky-sm-top", "sticky-md-top", "sticky-lg-top", "sticky-xl-top");
        value && this.addClass(value);
        return this;
    }
    /**
     * Sets focus on the widget, if it can be focused. The focused widget will receive keyboard and similar events by default
     * @returns - Itself.
     */
    focus() {
        __classPrivateFieldGet(this, _Widget_elem, "f").focus();
        return this;
    }
    /**
     * Sets the font type to italic.
     * @param value
     * @returns - Itself.
     */
    fontItalic(value) {
        this.removeClass("fst-italic");
        value && this.addClass("fst-italic");
        return this;
    }
    /**
     * Sets font type to monospace.
     * @param value
     * @returns - Itself.
     */
    fontMonospace(value = true) {
        this.removeClass("font-monospace");
        value && this.addClass("font-monospace");
        return this;
    }
    /**
     * Returns the value of a specified attribute on the widget.
     * @returns Attribute value of specified attribute.
     */
    getAttribute(attribute) {
        var _a;
        return (_a = __classPrivateFieldGet(this, _Widget_elem, "f").getAttribute(attribute)) !== null && _a !== void 0 ? _a : undefined;
    }
    /**
     * Returns child widget from the specified index.
     * @param idx
     * @returns Child widget from the specified index.
     */
    getChild(idx) {
        return __classPrivateFieldGet(this, _Widget_children, "f")[idx];
    }
    /**
     * Returns children widgets as array.
     * @returns Children widgets as array.
     */
    getChildren() {
        return [...__classPrivateFieldGet(this, _Widget_children, "f")];
    }
    /**
     * Returns the inner height of an element in pixels.
     * @returns The inner height of an element in pixels.
     */
    getClientHeight() {
        return __classPrivateFieldGet(this, _Widget_elem, "f").clientHeight;
    }
    /**
     * Returns the width of the left border of an element in pixels.
     * @returns The width of the left border of an element in pixels.
     */
    getClientLeft() {
        return __classPrivateFieldGet(this, _Widget_elem, "f").clientLeft;
    }
    /**
     * Returns the width of the top border of an element in pixels.
     * @returns The width of the top border of an element in pixels.
     */
    getClientTop() {
        return __classPrivateFieldGet(this, _Widget_elem, "f").clientTop;
    }
    /**
     * Returns the inner width of an element in pixels.
     * @returns The inner width of an element in pixels.
     */
    getClientWidth() {
        return __classPrivateFieldGet(this, _Widget_elem, "f").clientWidth;
    }
    /**
     * Returns height value of the widget.
     * @returns height of the widget.
     */
    getHeight() {
        return this.getStyle("height");
    }
    /**
     * Returns inner html value of the widget.
     * @returns Inner html value of the widget.
     */
    getInnerHTML() {
        return this.getProperty("innerHTML");
    }
    /**
     * Returns html dom element of the widget.
     * @returns Html dom element of the widget.
     */
    getDom() {
        return __classPrivateFieldGet(this, _Widget_elem, "f");
    }
    /**
     * Returns max height value of the widget.
     * @returns Max height value of the widget.
     */
    getMaxHeight() {
        return this.getStyle("max-height");
    }
    /**
     * Returns max width value of the widget.
     * @returns Max width value of the widget.
     */
    getMaxWidth() {
        return this.getStyle("max-width");
    }
    /**
     * Returns min height value of the widget.
     * @returns Min height value of the widget.
     */
    getMinHeight() {
        return this.getStyle("min-height");
    }
    /**
     * Returns min width value of the widget.
     * @returns Min width value of the widget.
     */
    getMinWidth() {
        return this.getStyle("min-width");
    }
    /**
     * Returns the height of an element, including vertical padding and borders, as an integer.
     * @returns the height of an element, including vertical padding and borders, as an integer.
     */
    getOffsetHeight() {
        return __classPrivateFieldGet(this, _Widget_elem, "f").offsetHeight;
    }
    /**
     * Returns the number of pixels that the upper left corner of the current element is offset to the left within the offsetParent node.
     * @returns The number of pixels that the upper left corner of the current element is offset to the left within the offsetParent node.
     */
    getOffsetLeft() {
        return __classPrivateFieldGet(this, _Widget_elem, "f").offsetLeft;
    }
    /**
     * Returns the distance of the outer border of the current element relative to the inner border of the top of the offsetParent node.
     * @returns The distance of the outer border of the current element relative to the inner border of the top of the offsetParent node.
     */
    getOffsetTop() {
        return __classPrivateFieldGet(this, _Widget_elem, "f").offsetTop;
    }
    /**
     * Returns the layout width of an element as an integer.
     * @returns The layout width of an element as an integer.
     */
    getOffsetWidth() {
        return __classPrivateFieldGet(this, _Widget_elem, "f").offsetWidth;
    }
    /**
     * Returns parent widget of the widget.
     * @returns Parent widget of the widget.
     */
    getParent() {
        return __classPrivateFieldGet(this, _Widget_parent, "f");
    }
    /**
     * Returns the value of a specified property of the widget's dom element.
     * @returns Value of a specified property.
     */
    getProperty(property) {
        return __classPrivateFieldGet(this, _Widget_elem, "f")[property];
    }
    /**
     * Returns the height of an element's content, including content not visible on the screen due to overflow
     * @returns the height of an element's content, including content not visible on the screen due to overflow.
     */
    getScrollHeight() {
        return __classPrivateFieldGet(this, _Widget_elem, "f").scrollHeight;
    }
    /**
     * Returns the number of pixels that an element's content is scrolled from its left edge.
     * @returns the number of pixels that an element's content is scrolled from its left edge.
     */
    getScrollLeft() {
        return __classPrivateFieldGet(this, _Widget_elem, "f").scrollLeft;
    }
    /**
     * Returns the number of pixels that an element's content is scrolled vertically.
     * @returns the number of pixels that an element's content is scrolled vertically.
     */
    getScrollTop() {
        return __classPrivateFieldGet(this, _Widget_elem, "f").scrollTop;
    }
    /**
     * Returns the width of an element's content, including content not visible on the screen due to overflow.
     * @returns the width of an element's content, including content not visible on the screen due to overflow.
     */
    getScrollWidth() {
        return __classPrivateFieldGet(this, _Widget_elem, "f").scrollWidth;
    }
    /**
     * Returns the specified style property of the widget.
     * @param style
     * @returns Style property
     */
    getStyle(style) {
        return __classPrivateFieldGet(this, _Widget_elem, "f").style.getPropertyValue(style);
    }
    /**
     * Returns inner text of the widget.
     * @returns Inner text of the widget.
     */
    getText() {
        return this.getProperty("innerText");
    }
    /**
     * Transform value of the widget.
     * @returns Transform value.
     */
    getTransform() {
        return this.getStyle("transform");
    }
    /**
     * Returns width value of the widget.
     * @returns width of the widget.
     */
    getWidth() {
        return this.getStyle("width");
    }
    /**
     * It will grow on its parent main axis.
     * @param {number|string} [value = 1] - { 0 | 1 | "none"}
     * @param {BREAKPOINT} [breakpoint] - { "sm" | "md" | "lg" | "xl" | "xxl" | "none" }
     * @returns {Widget} - Self.
     */
    // grow(value: number | string = 1, breakpoint: breakpoint) {
    //     if (breakpoint === "none" || value === "none") {
    //         for (const val of [0, 1]) {
    //             this.removeClass(`flex-grow-${val}`)
    //             for (const bp of BREAKPOINTS) {
    //                 this.removeClass(`flex-${bp}-grow-${val}`)
    //             }
    //         }
    //     }
    //     if (value !== "none") {
    //         if (breakpoint !== "none") {
    //             this.addClass(`flex-${breakpoint}-grow-${value}`)
    //         }
    //         else {
    //             this.addClass(`flex-grow-${value}`)
    //         }
    //     }
    //     return this
    // }
    /**
     * Fills the widget on parent's available space on main axis.
     * @param value
     * @returns - Itself.
     */
    grow(value = 1) {
        this.removeStyle("flex-grow");
        value != "clear" && this.setStyle("flex-grow", value);
        return this;
    }
    /**
     * Checks if specified attribute is present in the widget.
     * @param attribute
     * @returns
     */
    hasAttribute(attribute) {
        return !!__classPrivateFieldGet(this, _Widget_elem, "f").getAttribute(attribute);
    }
    /**
     * Checks if specified widget is child of the widget.
     * @param child
     * @returns
     */
    hasChild(child) {
        return __classPrivateFieldGet(this, _Widget_children, "f").includes(child);
    }
    /**
     * Checks if specified CSS class is present in the widget.
     * @param child
     * @returns
     */
    hasClass(className) {
        return __classPrivateFieldGet(this, _Widget_elem, "f").classList.contains(className);
    }
    /**
     * Hides the widget and removes element space in the page.
     * @returns - Itself.
     */
    hide() {
        // let styleText = this.getAttribute("style")
        // styleText = (styleText) ? styleText.replace("display:none !important;", "") : ""
        // styleText += "display:none !important;"
        // this.setAttribute("style", styleText)
        this.addClass(`d-none`);
        return this;
    }
    /**
     * Hides tooltip of the widget.
     * @returns - Itself.
     */
    hideTooltip() {
        Popover.getOrCreateInstance(this.getDom()).hide();
        return this;
    }
    /**
     * Inserts child widget at specified index.
     * @param idx
     * @param child
     * @returns - Itself.
     */
    insertChild(idx, child) {
        __classPrivateFieldGet(this, _Widget_elem, "f").insertBefore(child.getDom(), __classPrivateFieldGet(this, _Widget_elem, "f").children[idx]);
        child.setParent(this);
        __classPrivateFieldGet(this, _Widget_children, "f").splice(idx, 0, child);
        return this;
    }
    /**
     * Inverts the color samples in the input image.
     * @param value
     * @param unit
     * @returns - Itself.
     */
    invert(value, unit = "%") {
        let style = this.getStyle("filter");
        style = style.replace(/invert\(.*?\)/g, "").replace(/\s+/g, " ");
        value != null && (style += `invert(${value}${unit})`);
        this.setStyle("filter", style);
        return this;
    }
    /**
     * Returns hidden state of the widget.
     * @returns {boolean}
     */
    isHidden() {
        return this.hasClass("d-none");
    }
    /**
     * Checks if widget is in the visible DOM hierarch.
     * @returns
     */
    isInViewport() {
        // var bounding = this.#elem.getBoundingClientRect()
        // return (
        //     bounding.top >= 0 &&
        //     bounding.left >= 0 &&
        //     bounding.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
        //     bounding.right <= (window.innerWidth || document.documentElement.clientWidth)
        // )
        return document.body.contains(__classPrivateFieldGet(this, _Widget_elem, "f"));
    }
    onClick(callback) {
        if (__classPrivateFieldGet(this, _Widget_onclickCallback, "f")) {
            this.removeEventListener(__classPrivateFieldGet(this, _Widget_onclickCallback, "f"));
            __classPrivateFieldSet(this, _Widget_onclickCallback, undefined, "f");
        }
        if (callback) {
            __classPrivateFieldSet(this, _Widget_onclickCallback, e => callback(this, e), "f");
            __classPrivateFieldGet(this, _Widget_onclickCallback, "f").event = "click";
            this.addEventListener("click", __classPrivateFieldGet(this, _Widget_onclickCallback, "f"));
        }
        return this;
    }
    ;
    /**
     * Removes given attributes from widget.
     * @param args
     * @returns - Itself.
     */
    removeAttribute(...args) {
        for (let i = 0; i < args.length; i++) {
            let attr = args[i];
            __classPrivateFieldGet(this, _Widget_elem, "f").removeAttribute(attr);
        }
        return this;
    }
    /**
     * Removes given children from widget.
     * @param args
     * @returns - Itself.
     */
    removeChild(...args) {
        var _a;
        for (let i = 0; i < args.length; i++) {
            let child = args[i];
            child.setParent();
            let idx = __classPrivateFieldGet(this, _Widget_children, "f").indexOf(child);
            if (idx < 0) {
                return this;
            }
            __classPrivateFieldGet(this, _Widget_children, "f").splice(idx, 1);
            (_a = child.getDom().parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(child.getDom());
        }
        return this;
    }
    /**
     * Removes child from widget at given index.
     * @param idx
     * @returns - Itself.
     */
    removeChildAt(idx) {
        var _a;
        let child = __classPrivateFieldGet(this, _Widget_children, "f")[idx];
        child.setParent();
        __classPrivateFieldGet(this, _Widget_children, "f").splice(idx, 1);
        (_a = child.getDom().parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(child.getDom());
        return this;
    }
    /**
     * Removes given CSS classes from widget.
     * @param args
     * @returns - Itself.
     */
    removeClass(...args) {
        for (let i = 0; i < args.length; i++) {
            let cls = args[i];
            __classPrivateFieldGet(this, _Widget_elem, "f").classList.remove(cls);
        }
        return this;
    }
    /**
     * Removes specified listener from widget.
     * @param callback
     * @param evnt
     * @returns - Itself.
     */
    removeEventListener(callback, evnt) {
        __classPrivateFieldGet(this, _Widget_elem, "f").removeEventListener(evnt || callback.event, callback, callback.options);
        let idx = __classPrivateFieldGet(this, _Widget_listeners, "f").indexOf(callback);
        __classPrivateFieldGet(this, _Widget_listeners, "f").splice(idx, 1);
        return this;
    }
    /**
     * Removes given styles from widget.
     * @param args
     * @returns - Itself.
     */
    removeStyle(...args) {
        for (let i = 0; i < args.length; i++) {
            __classPrivateFieldGet(this, _Widget_elem, "f").style.removeProperty(args[i]);
        }
        return this;
    }
    /**
     * Removes given space classes from widget.
     * @param args
     * @returns - Itself.
     */
    removeSpacing(...args) {
        this.removeClass(...args);
        return this;
    }
    /**
     * Renders widget to given html element once document is loaded.
     * @param dom
     * @returns - Itself.
     */
    render(dom = document.body) {
        dom.appendChild(__classPrivateFieldGet(this, _Widget_elem, "f"));
        return this;
    }
    /**
     * Replaces child widget at specified index.
     * @param child
     * @param idx
     * @returns - Itself.
     */
    replaceChild(child, idx) {
        var _a;
        (_a = child.getDom().parentNode) === null || _a === void 0 ? void 0 : _a.replaceChild(child.getDom(), __classPrivateFieldGet(this, _Widget_elem, "f").children[idx]);
        __classPrivateFieldGet(this, _Widget_children, "f")[idx] = child;
        return this;
    }
    replaceChildren(child) {
        this.clearChildren();
        this.addChild(child);
        return this;
    }
    /**
     * Defines a transformation that rotates an element around a fixed point on the 2D plane, without deforming it.
     * @param value
     * @param unit
     * @example
     * ```javascript
     * // Rotates element by 90 degrees
     * myWidget.rotate(90)
     *
     * // Rotates element by 2 turns
     * myWidget.rotate(2, "turn")
     * ```
     * @returns - Itself.
     */
    rotate(value, unit = "deg") {
        let style = this.getStyle("transform");
        style = style.replace(/rotate\(.*?\)/g, "").replace(/\s+/g, " ");
        value != null && (style += `rotate(${value}${unit})`);
        this.setStyle("transform", style);
        return this;
    }
    /**
    * Runs given function after widget dom is mounted to document. Runs immediately if dom is already mounted.
    * @param callback - Function to run after widget's dom is mounted to document.
    * @example
    * ```javascript
    * myWidget.runOnMount(() => console.log("dom is mounted!"))
    * ```
    * @returns - Itself.
    */
    runOnMount(callback) {
        if (document.body.contains(__classPrivateFieldGet(this, _Widget_elem, "f"))) {
            callback.bind(this)();
            return this;
        }
        const isChildOf = (element) => {
            if (__classPrivateFieldGet(this, _Widget_elem, "f") === element) {
                return true;
            }
            let c = element.children;
            for (let i = 0; i < c.length; i++) {
                if (isChildOf(c[i])) {
                    return true;
                }
            }
            return false;
        };
        const observer = new MutationObserver(mutations => {
            mutations.forEach(mutation => {
                if (mutation.type === "childList") {
                    for (const node of mutation.addedNodes) {
                        if (node instanceof Element && isChildOf(node)) {
                            callback.bind(this)();
                            observer.disconnect();
                            return;
                        }
                    }
                }
            });
        });
        observer.observe(document.body, { subtree: true, attributes: true, childList: true, characterData: true });
        return this;
    }
    /**
     * Saturates or desaturates the input image.
     * @param value
     * @param unit
     * @returns - Itself.
     */
    saturate(value, unit = "%") {
        let style = this.getStyle("filter");
        style = style.replace(/saturate\(.*?\)/g, "").replace(/\s+/g, " ");
        value != null && (style += `saturate(${value}${unit})`);
        this.setStyle("filter", style);
        return this;
    }
    /**
     * Defines a transformation that resizes an element on the 2D plane
     * @param x
     * @param y
     * @example
     * ```javascript
     * myWidget.scale(2, 2)
     * ```
     * @returns - Itself.
     */
    scale(x, y) {
        let style = this.getStyle("transform");
        style = style.replace(/scale\(.*?\)/g, "").replace(/\s+/g, " ");
        if (x != null) {
            y = y !== null && y !== void 0 ? y : x;
            style += `scale(${x}, ${y})`;
        }
        this.setStyle("transform", style);
        return this;
    }
    /**
     * Scrolls widget into view.
     * @param alignToTop
     * @example
     * ```javascript
     * myWidget.scrollIntoView()
     * ```
     * @returns - Itself.
     */
    scrollIntoView(alignToTop) {
        __classPrivateFieldGet(this, _Widget_elem, "f").scrollIntoView(alignToTop);
    }
    /**
     * Defines a transformation that skews an element on the 2D plane.
     * @param x
     * @param y
     * @param unit
     * @example
     * ```javascript
     * myWidget.skew(.2, .4, "rad")
     * ```
     * @returns - Itself.
     */
    skew(x, y, unit = "deg") {
        let style = this.getStyle("transform");
        style = style.replace(/skew\(.*?\)/g, "").replace(/\s+/g, " ");
        if (x != null) {
            y = y !== null && y !== void 0 ? y : x;
            style += `skew(${x}${unit}, ${y}${unit})`;
        }
        this.setStyle("transform", style);
        return this;
    }
    /**
     * Sets given attributes to widget's HTML element.
     * @param attribute
     * @param value
     * @returns - Itself.
     */
    setAttribute(attribute, value) {
        let containsUppercase = !(attribute == attribute.toLowerCase() && attribute != attribute.toUpperCase());
        if (containsUppercase) {
            var att = document.createAttribute(attribute); // Create a "newName" attribute
            att.value = value; // Set the value of the newName attribute
            __classPrivateFieldGet(this, _Widget_elem, "f").setAttributeNode(att);
        }
        else {
            __classPrivateFieldGet(this, _Widget_elem, "f").setAttribute(attribute, value);
        }
        return this;
    }
    /**
     * Sets background color of widget.
     * @param value - primary | secondary | success | danger | warning | info | light | dark
     * @returns - this.
     */
    setBgColor(value, gradient = false) {
        for (const cls of BG_COLORS) {
            this.removeClass(`bg-${cls}`);
        }
        this.removeClass("bg-gradient");
        value && this.addClass(`bg-${value}`);
        gradient && this.addClass("bg-gradient");
        return this;
    }
    /**
     * Sets background images on the widget.
     * @param value - Path to image, valid inputs: "url", "none", "initial", "inherit", "revert", "unset"
     * @returns - Itself.
     */
    setBgImage(value) {
        this.removeStyle("background-image");
        if (value == null)
            return this;
        if (["inherit", "initial", "revert", "unset"].includes(value)) {
            this.setStyle("background-image", value);
            return this;
        }
        this.setStyle("background-image", `url(${value})`);
        return this;
    }
    /**
     * Creates an image consisting of a progressive transition between two or more colors.
     * @see {@link https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/linear-gradient() | linear-gradient}
     * @see {@link https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/radial-gradient() | radial-gradient}
     * @param values
     * @param options
     * @param options.type
     * @param options.repeat
     * @param options.angleOrPos - The angle or position of the gradient.
     * @example
     * ```javascript
     * myWidget.setBgGradient([green, "red 50%"], {type: linear, angleOrPos:60})
     * myWidget.setBgGradient([green %10, "red 50%"], {type: linear, angleOrPos:"to bottom right"})
     * myWidget.setBgGradient([green, "red 50%"], {type: radial, angleOrPos:"closest-corner"})
     * ```
     * @returns - Itself.
     */
    setBgGradient(values, options) {
        let style = this.getStyle("background-image");
        if (!values || !values.length) {
            style = style.replace(/(, *|)linear-gradient\(.*?\)( |)/g, "")
                .replace(/(, *|)repeat-linear-gradient\(.*?\)( |)/g, "")
                .replace(/(, *|)radial-gradient\(.*?\)( |)/g, "")
                .replace(/(, *|)repeat-radial-gradient\(.*?\)( |)/g, "");
            this.setStyle("background-image", style);
            return this;
        }
        const { type, repeat, angleOrPos } = Object.assign({ type: "linear", repeat: false }, options);
        let colors = "";
        for (const value of values) {
            colors += value + ",";
        }
        let _angleOrPos = "";
        angleOrPos && (_angleOrPos = typeof angleOrPos === "number" ? angleOrPos + "deg," : angleOrPos + ",");
        colors = colors.slice(0, -1);
        let _repeat = repeat ? "repeating-" : "";
        style += style.length > 0 ? "," : "";
        style += `${_repeat + type}-gradient(${_angleOrPos} ${colors})`;
        this.setStyle("background-image", style);
        return this;
    }
    /**
     * Sets the initial position for each background image.
     * @param x
     * @param y
     * @param unit
     * @returns - Itself.
     */
    setBgPosition(x, y, unit = "px") {
        this.removeStyle("background-position");
        if (x == null)
            return this;
        if (["inherit", "initial", "revert", "unset"].includes(x)) {
            this.setStyle("background-position", x);
            return this;
        }
        let xAxis = typeof x === "string" ? x : x + unit;
        let yAxis = y == null ?
            typeof x === "number" ? xAxis : ""
            : typeof y === "string" ? y : y + unit;
        this.setStyle("background-position", `${xAxis} ${yAxis}`);
        return this;
    }
    /**
     * Sets how background images are repeated. A background image can be repeated along the horizontal and vertical axes, or not repeated at all.
     * @param x
     * @param y
     * @returns - Itself.
     */
    setBgRepeat(x, y) {
        this.removeStyle("background-repeat");
        if (x == null)
            return this;
        if (["repeat-x", "repeat-y", "inherit", "initial", "revert", "unset"].includes(x)) {
            this.setStyle("background-repeat", x);
            return this;
        }
        let yAxis = y !== null && y !== void 0 ? y : "";
        this.setStyle("background-repeat", `${x} ${yAxis}`);
        return this;
    }
    /**
     * Sets the size of the widgets's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.
     * @param x
     * @param y
     * @param unit
     * @returns - Itself.
     */
    setBgSize(x, y = "auto", unit = "px") {
        this.removeStyle("background-size");
        if (x == null)
            return this;
        if (["cover", "contain", "inherit", "initial", "revert", "unset"].includes(x)) {
            this.setStyle("background-size", x);
            return this;
        }
        let xAxis = x === "auto" ? x : x + unit;
        let yAxis = y === "auto" ? y : y + unit;
        this.setStyle("background-size", `${xAxis} ${yAxis}`);
        return this;
    }
    /**
     * Enables backgroud hover color effect.
     * @param value - Dark or light, disables if undefined.
     * @returns
     */
    setBgHoverColor(value) {
        this.removeClass("bgHoverLight", "bgHoverDark");
        value && (value === "dark" ? this.addClass("bgHoverDark") : this.addClass("bgHoverLight"));
        return this;
    }
    /**
     * Adds or removes this element’s borders
     * @param value - Additive border value.
     * @param parameters
     * @param parameters.subtractive - Reverts border value.
     * @param parameters.color - Hex color code, valid inputs: "rgb", "rgba", "rrggbb", "rrggbbaa", "#rgb", "#rgba", "#rrggbb", "#rrggbbaa" | "initial" | "inherit"
     * @param parameters.width - Line thickness.
     * @returns - Itself.
     */
    setBorder(value, options) {
        const { subtractive, color, width } = Object.assign({}, options);
        let borderValues = ["top", "end", "bottom", "start"];
        this.removeClass(`border`);
        for (const bd of borderValues) {
            this.removeClass(`border-${bd}`, `border-${bd}-0`);
        }
        for (const bd of COLORS) {
            this.removeClass(`border-${bd}`);
        }
        let widths = [1, 2, 3, 4, 5];
        for (const width of widths) {
            this.removeClass(`border-${width}`);
        }
        let addBorder = (val) => {
            if (val == null) {
                return;
            }
            if (val === "all") {
                subtractive ? this.addClass(`border-0`) : this.addClass(`border`);
            }
            else {
                subtractive ? this.addClass(`border-${val}-0`) : this.addClass(`border-${val}`);
            }
            color && this.addClass(`border-${color}`);
            width && this.addClass(`border-${width}`);
        };
        let values = Array.isArray(value) ? value : [value];
        values.forEach(val => addBorder(val));
        return this;
    }
    /**
     * The bottom property participates in setting the vertical position of a {@link POSITION | positioned element.} It has no effect on non-positioned elements.
     * @param value
     * @param unit
     * @returns
     */
    setBottomPos(value, unit = "px") {
        this.removeStyle("bottom");
        let val = typeof value === "number" ? value + unit : value;
        value != null && this.setStyle("bottom", val);
        return this;
    }
    /**
     * Applies a linear multiplier to the input image, making it appear brighter or darker
     * @param value
     * @param unit
     * @returns
     */
    setBrightness(value, unit = "%") {
        let style = this.getStyle("filter");
        style = style.replace(/brightness\(.*?\)/g, "").replace(/\s+/g, " ");
        value != null && (style += `brightness(${value}${unit})`);
        this.setStyle("filter", style);
        return this;
    }
    /**
     * Replaces children with the given ones.
     * @param args
     * @returns - Itself.
     */
    setChild(child) {
        this.clearChildren();
        child && this.addChildren(child);
        return this;
    }
    /**
     * Replaces CSS classes with the given ones.
     * @param args
     * @returns - Itself.
     */
    setClass(...args) {
        __classPrivateFieldGet(this, _Widget_elem, "f").classList.remove(...__classPrivateFieldGet(this, _Widget_elem, "f").classList);
        for (let i = 0; i < args.length; i++) {
            let cls = args[i];
            __classPrivateFieldGet(this, _Widget_elem, "f").classList.add(cls);
        }
        return this;
    }
    /**
     * Adjusts the contrast of the input image.
     * @param value
     * @param unit
     * @returns - Itself.
     */
    setContrast(value, unit = "%") {
        let style = this.getStyle("filter");
        style = style.replace(/contrast\(.*?\)/g, "").replace(/\s+/g, " ");
        value != null && (style += `contrast(${value}${unit})`);
        this.setStyle("filter", style);
        return this;
    }
    /**
     * The {@link https://developer.mozilla.org/en-US/docs/Web/CSS/cursor | cursor} property sets the type of mouse cursor, if any, to show when the mouse pointer is over an widget.
     * @param value
     * @returns - Itself.
     */
    setCursor(value) {
        this.removeStyle("cursor");
        value && this.setStyle("cursor", value);
        return this;
    }
    /**
     * Sets the display order of item.
     * @param value
     * @param breakpoint
     * @returns - Itself.
     */
    setDisplayOrder(value, breakpoint) {
        if (!breakpoint || value == null) {
            for (const order of ["1", "2", "3", "4", "5", "first", "last"]) {
                this.removeClass(`order-${order}`);
                for (const bp of BREAKPOINTS) {
                    this.removeClass(`order-${bp}-${order}`);
                }
            }
        }
        if (value != null) {
            if (breakpoint) {
                this.addClass(`order-${breakpoint}-${value}`);
            }
            else {
                this.addClass(`order-${value}`);
            }
        }
        return this;
    }
    /**
     * Applies a drop shadow effect to the input image.
     * @param x
     * @param y
     * @param options
     * @param options.blur
     * @param options.color
     * @param options.unit
     * @returns - Itself.
     */
    setDropShadow(x, y, options) {
        const { blur, color, unit } = Object.assign({ blur: 4, color: "gray", unit: "px" }, options);
        let style = this.getStyle("filter");
        style = style.replace(/drop\-shadow\(.*?\)/g, "").replace(/\s+/g, " ");
        if (x != null) {
            y = y !== null && y !== void 0 ? y : x;
            style += `drop-shadow(${x}${unit} ${y}${unit} ${blur}${unit} ${color})`;
        }
        this.setStyle("filter", style);
        return this;
    }
    /**
     * Specifies whether the content of an widget should be editable.
     * @param value
     * @returns - Itself.
     */
    setEditable(value = true) {
        this.removeAttribute("contenteditable");
        value && this.setAttribute("contenteditable", "true");
        return this;
    }
    /**
     * Sets the size of the font.
     * @param value
     * @param unit
     * @returns - Itself.
     */
    setFontSize(value, unit = "px") {
        this.removeStyle("font-size");
        let val = typeof value === "number" ? value + unit : value;
        value != null && this.setStyle("font-size", val);
        return this;
    }
    /**
     * Sets the tickness of the font.
     * @param value
     * @returns - Itself.
     */
    setFontWeight(value) {
        for (const val of ["bold", "bolder", "normal", "light", "lighter"]) {
            this.removeClass(`fw-${val}`);
        }
        value != null && this.addClass(`fw-${value}`);
        return this;
    }
    /**
     * Converts the input image to grayscale.
     * @param value
     * @param unit
     * @returns - Itself.
     */
    setGrayscale(value, unit = "%") {
        let style = this.getStyle("filter");
        style = style.replace(/grayscale\(.*?\)/g, "").replace(/\s+/g, " ");
        value != null && (style += `grayscale(${value}${unit})`);
        this.setStyle("filter", style);
        return this;
    }
    /**
     * Sets height of the widget.
     * @param value
     * @param unit
     * @returns - Itself.
     */
    setHeight(value, unit = "px") {
        this.removeStyle("height");
        let val = typeof value === "number" ? value + unit : value;
        value != null && this.setStyle("height", val);
        return this;
    }
    /**
     * Rotates the hue of an widget and its contents.
     * @param value
     * @param unit
     * @returns - Itself.
     */
    setHue(value, unit = "deg") {
        let style = this.getStyle("filter");
        style = style.replace(/hue-rotate\(.*?\)/g, "").replace(/\s+/g, " ");
        value != null && (style += `hue-rotate(${value}${unit})`);
        this.setStyle("filter", style);
        return this;
    }
    /**
     * Sets the inner HTML of the widget.
     * @param value
     * @returns - Itself.
     */
    setInnerHTML(value) {
        this.setProperty("innerHTML", value !== null && value !== void 0 ? value : "");
        return this;
    }
    /**
     * The left property participates in setting the horizontal position of a {@link POSITION | positioned element.} It has no effect on non-positioned elements.
     * @param value
     * @param unit
     * @returns - Itself.
     */
    setLeftPos(value, unit = "px") {
        this.removeStyle("left");
        let val = typeof value === "number" ? value + unit : value;
        value != null && this.setStyle("left", val);
        return this;
    }
    /**
     * Sets max height of the widget.
     * @param value
     * @param unit
     * @returns - Itself.
     */
    setMaxHeight(value, unit = "px") {
        this.removeStyle("max-height");
        let val = typeof value === "number" ? value + unit : value;
        value != null && this.setStyle("max-height", val);
        return this;
    }
    /**
     * Sets max width and max height of the widget.
     * @param width
     * @param height
     * @param unit
     * @returns - Itself.
     */
    setMaxSize(width, height, unit = "px") {
        this.setMaxWidth(width, unit);
        this.setMaxHeight(height !== null && height !== void 0 ? height : width, unit);
        return this;
    }
    /**
     * Sets max width of the widget.
     * @param value
     * @param unit
     * @returns - Itself.
     */
    setMaxWidth(value, unit = "px") {
        this.removeStyle("max-width");
        let val = typeof value === "number" ? value + unit : value;
        value != null && this.setStyle("max-width", val);
        return this;
    }
    /**
     * Sets min height of the widget.
     * @param value
     * @param unit
     * @returns - Itself.
     */
    setMinHeight(value, unit = "px") {
        this.removeStyle("min-height");
        let val = typeof value === "number" ? value + unit : value;
        value != null && this.setStyle("min-height", val);
        return this;
    }
    /**
     * Sets min width and min height of the widget.
     * @param width
     * @param height
     * @param unit
     * @returns - Itself.
     */
    setMinSize(width, height, unit = "px") {
        if (width && !height) {
            height = width;
        }
        this.setMinWidth(width, unit);
        this.setMinHeight(height !== null && height !== void 0 ? height : width, unit);
        return this;
    }
    /**
     * Sets min width of the widget.
     * @param value
     * @param unit
     * @returns - Itself.
     */
    setMinWidth(value, unit = "px") {
        this.removeStyle("min-width");
        let val = typeof value === "number" ? value + unit : value;
        value != null && this.setStyle("min-width", val);
        return this;
    }
    /**
     * A string representing the attribute's qualified name.
     * @param {string} value
     */
    setName(name) {
        this.removeAttribute("name");
        name && this.setAttribute("name", name);
        return this;
    }
    /**
     * A string representing the attribute's qualified name.
     */
    getName() {
        return this.getAttribute("name");
    }
    /**
     * Sets the opacity of an widget. Opacity is the degree to which content behind an element is hidden, and is the opposite of transparency.
     * @param value
     * @returns - Itself.
     */
    setOpacity(value) {
        this, this.removeStyle("opacity");
        value != null && this.setStyle("opacity", value);
        return this;
    }
    /**
     * Sets the rotation origin. Clears if nothing is passed.
     * @param x
     * @param y
     * @param unit
     * @returns - Itself.
     */
    setOrigin(x, y, unit = "px") {
        this.removeStyle("transform-origin");
        if (x == null)
            return this;
        if (["inherit", "initial", "revert", "unset"].includes(x)) {
            this.setStyle("transform-origin", x);
            return this;
        }
        let xAxis = typeof x === "string" ? x : x + unit;
        let yAxis = y == null ?
            typeof x === "number" ? xAxis : ""
            : typeof y === "string" ? y : y + unit;
        this.setStyle("transform-origin", `${xAxis} ${yAxis}`);
        // this.removeStyle("transform-origin")
        // let xAxis = x === "none" ? "" :
        //     typeof x === "string" ? x : x + unit
        // let yAxis = y === "none" ? "" :
        //     typeof y === "string" ? y : y + unit
        // yAxis = (typeof x === "number" && !yAxis) ? xAxis : yAxis
        // xAxis && this.setStyle("transform-origin", `${xAxis} ${yAxis}`)
        return this;
    }
    /**
     * Sets the desired behavior for an element's overflow. Clears if nothing is passed.
     * @param value
     * @returns - Itself.
     */
    setOverflow(value) {
        for (const val of ["auto", "hidden", "visible", "scroll"]) {
            this.removeClass(`overflow-${val}`);
        }
        value != null && this.addClass(`overflow-${value}`);
        return this;
    }
    /**
     * Set parent of the widget. Use addChild instead.
     * @param parent
     * @returns - Itself.
     */
    setParent(parent) {
        __classPrivateFieldSet(this, _Widget_parent, parent, "f");
        return this;
    }
    /**
     * Arrange elements with the edge.
     * @param args
     * @returns - Itself.
     */
    setPlacement(...args) {
        this.removeClass(...PLACEMENTS);
        if (!args || !args.length)
            return this;
        for (let i = 0; i < args.length; i++) {
            let value = args[i];
            this.addClass(value);
        }
        return this;
    }
    /**
     * Enables or disables cursor interaction for this element.
     * @param value
     * @returns - Itself.
     */
    setPointerInteraction(value) {
        for (const val of ["none", "auto"]) {
            this.removeClass(`pe-${val}`);
        }
        value != null && this.addClass(`pe-${value}`);
        return this;
    }
    /**
     * Adds given propery to widget's DOM object.
     * @param property
     * @param value
     * @returns
     */
    setProperty(property, value) {
        __classPrivateFieldGet(this, _Widget_elem, "f")[property] = value;
        return this;
    }
    /**
     * Sets the position of the element. Clears if nothing is passed.
     * @param value
     * @param unit
     * @returns - Itself.
     * @example
     * ```javascript
     * widget.setPosition("center")
     * widget.setPosition(["left", "top"])
     * widget.setPosition({top: 10, left: 20})
     * widget.setPosition({bottom: 10, right: 20}, "em")
     * ```
     */
    setPosition(value, unit = "px") {
        this.removeStyle("left", "right", "top", "bottom");
        if (typeof value === "string") {
            if (value === "center") {
                this.setStyle("top", "50%");
                this.setStyle("left", "50%");
            }
            if (value === "left") {
                this.setStyle("left", "0");
                this.setStyle("top", "50%");
            }
            if (value === "right") {
                this.setStyle("right", "0");
                this.setStyle("top", "50%");
            }
            if (value === "top") {
                this.setStyle("top", "0");
                this.setStyle("right", "50%");
            }
            if (value === "bottom") {
                this.setStyle("bottom", "0");
                this.setStyle("right", "50%");
            }
        }
        else if (value instanceof Array) {
            for (let i = 0; i < value.length; i++) {
                let val = value[i];
                if (val === "left") {
                    this.setStyle("left", "0");
                }
                if (val === "right") {
                    this.setStyle("right", "0");
                }
                if (val === "top") {
                    this.setStyle("top", "0");
                }
                if (val === "bottom") {
                    this.setStyle("bottom", "0");
                }
            }
        }
        else if (typeof value === "object") {
            for (const key in value) {
                let val = value[key];
                if (!val)
                    continue;
                let valStr = typeof val === "number" ? val + unit : val;
                this.setStyle(key, valStr);
            }
        }
        return this;
    }
    /**
    * The position property sets how an element is positioned in a document. The setTopPos, setRightPos, setBottomPos, and setLeftPos properties determine the final location of positioned elements.
    * @param value
    * @returns - Itself.
    */
    setPositioning(value) {
        let classes = POSITIONS.map(val => "position-" + val);
        this.removeClass(...classes);
        value != null && this.addClass("position-" + value);
        return this;
    }
    /**
     * Manages the aspect ratios of content. Width needs to be defined.
     * @param ratio
     * @returns - Itself.
     */
    setRatio(ratio) {
        this.removeClass("ratio", "ratio-1x1", "ratio-4x3", "ratio-16x9", "ratio-21x9");
        ratio != null && this.addClass("ratio", `ratio-${ratio}`);
        return this;
    }
    setRef(obj, key) {
        obj[key] = this;
        return this;
    }
    /**
     * Sets the resizing methot of layout. The resize property does not apply to inline elements or to block elements where overflow="visible".
     * So, make sure that overflow is set to "scroll", "auto", or "hidden".
     * @param value
     * @returns - Itself.
     */
    setResizable(value) {
        this.removeStyle("resize");
        value != null && this.setStyle("resize", value);
        return this;
    }
    /**
     * The right property participates in setting the horizontal position of a {@link POSITION | positioned element.} It has no effect on non-positioned elements.
     * @param value
     * @param unit
     * @returns - Itself.
     */
    setRightPos(value, unit = "px") {
        this.removeStyle("right");
        let val = typeof value === "number" ? value + unit : value;
        value != null && this.setStyle("right", val);
        return this;
    }
    /**
     * Sets or removes round corners.
     * @param value
     * @param size
     * @returns Itsellf
     */
    setRound(value = "all", size) {
        this.removeClass("rounded", "circle", "pill");
        for (const rnd of ["top", "end", "bottom", "start"]) {
            for (const sz of [0, 1, 2, 3, 4, 5]) {
                this.removeClass(`rounded-${rnd}`, `rounded-${rnd}-${sz}`);
            }
        }
        if (value !== "none") {
            if (value === "all") {
                this.addClass(size != null ? `rounded-${size}` : `rounded`);
            }
            else {
                this.addClass(size != null ? `rounded-${value}-${size}` : `rounded-${value}`);
            }
        }
        return this;
    }
    /**
     * Sets the number of pixels that an element's content is scrolled from its left edge.
     * @param - The number of pixels to scroll.
     * @returns Itself
     */
    setScrollLeft(value) {
        __classPrivateFieldGet(this, _Widget_elem, "f").scrollLeft = value;
        return this;
    }
    /**
     * Sets the number of pixels that an element's content is scrolled vertically.
     * @param - The number of pixels to scroll.
     * @returns Itself
     */
    setScrollTop(value) {
        __classPrivateFieldGet(this, _Widget_elem, "f").scrollTop = value;
        return this;
    }
    /**
     * Sets shadow of the widget.
     * @param value
     * @returns - Itself.
     */
    setShadow(value) {
        for (const val of ["none", "sm", "md", "lg"]) {
            this.removeClass(`shadow-${val}`);
        }
        value != null && (value === "md" ? this.addClass(`shadow`) : this.addClass(`shadow-${value}`));
        return this;
    }
    /**
     * Sets width and height of the widget.
     * @param width
     * @param height
     * @param unit
     * @returns - Itself.
     */
    setSize(width, height, unit = "px") {
        this.setWidth(width, unit);
        this.setHeight(height !== null && height !== void 0 ? height : width, unit);
        return this;
    }
    /**
     * Set a specific style of an element using different CSS properties.
     * @param type
     * @param value
     *
     * @example
     * ```javascript
     * myWidget.setStyle("backgroundColor", "white")
     * ```
     */
    setStyle(type, value) {
        __classPrivateFieldGet(this, _Widget_elem, "f").style[type] = value;
        return this;
    }
    /**
     * Sets the inner text of the widget.
     * @param value
     * @returns - Itself.
     */
    setText(value) {
        //if we set directly this.elem.innerText = ... it replaces all child elements
        __classPrivateFieldGet(this, _Widget_elem, "f").childNodes[0].nodeValue = value !== null && value !== void 0 ? value : "";
        return this;
    }
    /**
     * Sets the text color. Reset inherits the color from its parent. None removes color class.
     * @param value
     * @returns - Itself.
     */
    setTextColor(value) {
        this.removeStyle("color");
        for (const cls of TEXT_COLORS) {
            this.removeClass(`text-${cls}`);
        }
        value && this.addClass(`text-${value}`);
        return this;
    }
    /**
     * Sets text decoration style.
     * @param value
     * @returns - Itself.
     */
    setTextDecoration(value) {
        for (const val of ["none", "underline", "line-through"]) {
            this.removeClass(`text-decoration-${val}`);
        }
        value && this.addClass(`text-decoration-${value}`);
        return this;
    }
    /**
     * Sets the selectable state of the widget's inner text.
     * @param value
     * @returns - Itself.
     */
    setTextInteraction(value) {
        for (const val of ["none", "all", "auto"]) {
            this.removeClass(`user-select-${val}`);
        }
        value && this.addClass(`user-select-${value}`);
        return this;
    }
    /**
     * Sets text line height.
     * @param value
     * @returns - Itself.
     */
    setTextLineHeight(value) {
        for (const val of ["1", "sm", "base", "lg"]) {
            this.removeClass(`lh-${val}`);
        }
        value != null && this.addClass(`lh-${value}`);
        return this;
    }
    /**
     * Sets text overflow behavior.
     * @param value
     * @returns - Itself.
     */
    setTextOverflow(value) {
        this.removeStyle("text-overflow");
        value != null && this.setStyle("text-overflow", value);
        return this;
    }
    /**
     * Sets text shadow.
     * @param value
     * @param color
     * @returns - Itself.
     */
    setTextShadow(value) {
        this.removeClass("text-shadow-sm", "text-shadow-md", "text-shadow-lg");
        value && this.addClass(`text-shadow-${value}`);
        return this;
    }
    /**
     * @param {"lowercase" | "uppercase" | "capitalize" | "none"} value - { "lowercase" | "uppercase" | "capitalize" | "none" }
     * @returns {Widget} - Self.
     */
    setTextTransform(value) {
        this.removeClass("lowercase", "uppercase", "capitalize");
        value != null && this.addClass(`text-${value}`);
        return this;
    }
    /**
     * @param {"wrap" | "nowrap" | "none"} value - { "wrap" | "nowrap" | "none" }
     * @returns {Widget} - Self.
     */
    setTextWrap(value) {
        this.removeClass("text-wrap", "text-nowrap");
        value != null && this.addClass(`text-${value}`);
        return this;
    }
    /**
    * Adds tooltip to given position. Existing tooltip will be removed if title is not given.
    * @param title - Default value of the title.
    * @param options
    * @param options.animation - Apply a CSS fade transition to the popover
    * @param options.content - Default value of the body
    * @param options.delay - Delay showing the popover (ms)
    * @param options.placement - How to position the popover { "top" | "bottom" | "right" | "left" | "auto" }
    * @param options.trigger -  How popover is triggered { "click" | "hover" | "focus" | "manual" }
    * @param options.offset - Offset of the popover relative to its target
    * @returns - Itself.
    */
    setTooltip(content, options) {
        var _a, _b, _c, _d, _e, _f, _g;
        this.removeAttribute("data-bs-toggle");
        Popover.getOrCreateInstance(this.getDom()).dispose();
        if (content != null) {
            let opts = {
                content,
                animation: (_a = options === null || options === void 0 ? void 0 : options.animation) !== null && _a !== void 0 ? _a : true,
                delay: { show: (_b = options === null || options === void 0 ? void 0 : options.delay) !== null && _b !== void 0 ? _b : 500, hide: (_c = options === null || options === void 0 ? void 0 : options.hide) !== null && _c !== void 0 ? _c : 0 },
                placement: (_d = options === null || options === void 0 ? void 0 : options.placement) !== null && _d !== void 0 ? _d : "auto",
                title: (_e = options === null || options === void 0 ? void 0 : options.title) !== null && _e !== void 0 ? _e : "",
                trigger: (_f = options === null || options === void 0 ? void 0 : options.trigger) !== null && _f !== void 0 ? _f : "hover",
                offset: (_g = options === null || options === void 0 ? void 0 : options.offset) !== null && _g !== void 0 ? _g : [0, 0]
            };
            this.setAttribute("data-bs-toggle", "popover");
            Popover.getOrCreateInstance(this.getDom(), opts);
            (options === null || options === void 0 ? void 0 : options.onShow) && this.addEventListener("shown.bs.popover", options === null || options === void 0 ? void 0 : options.onShow);
            (options === null || options === void 0 ? void 0 : options.onHide) && this.addEventListener("hidden.bs.popover", options === null || options === void 0 ? void 0 : options.onHide);
        }
        return this;
    }
    /**
     * The top property participates in setting the vertical position of a {@link POSITION | positioned element.} It has no effect on non-positioned elements.
     * @param value
     * @param unit
     * @returns
     */
    setTopPos(value, unit = "px") {
        let val = typeof value === "number" ? value + unit : value;
        this.removeStyle("top");
        value != null && this.setStyle("top", val);
        return this;
    }
    /**
     * The transform CSS property lets you rotate, scale, skew, or translate an element.
     * @param value
     * @returns - Itself.
     */
    setTransform(value) {
        this.removeStyle("transform");
        value != null && this.setStyle("transform", value);
        return this;
    }
    /**
     * Sets width of the widget.
     * @param value
     * @param unit
     * @returns - Itself.
     */
    setWidth(value, unit = "px") {
        this.removeStyle("width");
        let val = typeof value === "number" ? value + unit : value;
        value != null && this.setStyle("width", val);
        return this;
    }
    /**
     * Control the visibility of elements, without modifying their display, with visibility utilities. Invisible widgets still take up space in the page.
     * @param value
     * @returns - Itself.
     */
    setVisibility(value) {
        this.removeClass("invisible");
        if (!value) {
            this.addClass("invisible");
        }
        return this;
    }
    /**
     * Sets z depth of the widget.
     * @param value
     * @returns - Itself.
     */
    setZIndex(value) {
        this.removeStyle("z-index");
        value != null && this.setStyle("z-index", value);
        return this;
    }
    /**
     * Makes the widget visible by modifying display property.
     * @returns - Itself.
     */
    show() {
        this.removeClass("d-none");
        return this;
    }
    /**
     * Shows tooltip.
     * @returns - Itself.
     */
    showTooltip() {
        Popover.getOrCreateInstance(this.getDom()).show();
        return this;
    }
    /**
     * Shrinks on its parent main axis.
     * @param value
     * @param breakpoint
     * @returns - Itself.
     */
    shrink(value = 1, breakpoint) {
        if (value == "clear" || !breakpoint) {
            for (const val of [0, 1]) {
                this.removeClass(`flex-shrink-${val}`);
                for (const bp of BREAKPOINTS) {
                    this.removeClass(`flex-${bp}-shrink-${val}`);
                }
            }
        }
        if (value != "clear") {
            if (breakpoint) {
                this.addClass(`flex-${breakpoint}-shrink-${value}`);
            }
            else {
                this.addClass(`flex-shrink-${value}`);
            }
        }
        return this;
    }
    /**
     * Stretches widget to parent width and height. Margings should not be set to be able to work properly.
     * @param x
     * @param y
     * @returns - Itself.
     */
    stretch(x = 100, y) {
        this.stretchX(x);
        this.stretchY(y !== null && y !== void 0 ? y : x);
        return this;
    }
    /**
     * Stretches widget to parent width. Margings should not be set to be able to work properly.
     * @param value
     * @param breakpoint
     * @returns - Itself.
     */
    stretchX(value = 100, breakpoint) {
        if (value == "none" || !breakpoint) {
            for (const val of [25, 33, 50, 66, 75, 100, "auto"]) {
                this.removeClass(`w-${val}`);
                for (const bp of BREAKPOINTS) {
                    this.removeClass(`w-${bp}-${val}`);
                }
            }
        }
        if (value != "none") {
            if (breakpoint) {
                this.addClass(`w-${breakpoint}-${value}`);
            }
            else {
                this.addClass(`w-${value}`);
            }
        }
        return this;
    }
    /**
     * Stretches widget to parent height. Margings should not be set to be able to work properly.
     * @param value
     * @param breakpoint
     * @returns - Itself.
     */
    stretchY(value = 100, breakpoint) {
        if (value == "none" || !breakpoint) {
            for (const val of [25, 33, 50, 66, 75, 100, "auto"]) {
                this.removeClass(`h-${val}`);
                for (const bp of BREAKPOINTS) {
                    this.removeClass(`h-${bp}-${val}`);
                }
            }
        }
        if (value != "none") {
            if (breakpoint) {
                this.addClass(`h-${breakpoint}-${value}`);
            }
            else {
                this.addClass(`h-${value}`);
            }
        }
        return this;
    }
    /**
     * Prevent long strings of text from breaking your components.
     * @param value
     * @returns Itelf
     */
    textBreak(value = true) {
        this.removeClass("text-break");
        value && this.addClass("text-break");
        return this;
    }
    /**
     * Repositions an element in the horizontal and/or vertical directions
     * @param x
     * @param y
     * @param unit
     * @example
     * ```javascript
     * myWidget.translate(100, 80)
     * ```
     * @returns - Itself.
     */
    translate(x, y, unit = "px") {
        let style = this.getStyle("transform");
        style = style.replace(/translate\([^\(\)]+\)/, "").replace(/\s+/g, " ");
        if (x != null) {
            y = y !== null && y !== void 0 ? y : x;
            style += `translate(${x}${unit}, ${y}${unit})`;
        }
        this.setStyle("transform", style);
        return this;
    }
    /**
     * Applies the transformations translateX(-50%) and translateY(-50%) to the element which,
     * in combination with the edge positioning utilities, allows you to absolute center an element.
     * @param value
     * @returns - Itself.
     */
    translateMiddle(value = "both") {
        this.removeClass("translate-middle", "translate-middle-x", "translate-middle-y");
        value != "clear" && this.addClass("translate-" + (value === "both" ? "middle" : value === "x" ? "middle-x" : "middle-y"));
        return this;
    }
    /**
     * Sets truncate behaviour.
     * @param value
     * @returns - Itself.
     */
    truncateText(value = true) {
        this.setTextWrap();
        this.setTextOverflow();
        this.setOverflow();
        if (value) {
            this.setTextWrap("nowrap");
            this.setTextOverflow('ellipsis');
            this.setOverflow("hidden");
        }
        return this;
    }
    /**
     * Removes keyboard focus from the current element.
     * @returns - Itself.
     */
    unfocus() {
        __classPrivateFieldGet(this, _Widget_elem, "f").blur();
        return this;
    }
}
_Widget_elem = new WeakMap(), _Widget_children = new WeakMap(), _Widget_parent = new WeakMap(), _Widget_listeners = new WeakMap(), _Widget_onclickCallback = new WeakMap();
class Layout extends Widget {
    constructor(type = "row") {
        super("div");
        _Layout_type.set(this, void 0);
        _Layout_stretches.set(this, []);
        _Layout_container.set(this, void 0);
        _Layout_contextMenuListener.set(this, void 0);
        _Layout_scrollToBottomListener.set(this, void 0);
        __classPrivateFieldSet(this, _Layout_type, type, "f");
        this.addClass("d-flex")
            .justifyItems("start")
            .alignItems("center")
            // .setOverflow("hidden")
            .stretch(100, 100);
        if (type == "row") {
            this.row();
        }
        else {
            this.column();
        }
    }
    /**
     * Add fake element to push all other elements to the side. This element won't be added to the children list.
     * @returns - Itself.
     * @example
     * ```javascript
     * const layout = new Row().addChild(new Text("Test"))
     *                         .addStretch();
     * ```
     */
    addStretch() {
        const stretch = new Widget("div");
        stretch.stretch(100, 100);
        this.getDom().appendChild(stretch.getDom());
        __classPrivateFieldGet(this, _Layout_stretches, "f").push(stretch);
        return this;
    }
    /**
     * Removes all fake elements.
     * @returns - Itself.
     * @example
     * ```javascript
     * layout.clearStretches();
     * ```
     */
    clearStretches() {
        let len = __classPrivateFieldGet(this, _Layout_stretches, "f").length;
        for (let i = 0; i < len; i++) {
            this.getDom().removeChild(__classPrivateFieldGet(this, _Layout_stretches, "f")[i].getDom());
        }
        __classPrivateFieldSet(this, _Layout_stretches, [], "f");
        return this;
    }
    /**
     * Aligns this element on the cross axis of parent.
     * @param crossAxis
     * @param breakpoint
     * @returns - Itself.
     */
    alignItems(crossAxis, breakpoint) {
        if (crossAxis && !breakpoint) {
            for (const align of ALIGNS) {
                this.removeClass(`align-items-${align}`);
                for (const bp of BREAKPOINTS) {
                    this.removeClass(`align-items-${bp}-${align}`);
                }
            }
        }
        if (crossAxis) {
            if (breakpoint) {
                this.addClass(`align-items-${breakpoint}-${crossAxis}`);
            }
            else {
                this.addClass(`align-items-${crossAxis}`);
            }
        }
        return this;
    }
    /**
     * Aligns this element on the cross axis of parent.
     * @param mainAxis
     * @param breakpoint
     * @returns - Itself.
     */
    justifyItems(mainAxis, breakpoint) {
        if (mainAxis && !breakpoint) {
            for (const align of JUSTIFIES) {
                this.removeClass(`justify-content-${align}`);
                for (const bp of BREAKPOINTS) {
                    this.removeClass(`justify-content-${bp}-${align}`);
                }
            }
        }
        if (mainAxis) {
            if (breakpoint) {
                this.addClass(`justify-content-${breakpoint}-${mainAxis}`);
            }
            else {
                this.addClass(`justify-content-${mainAxis}`);
            }
        }
        return this;
    }
    /**
     * Adds or removes this element’s borders
     * @param {Object} [parameters]
     * @param {boolean} [parameters.reverse = false]
     * @param {BREAKPOINT} [parameters.breakpoint] - { "sm" | "md" | "lg" | "xl" | "xxl" | "none" }
     * @returns {Widget} - Self.
     */
    column(breakpoint, reverse = false) {
        __classPrivateFieldSet(this, _Layout_type, "row", "f");
        if (!breakpoint) {
            this.removeClass("flex-row", "flex-row-reverse", "flex-column", "flex-column-reverse");
            for (const bp of BREAKPOINTS) {
                this.removeClass(`flex-${bp}-row`, `flex-${bp}-row-reverse`, `flex-${bp}-column`, `flex-${bp}-column-reverse`);
            }
            this.addClass(reverse ? `flex-column-reverse` : `flex-column`);
        }
        else {
            this.addClass(reverse ? `flex-${breakpoint}-column-reverse` : `flex-${breakpoint}-column`);
        }
        return this;
    }
    reverse(breakpoint) {
        if (__classPrivateFieldGet(this, _Layout_type, "f") === "row") {
            this.row(breakpoint, true);
        }
        else {
            this.column(breakpoint, true);
        }
        return this;
    }
    /**
     * Adds or removes this element’s borders
     * @param {Object} [parameters]
     * @param {boolean} [parameters.reverse = false]
     * @param {BREAKPOINT} [parameters.breakpoint] - { "sm" | "md" | "lg" | "xl" | "xxl" | "none" }
     * @returns {Widget} - Self.
     */
    row(breakpoint, reverse = false) {
        __classPrivateFieldSet(this, _Layout_type, "row", "f");
        if (!breakpoint) {
            this.removeClass("flex-row", "flex-row-reverse", "flex-column", "flex-column-reverse");
            for (const bp of BREAKPOINTS) {
                this.removeClass(`flex-${bp}-row`, `flex-${bp}-row-reverse`, `flex-${bp}-column`, `flex-${bp}-column-reverse`);
            }
            this.addClass(reverse ? `flex-row-reverse` : `flex-row`);
        }
        else {
            this.addClass(reverse ? `flex-${breakpoint}-row-reverse` : `flex-${breakpoint}-row`);
        }
        return this;
    }
    snapToBreakpoints(value = true, breakpoint) {
        if (!breakpoint) {
            this.removeClass(`container`);
            for (const bp of BREAKPOINTS) {
                this.removeClass(`container-${bp}`);
            }
        }
        if (value) {
            if (breakpoint) {
                this.addClass(`container-${breakpoint}`);
            }
            else {
                this.addClass(`container`);
            }
        }
        return this;
    }
    /**
     * Enables scroll spy for sub elements.
     * - It must be used on a Nav component or List group.
     * - Scrollspy requires position: relative; on the element you’re spying on.
     * - Anchors required and must point to an element with that id.
     * - If you’re making a scrollable container (other than the <body>), be sure to have a height set and overflow-y: scroll; applied to it—alongside a tabindex="0" to ensure keyboard access.
     *
     * @param {boolean} value
     * @param {object} options
     * @param {string} options.target - ID the parent element of spy controls.
     * @param {string} options.offset - Scroll offset
     * @param {string} options.tabindex
     * @returns {Widget} - Self.
     */
    scrollSpy(value = true, options) {
        const { target, offset, tabindex } = Object.assign({ target: "", offset: 0, tabindex: 0 }, options);
        this.removeAttribute("data-bs-spy", "data-bs-target", "data-bs-offset", "tabindex");
        if (value) {
            this.setAttribute("data-bs-spy", "scroll");
            target && this.setAttribute("data-bs-target", "#" + target);
            this.setAttribute("data-bs-offset", offset + "");
            this.setAttribute("tabindex", tabindex + "");
        }
        return this;
    }
    /**
     * @param {ContextMenu} menu
     * @param {boolean} triggerOnChild - Allows child elements trigger context menu
     * @returns {Widget} - Self.
    */
    setContextMenu(menu) {
        __classPrivateFieldGet(this, _Layout_contextMenuListener, "f") && this.removeEventListener(__classPrivateFieldGet(this, _Layout_contextMenuListener, "f"));
        __classPrivateFieldGet(this, _Layout_container, "f") && document.body.removeChild(__classPrivateFieldGet(this, _Layout_container, "f").getDom());
        if (menu) {
            let container = new Widget("div").setVisibility(false);
            container.setVisibility(true);
            container.setPositioning("absolute");
            container.hide();
            container.addChildren(menu);
            document.body.appendChild(container.getDom());
            let contextMenuListener = (e) => {
                if (e.target !== e.currentTarget)
                    return;
                e.preventDefault();
                let x = e.pageX;
                let y = e.pageY;
                container.setStyle("top", y + "px");
                container.setStyle("left", x + "px");
                container.show();
                menu.addClass("show");
            };
            contextMenuListener.event = "contextmenu";
            this.addEventListener("contextmenu", contextMenuListener);
            document.addEventListener("click", () => {
                container.hide();
            });
            __classPrivateFieldSet(this, _Layout_contextMenuListener, contextMenuListener, "f");
            __classPrivateFieldSet(this, _Layout_container, container, "f");
        }
        return this;
    }
    /**
     * Sets the gap between children.
     * @param {number} value
     * @param {string} [unit="px"]
     * @returns {Widget} - Self.
     */
    setGap(value, unit = "px") {
        this.removeStyle("gap");
        value > 0 && this.setStyle("gap", value + unit);
        return this;
    }
    /**
     * Change how items wrap in a this container.
     * @param {boolean} [value = 1] - { 0 | 1 | "none" }
     * @param {Object} [parameters]
     * @param {BREAKPOINT} [parameters.breakpoint] - { "sm" | "md" | "lg" | "xl" | "xxl" }
     * @param {boolean} [parameters.reverse = false]
     * @returns {Widget} - Self.
     */
    wrapItems(value = true, breakpoint, reverse = false) {
        this.removeClass(`flex-wrap`, `flex-wrap-reverse`);
        for (const bp of BREAKPOINTS) {
            this.removeClass(`flex-${bp}-wrap`, `flex-${bp}-wrap-reverse`);
        }
        if (value) {
            if (breakpoint) {
                this.addClass(reverse ? `flex-${breakpoint}-wrap-reverse` : `flex-${breakpoint}-wrap`);
            }
            else {
                this.addClass(reverse ? `flex--wrap-reverse` : `flex-wrap`);
            }
        }
        return this;
    }
    onScrollToBottom(callback, offset = 0) {
        if (__classPrivateFieldGet(this, _Layout_scrollToBottomListener, "f")) {
            this.removeEventListener(__classPrivateFieldGet(this, _Layout_scrollToBottomListener, "f"));
        }
        if (callback) {
            let reached = false;
            __classPrivateFieldSet(this, _Layout_scrollToBottomListener, (e) => {
                if (this.getScrollTop() + this.getClientHeight() + offset >= this.getScrollHeight() && !reached) {
                    reached = true;
                    callback.bind(this)(this);
                }
                if (this.getScrollTop() + this.getClientHeight() + offset < this.getScrollHeight() && reached) {
                    reached = false;
                }
            }, "f");
            const evnt = isMobileDevice() ? "touchmove" : "wheel";
            __classPrivateFieldGet(this, _Layout_scrollToBottomListener, "f").event = evnt;
            this.addEventListener(evnt, __classPrivateFieldGet(this, _Layout_scrollToBottomListener, "f"));
        }
        return this;
    }
}
_Layout_type = new WeakMap(), _Layout_stretches = new WeakMap(), _Layout_container = new WeakMap(), _Layout_contextMenuListener = new WeakMap(), _Layout_scrollToBottomListener = new WeakMap();
class Row extends Layout {
    constructor() {
        super("row");
    }
}
class Column extends Layout {
    constructor() {
        super("col");
    }
}
class Stack extends Widget {
    constructor() {
        super();
        this.setPositioning("relative");
    }
}
const Router = new (_a = class {
        constructor() {
            _routes.set(this, []);
        }
        add(path, handler) {
            var _a;
            // remove trailing slash and add leading slash
            let cleanPath = path.replace(/\/$/, '').replace(/^\//, '');
            // extract parameters
            let args = (_a = cleanPath.match(/\:([^\/]+)\/?/g)) === null || _a === void 0 ? void 0 : _a.map(arg => arg.replace(/\:|\/?/g, ''));
            // replace args places with regex, so it can match to given path
            let re = `^${path.replace(/\:([^\/]+)\/?/g, "(.*)")}$`;
            let route = __classPrivateFieldGet(this, _routes, "f").find((r) => r.re === re);
            if (route) {
                route.handler = handler;
                route.args = args || [];
            }
            else {
                __classPrivateFieldGet(this, _routes, "f").push({
                    re,
                    args: args || [],
                    handler
                });
            }
            return this;
        }
        parse(path) {
            if (!path.startsWith("http")) {
                if (path.startsWith("/")) {
                    path = location.protocol + "//" + location.host + location.pathname + path + location.search + location.hash;
                }
                else {
                    path = location.protocol + "//" + location.host + "/" + path + location.search + location.hash;
                }
            }
            let url = new URL(path);
            // sanitize
            let pathname = url.pathname.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
            // remove trailing slash and add leading slash
            pathname = pathname.replace(/\/$/, '').replace(/^\//, '');
            let searchParams = {};
            for (const [key, value] of new URLSearchParams(url.search)) {
                searchParams[key] = value;
            }
            let anchor = url.hash;
            for (const route of __classPrivateFieldGet(this, _routes, "f")) {
                let inputs = pathname.match(new RegExp(route.re));
                if (inputs) {
                    inputs.shift();
                    let params = {};
                    for (const arg of route.args) {
                        params[arg] = [...inputs].shift();
                    }
                    return {
                        handler: route.handler,
                        params,
                        searchParams,
                        anchor,
                        path
                    };
                }
            }
        }
        _navigate(path, options) {
            options = Object.assign({ message: undefined, history: true }, options);
            let parsed = this.parse(path);
            if (parsed) {
                if (options.history) {
                    history.pushState(null, "", parsed.path);
                }
                else {
                    history.replaceState(null, "", parsed.path);
                }
                if (parsed.anchor) {
                    let anchor = document.querySelector(parsed.anchor);
                    anchor && anchor.scrollIntoView({ behavior: "auto", block: "start" });
                }
                parsed.handler(Object.assign(Object.assign({ message: options.message }, parsed.params), { searchParams: parsed.searchParams, anchor: parsed.anchor }));
            }
            else {
                // TODO: route to 404 page but what app doeesn't use a router?
                console.log("No route found");
            }
            return this;
        }
        navigate(path, options = { history: true }) {
            const routePathSegments = path.split('/').filter(segment => segment); // remove empty segments
            let segments = "";
            for (let i = 0; i < routePathSegments.length; i++) {
                segments += `/${routePathSegments[i]}`;
                segments = segments.replace(/\/$/, '').replace(/^\//, ''); // remove trailing slash and add leading slash
                let lastSegment = i === routePathSegments.length - 1;
                if (!lastSegment) {
                    this._navigate(segments, { history: false });
                }
            }
            this._navigate(path, options);
        }
    },
    _routes = new WeakMap(),
    _a)();
class Route extends Column {
    constructor(baseRoute = "", defaultRoute) {
        super();
        _Route_baseRoute.set(this, "");
        this.setBaseRoute(baseRoute);
    }
    addRoute(route, element, handler) {
        let rt = __classPrivateFieldGet(this, _Route_baseRoute, "f") + route.replace(/^\//, '').replace(/\/$/, '');
        Router.add(rt, args => {
            this.clearChildren();
            args.self = element();
            this.addChildren(args.self);
            handler && handler(args);
        });
        return this;
    }
    setBaseRoute(route) {
        // remove trailing slash and add leading slash
        route = route.replace(/^\//, '').replace(/\/$/, '');
        __classPrivateFieldSet(this, _Route_baseRoute, route ? route + "/" : "", "f");
        return this;
    }
}
_Route_baseRoute = new WeakMap();
class App extends Route {
    constructor() {
        super();
        _App_onloadCallback.set(this, void 0);
        this.stretch();
        document.body.style.width = "100%";
        document.body.style.height = "100%";
        document.body.style.overflow = "hidden";
        document.body.style.margin = "0";
        document.documentElement.style.height = "100%";
        document.documentElement.style.height = "100%";
        document.documentElement.style.margin = "0";
        document.documentElement.style.overflow = "hidden";
        document.addEventListener('readystatechange', () => {
            if (document.readyState === 'complete') {
                __classPrivateFieldGet(this, _App_onloadCallback, "f") && __classPrivateFieldGet(this, _App_onloadCallback, "f").call(this);
            }
        });
    }
    onLoad(cb) {
        __classPrivateFieldSet(this, _App_onloadCallback, cb, "f");
        return this;
    }
    loadTheme(theme) {
        var _a;
        (_a = document.getElementById("theme")) === null || _a === void 0 ? void 0 : _a.setAttribute("href", `https://unpkg.com/instantui@latest/dist/themes/${theme}.min.css`);
        return this;
    }
    render(dom = document.body) {
        super.render(dom);
        Router.navigate(window.location.pathname.replace(/^\//, '') + window.location.search + window.location.hash, { history: false });
        window.onpopstate = (event) => {
            Router.navigate(window.location.pathname.replace(/^\//, '') + window.location.search + window.location.hash, { history: false });
        };
        return this;
    }
}
_App_onloadCallback = new WeakMap();
class Input extends Widget {
    constructor(type) {
        super(type === "textarea" ? "textarea" : "input");
        _Input_type.set(this, void 0);
        _Input_validationCallback.set(this, void 0);
        _Input_onChangeCallback.set(this, void 0);
        _Input_onInputCallback.set(this, void 0);
        __classPrivateFieldSet(this, _Input_type, type, "f");
        this.addClass("form-control");
        type === "textarea" || this.setProperty("type", type);
        this.setAttribute("name", type + Math.floor(Math.random() * 100000));
    }
    /**
     * Controls whether and how text input is automatically capitalized
     * @param { off | on | words | characters | string } value - Supported types: "url" | "email" | "password"
     */
    setAutocapitalize(value) {
        this.removeAttribute("autocapitalize");
        value != null && this.setAttribute("autocapitalize", value);
        return this;
    }
    /**
     * Whether is automatically capitalized or not
     */
    getAutocapitalize() {
        return this.getAttribute("autocapitalize");
    }
    /**
     * Specifies hint for form autofill feature
     * @param {string} autocomplete - Valid input: "all"
     */
    autocomplete(autocomplete) {
        this.setAttribute("autocomplete", autocomplete);
        return this;
    }
    /**
     * Hint for form autofill feature
     */
    isAutocomplete() {
        return !!this.getAttribute("autocomplete");
    }
    /**
     * Automatically focus the control when the page is loaded
     * @param {boolean} autofocus
     */
    autofocus(autofocus) {
        this.setAttribute("autofocus", autofocus);
        return this;
    }
    /**
     * Focus state
     */
    isAutofocus() {
        return !!this.getAttribute("autofocus");
    }
    /**
     * Specifies the default value of the input
     * @param {any} dv - Valid input: "all"
     */
    serDefaultValue(dv) {
        this.setProperty("defaultValue", dv);
        return this;
    }
    /**
     * Default value of the input
     */
    getDefaultValue() {
        return this.getProperty("defaultValue");
    }
    /**
     * Specifies name of form field to use for sending the element's directionality in form submission
     * @param {string} value - Valid input: "text" | "search"
     */
    setDirname(dirname) {
        this.removeAttribute("dirname");
        dirname && this.setAttribute("dirname", dirname);
        return this;
    }
    /**
     * Name of form field to use for sending the element's directionality in form submission
     */
    getDirname() {
        return this.getAttribute("dirname");
    }
    /**
     * Specifies id of the form that this input element belongs to
     */
    setFormId(formId) {
        this.setAttribute("form", formId);
        return this;
    }
    /**
     * Id of the form element this input element belongs to
     */
    getFormId() {
        return this.getAttribute("form");
    }
    /**
     * Specifies the width (in characters) of an input field
     */
    setInputLength(inputLength) {
        this.setAttribute("size", inputLength);
        return this;
    }
    /**
     * Width (in characters) of an input field
     */
    getInputLength() {
        return this.getAttribute("size");
    }
    /**
     * Specifies the value of the id attribute of the <datalist> of autocomplete options
     * @param {"string"} list - Valid input: almost all
     */
    list(list) {
        this.setAttribute("list", list);
        return this;
    }
    /**
     * Value of the id attribute of the <datalist>
     */
    getList() {
        return this.getAttribute("list");
    }
    /**
     * Specifies the maximum number of character for an input field
     * @param {number} maxLength - Valid input: "password" | "search" | "tel"| "text" | "url"
     */
    maxLength(maxLength) {
        this.setAttribute("maxlength", maxLength);
        return this;
    }
    /**
     * Maximum number of character for an input field
     */
    getMaxLength() {
        var _a;
        return +((_a = this.getAttribute("maxlength")) !== null && _a !== void 0 ? _a : "");
    }
    /**
     * Specifies the minimum number of character for an input field
     * @param {number} minLength - Valid input: "password" | "search" | "tel"| "text" | "url"
     */
    setMinLength(minLength) {
        this.setAttribute("minlength", minLength);
        return this;
    }
    /**
     * Minimum number of character for an input field
     */
    getMinLength() {
        return this.getAttribute("minlength");
    }
    /**
     * Specifies a regular expression to check the input value against
     * @param {string} pattern - Valid input: "password" | "text" | "tel"
     */
    setPattern(pattern) {
        this.setAttribute("pattern", pattern);
        return this;
    }
    /**
     * Regular expression to check the input value against
     */
    getPattern() {
        return this.getAttribute("pattern");
    }
    /**
     * Specifies a short hint that describes the expected value of the input field
     * @param {string} placeholder - Valid input: "password" | "search" | "tel" | "text" | "url"
     */
    setPlaceholder(placeholder) {
        this.setAttribute("placeholder", placeholder);
        return this;
    }
    /**
     * Expected value of the input field
     */
    getPlaceholder() {
        return this.getAttribute("placeholder");
    }
    /**
     * Specifies that an input field is read only (cannot be changed)
     * @param {boolean} readonly - Valid input: almost all
     */
    readonly(readonly) {
        this.setAttribute("readOnly", readonly);
        return this;
    }
    /**
     * Read only state of input value
     */
    isReadonly() {
        return !!this.getAttribute("readOnly");
    }
    /**
     * Specifies that an input field is required (must be filled out)
     * @param {boolean} required - Valid input: almost all
     */
    required(required = true) {
        this.setAttribute("required", required);
        return this;
    }
    /**
     * Required state of input
     */
    isRequired() {
        return !!this.getAttribute("required");
    }
    /**
     * Specifies whether or not to enable spell checking
     * @param {boolean} spellCheck - Valid input: almost all
     */
    spellCheck(spellCheck = true) {
        this.setAttribute("spellcheck", spellCheck);
        return this;
    }
    /**
     * SpellCheck state of input
     */
    isSpellCheck() {
        return !!this.getAttribute("spellcheck");
    }
    /**
    * Specifies the value for the input field
    * @param {any} value - Valid input: all
    */
    setValue(value) {
        this.getDom().value = value;
        return this;
    }
    /**
     * Value of the input field
     * @returns {any} - Valid input: all
     */
    getValue() {
        return this.getDom().value;
    }
    /**
     * Sets the size of button
     * @param {string} inputSize - { "sm" | "md" | "lg" | "none" }
     */
    setInputSize(inputSize) {
        this.removeClass("form-control-sm", "form-control-lg");
        if (inputSize === "sm" || inputSize === "lg") {
            this.addClass("form-control-" + inputSize);
        }
        return this;
    }
    setCustomValidation(callback) {
        __classPrivateFieldSet(this, _Input_validationCallback, callback, "f");
        if (__classPrivateFieldGet(this, _Input_validationCallback, "f")) {
            const inputElm = this.getDom();
            inputElm.addEventListener("input", () => {
                inputElm.setCustomValidity('');
                const res = __classPrivateFieldGet(this, _Input_validationCallback, "f") && __classPrivateFieldGet(this, _Input_validationCallback, "f").call(this, this.getProperty("value"));
                if (res !== true) {
                    inputElm.setCustomValidity(typeof res === "string" ? res : "Invalid input");
                }
            });
            inputElm.addEventListener("submit", () => {
                inputElm.setCustomValidity('');
                const res = __classPrivateFieldGet(this, _Input_validationCallback, "f") && __classPrivateFieldGet(this, _Input_validationCallback, "f").call(this, this.getProperty("value"));
                if (res !== true) {
                    inputElm.setCustomValidity(typeof res === "string" ? res : "Invalid input");
                }
            });
        }
        return this;
    }
    validate() {
        let valid = false;
        if (__classPrivateFieldGet(this, _Input_validationCallback, "f")) {
            const res = __classPrivateFieldGet(this, _Input_validationCallback, "f").call(this, this.getProperty("value"));
            if (typeof res === "string") {
                this.getDom().setCustomValidity(res);
                valid = false;
            }
            else
                valid = !!res;
        }
        else {
            valid = this.getDom().checkValidity();
        }
        if (valid)
            this.addClass("is-valid");
        else
            this.addClass("is-invalid");
        return valid;
    }
    clearValidation() {
        this.removeClass("is-valid", "is-invalid");
        this.getDom().setCustomValidity("");
        return this;
    }
    onChange(callback) {
        if (__classPrivateFieldGet(this, _Input_onChangeCallback, "f")) {
            this.removeEventListener(__classPrivateFieldGet(this, _Input_onChangeCallback, "f"));
            __classPrivateFieldSet(this, _Input_onChangeCallback, undefined, "f");
        }
        if (callback) {
            __classPrivateFieldSet(this, _Input_onChangeCallback, e => {
                callback(this.getValue(), this);
            }, "f");
            __classPrivateFieldGet(this, _Input_onChangeCallback, "f").event = "change";
            this.addEventListener("change", __classPrivateFieldGet(this, _Input_onChangeCallback, "f"));
        }
        return this;
    }
    onInput(callback) {
        if (__classPrivateFieldGet(this, _Input_onInputCallback, "f")) {
            this.removeEventListener(__classPrivateFieldGet(this, _Input_onInputCallback, "f"));
            __classPrivateFieldSet(this, _Input_onInputCallback, undefined, "f");
        }
        if (callback) {
            __classPrivateFieldSet(this, _Input_onInputCallback, e => {
                callback(this.getValue(), this);
            }, "f");
            __classPrivateFieldGet(this, _Input_onInputCallback, "f").event = "input";
            this.addEventListener("input", __classPrivateFieldGet(this, _Input_onInputCallback, "f"));
        }
        return this;
    }
}
_Input_type = new WeakMap(), _Input_validationCallback = new WeakMap(), _Input_onChangeCallback = new WeakMap(), _Input_onInputCallback = new WeakMap();
class Anchor extends Widget {
    constructor(value = "center", unit = "px") {
        super("div");
        this.setPositioning("absolute");
        this.setPosition(value, unit);
    }
}
class Accordion extends Widget {
    /**
     * @param {boolean} [syncronized=true] - Allows only one accordion open at a time.
     */
    constructor(syncronized = true) {
        super("div");
        _Accordion_id.set(this, "accordion" + Math.floor(Math.random() * 100000));
        _Accordion_syncronized.set(this, void 0);
        _Accordion_button.set(this, "end");
        _Accordion_changeCallbacks.set(this, []);
        this.fireChangeEvenet = (expanded, idx, item) => {
            __classPrivateFieldGet(this, _Accordion_changeCallbacks, "f").forEach(callback => {
                callback(expanded, idx, item);
            });
        };
        _Accordion_onChangeCallback.set(this, void 0);
        __classPrivateFieldSet(this, _Accordion_syncronized, syncronized, "f");
        this.addClass("accordion");
        this.stretchX();
        this.setAttribute("id", __classPrivateFieldGet(this, _Accordion_id, "f"));
    }
    addChildren(...args) {
        for (let i = 0; i < args.length; i++) {
            const item = args[i];
            super.addChildren(item);
            item.addChangeCallback((expanded) => {
                let idx = this.getChildren().indexOf(item);
                this.fireChangeEvenet(expanded, idx, item);
            });
        }
        this.syncronized(__classPrivateFieldGet(this, _Accordion_syncronized, "f"));
        return this;
    }
    getChild(idx) {
        return super.getChild(idx);
    }
    /**
     * One accordion will be open at a time.
     * It will be set as syncronized if no parameter given.
     * @param {boolean} [value]
     */
    syncronized(value = true) {
        __classPrivateFieldSet(this, _Accordion_syncronized, value, "f");
        for (const item of this.getChildren()) {
            value ? item.setAccordionId(__classPrivateFieldGet(this, _Accordion_id, "f")) : item.setAccordionId("");
        }
        return this;
    }
    /**
     * It will remove given item
     * @param {Widget} value
     */
    removeChild(item) {
        super.removeChild(item);
        return this;
    }
    /**
     * It will remove given item
     * @param {number} value
     */
    removeChildAt(idx) {
        super.removeChildAt(idx);
        return this;
    }
    clearChildren() {
        super.clearChildren();
        return this;
    }
    flush(value = 1) {
        this.removeClass("accordion-flush");
        value && this.addClass("accordion-flush");
        return this;
    }
    expand(...indices) {
        for (const idx of indices) {
            this.getChild(idx).expand();
        }
        return this;
    }
    showButton(side) {
        if (side !== __classPrivateFieldGet(this, _Accordion_button, "f")) {
            __classPrivateFieldSet(this, _Accordion_button, side, "f");
        }
        return this;
    }
    collapse(...indices) {
        for (const idx of indices) {
            this.getChild(idx).expand(false);
        }
        return this;
    }
    /**
     * Callback will be called when state is changed
     * @param {function(boolean, number, AccordionItem)} callback
     */
    addChangeCallback(callback) {
        __classPrivateFieldGet(this, _Accordion_changeCallbacks, "f").push(callback);
        return this;
    }
    removeChangeCallback(callback) {
        let idx = __classPrivateFieldGet(this, _Accordion_changeCallbacks, "f").indexOf(callback);
        if (idx >= 0) {
            __classPrivateFieldGet(this, _Accordion_changeCallbacks, "f").splice(idx, 1);
        }
        return this;
    }
    clearChangeCallbacks() {
        __classPrivateFieldGet(this, _Accordion_changeCallbacks, "f").length = 0;
        return this;
    }
    onChange(callback) {
        if (__classPrivateFieldGet(this, _Accordion_onChangeCallback, "f")) {
            this.removeChangeCallback(__classPrivateFieldGet(this, _Accordion_onChangeCallback, "f"));
            __classPrivateFieldSet(this, _Accordion_onChangeCallback, undefined, "f");
        }
        if (callback) {
            __classPrivateFieldSet(this, _Accordion_onChangeCallback, callback, "f");
            this.addChangeCallback(__classPrivateFieldGet(this, _Accordion_onChangeCallback, "f"));
        }
        return this;
    }
}
_Accordion_id = new WeakMap(), _Accordion_syncronized = new WeakMap(), _Accordion_button = new WeakMap(), _Accordion_changeCallbacks = new WeakMap(), _Accordion_onChangeCallback = new WeakMap();
class AccordionItem extends Widget {
    constructor(title = "", bodyText = "", startState = false) {
        super("div");
        _AccordionItem_collapseId.set(this, "accordionItem" + Math.floor(Math.random() * 100000));
        _AccordionItem_showButton.set(this, "end");
        _AccordionItem_header.set(this, void 0);
        _AccordionItem_button.set(this, void 0);
        _AccordionItem_collapse.set(this, void 0);
        _AccordionItem_body.set(this, void 0);
        _AccordionItem_changeCallbacks.set(this, []);
        _AccordionItem_fireChangeEvenet.set(this, (expanded) => {
            __classPrivateFieldGet(this, _AccordionItem_changeCallbacks, "f").forEach(callback => {
                callback(expanded);
            });
        });
        _AccordionItem_onChangeCallback.set(this, void 0);
        this.addClass("accordion-item");
        __classPrivateFieldSet(this, _AccordionItem_header, new Widget("h2"), "f");
        __classPrivateFieldGet(this, _AccordionItem_header, "f").addClass("accordion-header");
        {
            __classPrivateFieldSet(this, _AccordionItem_button, new Widget("button"), "f");
            __classPrivateFieldGet(this, _AccordionItem_button, "f").addClass("accordion-button");
            !startState && __classPrivateFieldGet(this, _AccordionItem_button, "f").addClass("collapsed");
            // this.#button.setAttribute("data-bs-target", "#" + this.#collapseId)
            __classPrivateFieldGet(this, _AccordionItem_button, "f").setAttribute("type", "button");
            // this.#button.setAttribute("data-bs-toggle", "collapse")
            __classPrivateFieldGet(this, _AccordionItem_button, "f").setText(title);
            __classPrivateFieldGet(this, _AccordionItem_header, "f").addChildren(__classPrivateFieldGet(this, _AccordionItem_button, "f"));
        }
        __classPrivateFieldSet(this, _AccordionItem_collapse, new Widget("div"), "f");
        __classPrivateFieldGet(this, _AccordionItem_collapse, "f").addClass("accordion-collapse", "collapse");
        startState && __classPrivateFieldGet(this, _AccordionItem_collapse, "f").addClass("show");
        __classPrivateFieldGet(this, _AccordionItem_collapse, "f").setAttribute("id", __classPrivateFieldGet(this, _AccordionItem_collapseId, "f"));
        {
            __classPrivateFieldSet(this, _AccordionItem_body, new Widget("div").setText(bodyText), "f");
            __classPrivateFieldGet(this, _AccordionItem_body, "f").addClass("accordion-body");
            __classPrivateFieldGet(this, _AccordionItem_collapse, "f").addChildren(__classPrivateFieldGet(this, _AccordionItem_body, "f"));
        }
        this.addChildren(__classPrivateFieldGet(this, _AccordionItem_header, "f"), __classPrivateFieldGet(this, _AccordionItem_collapse, "f"));
        __classPrivateFieldGet(this, _AccordionItem_button, "f").addEventListener("click", e => {
            e.stopPropagation();
            const collapse = bootstrap_esm_Collapse.getOrCreateInstance(__classPrivateFieldGet(this, _AccordionItem_collapse, "f").getDom(), { toggle: false });
            if (__classPrivateFieldGet(this, _AccordionItem_button, "f").hasClass("collapsed")) {
                collapse.show();
                __classPrivateFieldGet(this, _AccordionItem_button, "f").removeClass("collapsed");
            }
            else {
                collapse.hide();
                __classPrivateFieldGet(this, _AccordionItem_button, "f").addClass("collapsed");
            }
        });
        this.addEventListener("shown.bs.collapse", (e) => {
            __classPrivateFieldGet(this, _AccordionItem_fireChangeEvenet, "f").call(this, true);
        });
        this.addEventListener("hidden.bs.collapse", (e) => {
            __classPrivateFieldGet(this, _AccordionItem_fireChangeEvenet, "f").call(this, false);
        });
    }
    setAccordionId(accordionId) {
        __classPrivateFieldGet(this, _AccordionItem_collapse, "f").removeAttribute("data-bs-parent");
        accordionId && __classPrivateFieldGet(this, _AccordionItem_collapse, "f").setAttribute("data-bs-parent", "#" + accordionId);
    }
    // it needs to be loaded in the scene to be able work
    expand(value = true) {
        __classPrivateFieldGet(this, _AccordionItem_button, "f").addClass("collapsed");
        __classPrivateFieldGet(this, _AccordionItem_collapse, "f").removeClass("show");
        if (value) {
            __classPrivateFieldGet(this, _AccordionItem_button, "f").removeClass("collapsed");
            __classPrivateFieldGet(this, _AccordionItem_collapse, "f").addClass("show");
        }
        return this;
    }
    showButton(side) {
        if (side !== __classPrivateFieldGet(this, _AccordionItem_showButton, "f")) {
            __classPrivateFieldSet(this, _AccordionItem_showButton, side, "f");
        }
        return this;
    }
    setTitleAttr(title) {
        __classPrivateFieldGet(this, _AccordionItem_button, "f").setText(title);
        return this;
    }
    setTitle(title = "") {
        __classPrivateFieldGet(this, _AccordionItem_button, "f").setText(title);
        return this;
    }
    setHeaderContent(content) {
        __classPrivateFieldGet(this, _AccordionItem_button, "f").clearChildren();
        content && __classPrivateFieldGet(this, _AccordionItem_button, "f").setChild(content);
        return this;
    }
    getHeaderContent() {
        return __classPrivateFieldGet(this, _AccordionItem_header, "f").getChildren().length ? __classPrivateFieldGet(this, _AccordionItem_header, "f").getChild(0) : undefined;
    }
    setBodyText(text = "") {
        __classPrivateFieldGet(this, _AccordionItem_body, "f").setText(text);
        return this;
    }
    setBodyContent(content) {
        __classPrivateFieldGet(this, _AccordionItem_body, "f").clearChildren();
        content && __classPrivateFieldGet(this, _AccordionItem_body, "f").setChild(content);
        return this;
    }
    getBodyContent() {
        return __classPrivateFieldGet(this, _AccordionItem_body, "f").getChildren().length ? __classPrivateFieldGet(this, _AccordionItem_body, "f").getChild(0) : undefined;
    }
    /**
     * Callback will be called when state is changed
     * @param {function(Widget, boolean)} callback
     */
    addChangeCallback(callback) {
        __classPrivateFieldGet(this, _AccordionItem_changeCallbacks, "f").push(callback);
        return this;
    }
    removeChangeCallback(callback) {
        let idx = __classPrivateFieldGet(this, _AccordionItem_changeCallbacks, "f").indexOf(callback);
        if (idx >= 0) {
            __classPrivateFieldGet(this, _AccordionItem_changeCallbacks, "f").splice(idx, 1);
        }
        return this;
    }
    clearChangeCallbacks() {
        __classPrivateFieldGet(this, _AccordionItem_changeCallbacks, "f").length = 0;
        return this;
    }
    onChange(callback) {
        if (__classPrivateFieldGet(this, _AccordionItem_onChangeCallback, "f")) {
            this.removeChangeCallback(__classPrivateFieldGet(this, _AccordionItem_onChangeCallback, "f"));
            __classPrivateFieldSet(this, _AccordionItem_onChangeCallback, undefined, "f");
        }
        if (callback) {
            __classPrivateFieldSet(this, _AccordionItem_onChangeCallback, callback, "f");
            this.addChangeCallback(__classPrivateFieldGet(this, _AccordionItem_onChangeCallback, "f"));
        }
        return this;
    }
}
_AccordionItem_collapseId = new WeakMap(), _AccordionItem_showButton = new WeakMap(), _AccordionItem_header = new WeakMap(), _AccordionItem_button = new WeakMap(), _AccordionItem_collapse = new WeakMap(), _AccordionItem_body = new WeakMap(), _AccordionItem_changeCallbacks = new WeakMap(), _AccordionItem_fireChangeEvenet = new WeakMap(), _AccordionItem_onChangeCallback = new WeakMap();
class Alert extends Widget {
    constructor(text = "", color = "primary", dismissible = true) {
        super("div");
        _Alert_color.set(this, void 0);
        _Alert_button.set(this, void 0);
        this.addClass("alert", "alert-dismissible", "fade", "show");
        this.setAttribute("role", "alert");
        this.setText(text);
        this.setColor(color);
        __classPrivateFieldSet(this, _Alert_button, new Widget("button"), "f");
        __classPrivateFieldGet(this, _Alert_button, "f").addClass("btn-close");
        __classPrivateFieldGet(this, _Alert_button, "f").setAttribute("type", "button");
        __classPrivateFieldGet(this, _Alert_button, "f").setAttribute("aria-label", "Close");
        __classPrivateFieldGet(this, _Alert_button, "f").setAttribute("data-bs-dismiss", "alert");
        dismissible && this.addChildren(__classPrivateFieldGet(this, _Alert_button, "f"));
    }
    /**
     * Sets the color of alert.
     * @param value - primary, secondary, success, danger, warning, info, light, dark
     */
    setColor(value) {
        this.removeClass(`alert-${__classPrivateFieldGet(this, _Alert_color, "f")}`);
        __classPrivateFieldSet(this, _Alert_color, value, "f");
        this.addClass(`alert-${__classPrivateFieldGet(this, _Alert_color, "f")}`);
        return this;
    }
    getColor() {
        return __classPrivateFieldGet(this, _Alert_color, "f");
    }
    dismissible(value) {
        this.removeChild(__classPrivateFieldGet(this, _Alert_button, "f"));
        value && this.addChildren(__classPrivateFieldGet(this, _Alert_button, "f"));
        return this;
    }
    close() {
        bootstrap_esm_Alert.getOrCreateInstance(this.getDom()).close();
        return this;
    }
    dispose() {
        bootstrap_esm_Alert.getOrCreateInstance(this.getDom()).dispose();
        return this;
    }
    onClose(callback) {
        this.getDom().addEventListener("close.bs.alert", callback);
        return this;
    }
    onClosed(callback) {
        this.getDom().addEventListener("closed.bs.alert", callback);
        return this;
    }
}
_Alert_color = new WeakMap(), _Alert_button = new WeakMap();
class Badge extends Widget {
    constructor(value = 0) {
        super("span");
        _Badge_value.set(this, void 0);
        _Badge_color.set(this, void 0);
        __classPrivateFieldSet(this, _Badge_value, value, "f");
        this.addClass("badge");
        this.setText(value + "");
        this.setStyle("font-size", "inherit");
        this.setStyle("font-weight", "inherit");
        this.setColor("primary");
    }
    getValue() {
        return __classPrivateFieldGet(this, _Badge_value, "f");
    }
    setValue(value) {
        __classPrivateFieldSet(this, _Badge_value, value, "f");
        this.setText(__classPrivateFieldGet(this, _Badge_value, "f") + "");
        return this;
    }
    isRound() {
        return this.hasClass("rounded-pill");
    }
    rounded() {
        this.addClass("rounded-pill");
        return this;
    }
    cornered() {
        this.removeClass("rounded-pill");
        return this;
    }
    /**
     * Sets the color of badge.
     * @param value - primary, secondary, success, danger, warning, info, light, dark
     */
    setColor(value) {
        this.removeClass(`bg-${__classPrivateFieldGet(this, _Badge_color, "f")}`);
        __classPrivateFieldSet(this, _Badge_color, value, "f");
        this.addClass(`bg-${__classPrivateFieldGet(this, _Badge_color, "f")}`);
        return this;
    }
    getColor() {
        return __classPrivateFieldGet(this, _Badge_color, "f");
    }
}
_Badge_value = new WeakMap(), _Badge_color = new WeakMap();
var Body = new Widget(document.body);
Body.render = function () {
    return Body;
};
class Breadcrumb extends Widget {
    constructor() {
        super("nav");
        _Breadcrumb_breadcrumb.set(this, void 0);
        __classPrivateFieldSet(this, _Breadcrumb_breadcrumb, new Widget("ol")
            .addClass("breadcrumb"), "f");
        super.addChildren(__classPrivateFieldGet(this, _Breadcrumb_breadcrumb, "f"));
    }
    setDividerCharacter(divider) {
        this.setAttribute("style", `--bs-breadcrumb-divider: '${divider}';`);
        return this;
    }
    addChildren(...args) {
        let items = [...args].map((link) => {
            link.removeClass("link");
            return new Widget("li").addClass("breadcrumb-item").addChildren(link);
        });
        __classPrivateFieldGet(this, _Breadcrumb_breadcrumb, "f").addChildren(...items);
        this.applyActiveListener(...args);
        return this;
    }
    ;
    clearChildren() {
        __classPrivateFieldGet(this, _Breadcrumb_breadcrumb, "f").clearChildren();
        return this;
    }
    ;
    getChild(idx) {
        return __classPrivateFieldGet(this, _Breadcrumb_breadcrumb, "f").getChild(idx).getChild(0);
    }
    ;
    getChildren() {
        return __classPrivateFieldGet(this, _Breadcrumb_breadcrumb, "f").getChildren().map(link => link);
    }
    ;
    removeChild(...args) {
        let matchItems = [];
        __classPrivateFieldGet(this, _Breadcrumb_breadcrumb, "f").getChildren().forEach(item => {
            [...args].forEach(link => {
                item.getChild(0) === link && matchItems.push(item);
            });
        });
        __classPrivateFieldGet(this, _Breadcrumb_breadcrumb, "f").removeChild(...matchItems);
        return this;
    }
    ;
    replaceChild(link, idx) {
        __classPrivateFieldGet(this, _Breadcrumb_breadcrumb, "f").getChild(idx).setChild(link);
        this.applyActiveListener(link);
        return this;
    }
    ;
    setChild(...args) {
        let items = [...args].map((link) => {
            link.removeClass("link");
            return new Widget("li").addClass("breadcrumb-item").addChildren(link);
        });
        __classPrivateFieldGet(this, _Breadcrumb_breadcrumb, "f").setChild(...items);
        this.applyActiveListener(...args);
        return this;
    }
    ;
    setActive(activeLink) {
        var _a, _b;
        __classPrivateFieldGet(this, _Breadcrumb_breadcrumb, "f").getChildren().forEach(item => {
            let childLink = item.getChild(0);
            item.removeClass("active");
            childLink.show();
            item.setText("");
        });
        if (typeof activeLink === "number") {
            activeLink = __classPrivateFieldGet(this, _Breadcrumb_breadcrumb, "f").getChild(activeLink).getChild(0);
        }
        (_a = activeLink.getParent()) === null || _a === void 0 ? void 0 : _a.addClass("active");
        activeLink.hide();
        (_b = activeLink.getParent()) === null || _b === void 0 ? void 0 : _b.setText(activeLink.getText());
        return this;
    }
    applyActiveListener(...args) {
        args.forEach(link => {
            link.addEventListener("click", () => {
                this.setActive(link);
            });
        });
        return this;
    }
}
_Breadcrumb_breadcrumb = new WeakMap();
class instantui_Button extends Widget {
    constructor(text = "", color = "primary") {
        super("button");
        _Button_color.set(this, void 0);
        this.setAttribute("type", "button");
        this.addClass("btn");
        this.setText(text);
        this.setTextWrap("nowrap");
        this.setColor(color);
    }
    /**
     * Sets the color of button.
     * @param value - primary, secondary, success, danger, warning, info, light, dark
     */
    setColor(value) {
        this.removeClass(`btn-${__classPrivateFieldGet(this, _Button_color, "f")}`);
        __classPrivateFieldSet(this, _Button_color, value, "f");
        this.addClass(`btn-${__classPrivateFieldGet(this, _Button_color, "f")}`);
        return this;
    }
    getColor() {
        return __classPrivateFieldGet(this, _Button_color, "f");
    }
    /**
     * Specifies the type of button.
     * @param {"button" | "submit" | "reset"} value
     */
    setActionType(type) {
        this.setAttribute("type", type);
        return this;
    }
    /**
     * Type of the button.
     * @returns {string}
     */
    getTypeAttr() {
        this.getAttribute("type");
    }
    /**
     * Removes all background images and colors.
     * @param {boolean} value
     */
    setOutlined(value = true) {
        this.removeClass(`btn-${__classPrivateFieldGet(this, _Button_color, "f")}`, `btn-outline-${__classPrivateFieldGet(this, _Button_color, "f")}`);
        value && this.addClass(`btn-outline-${__classPrivateFieldGet(this, _Button_color, "f")}`);
        return this;
    }
    /**
     * Sets the size of button
     * @param {string} size - { "sm" | "md" | "lg" | "none" }
     */
    setButtonSize(size) {
        this.removeClass("btn-sm", "btn-lg");
        if (size === "sm" || size === "lg") {
            this.addClass("btn-" + size);
        }
        return this;
    }
    /**
     * Replaces all childs of the button with given one. Leaving empty or passing null clears content.
     * @param {Widget} content
     */
    setContent(content) {
        this.clearChildren();
        content && this.setChild(content);
        return this;
    }
    getContent() {
        return this.getChild(0);
    }
}
_Button_color = new WeakMap();
class ButtonGroup extends Widget {
    /** Groups button components */
    constructor() {
        super("div");
        _ButtonGroup_id.set(this, "buttonGroup" + Math.floor(Math.random() * 100000));
        _ButtonGroup_truncate.set(this, true);
        _ButtonGroup_changeCallbacks.set(this, []);
        _ButtonGroup_onChangeCallback.set(this, void 0);
        this.addClass("btn-group");
        this.setAttribute("role", "group");
    }
    addChildren(...args) {
        for (let i = 0; i < args.length; i++) {
            const child = args[i];
            if (child.setGroupName) {
                child.setGroupName(__classPrivateFieldGet(this, _ButtonGroup_id, "f"));
            }
            if (child instanceof instantui_Button) {
                child.addEventListener("click", () => {
                    let idx = this.getChildren().indexOf(child);
                    __classPrivateFieldGet(this, _ButtonGroup_changeCallbacks, "f").forEach(callback => {
                        callback(false, idx, child);
                    });
                });
            }
            if (child instanceof ToggleButton ||
                child instanceof RadioButton ||
                child instanceof Radio ||
                child instanceof Checkbox) {
                child.addChangeCallback((val, elm) => {
                    let idx = this.getChildren().indexOf(child);
                    __classPrivateFieldGet(this, _ButtonGroup_changeCallbacks, "f").forEach(callback => {
                        callback(val, idx, child);
                    });
                });
            }
            if (__classPrivateFieldGet(this, _ButtonGroup_truncate, "f")) {
                child.truncateText();
            }
            super.addChildren(child);
        }
        return this;
    }
    vertical() {
        this.removeClass("btn-group", "btn-group-vertical");
        this.addClass("btn-group-vertical");
        return this;
    }
    horizontal() {
        this.removeClass("btn-group-vertical");
        this.addClass("btn-group");
        return this;
    }
    /**
     * Sets the size of button
     * @param {string} size { "sm" | "md" | "lg" | "none" }
     */
    setGroupSize(size) {
        this.removeClass("btn-group-sm", "btn-group-lg");
        if (size === "sm" || size === "lg") {
            this.addClass("btn-group-" + size);
        }
        return this;
    }
    truncateText(value = true) {
        __classPrivateFieldSet(this, _ButtonGroup_truncate, value, "f");
        this.getChildren().forEach(child => { child.truncateText(value); });
        return this;
    }
    /**
     * Callback will be called when state is changed
     * @param {callback} callback
     * @param {boolean} callback.value
     * @param {number} callback.idx
     * @param {Widget} callback.element
     */
    addChangeCallback(callback) {
        __classPrivateFieldGet(this, _ButtonGroup_changeCallbacks, "f").push(callback);
        return this;
    }
    removeChangeCallback(callback) {
        let idx = __classPrivateFieldGet(this, _ButtonGroup_changeCallbacks, "f").indexOf(callback);
        if (idx >= 0) {
            __classPrivateFieldGet(this, _ButtonGroup_changeCallbacks, "f").splice(idx, 1);
        }
        return this;
    }
    clearChangeCallbacks() {
        __classPrivateFieldGet(this, _ButtonGroup_changeCallbacks, "f").length = 0;
        return this;
    }
    onChange(callback) {
        if (__classPrivateFieldGet(this, _ButtonGroup_onChangeCallback, "f")) {
            this.removeChangeCallback(__classPrivateFieldGet(this, _ButtonGroup_onChangeCallback, "f"));
            __classPrivateFieldSet(this, _ButtonGroup_onChangeCallback, undefined, "f");
        }
        if (callback) {
            __classPrivateFieldSet(this, _ButtonGroup_onChangeCallback, callback, "f");
            this.addChangeCallback(__classPrivateFieldGet(this, _ButtonGroup_onChangeCallback, "f"));
        }
        return this;
    }
}
_ButtonGroup_id = new WeakMap(), _ButtonGroup_truncate = new WeakMap(), _ButtonGroup_changeCallbacks = new WeakMap(), _ButtonGroup_onChangeCallback = new WeakMap();
class Blockquote extends Widget {
    constructor(text = "", source = "") {
        super("p");
        this.addClass(`blockquote`);
        this.addChildren(new Widget("p").setText(text), new Widget("footer").addClass("blockquote-footer").setText(source));
    }
}
class Carousel extends Widget {
    constructor() {
        super("div");
        _Carousel_id.set(this, "carousel" + Math.floor(Math.random() * 100000));
        _Carousel_inner.set(this, void 0);
        _Carousel_indicators.set(this, void 0);
        _Carousel_prevButton.set(this, void 0);
        _Carousel_nextButton.set(this, void 0);
        _Carousel_activeIdx.set(this, 0);
        _Carousel_interval.set(this, 3000);
        _Carousel_keyboard.set(this, true);
        _Carousel_pause.set(this, false);
        _Carousel_wrap.set(this, true);
        _Carousel_ride.set(this, true);
        _Carousel_touch.set(this, true);
        _Carousel_withControls.set(this, true);
        _Carousel_withIndicators.set(this, true);
        this.addClass("carousel", "slide", "w-100").setOverflow("hidden").setAttribute("data-bs-ride", "carousel").setAttribute("id", __classPrivateFieldGet(this, _Carousel_id, "f"));
        __classPrivateFieldSet(this, _Carousel_indicators, new Widget("div").addClass("carousel-indicators"), "f");
        __classPrivateFieldSet(this, _Carousel_inner, new Widget("div").addClass("carousel-inner"), "f");
        __classPrivateFieldSet(this, _Carousel_prevButton, new Widget("button")
            .addClass("carousel-control-prev")
            .setAttribute("type", "button")
            .setAttribute("data-bs-target", "#" + __classPrivateFieldGet(this, _Carousel_id, "f"))
            .setAttribute("data-bs-slide", "prev")
            .addChildren(new Widget("span").addClass("carousel-control-prev-icon"), new Widget("span").addClass("visually-hidden").setText("Previous")), "f");
        // .addEventListener("click", () => this.prev())
        __classPrivateFieldSet(this, _Carousel_nextButton, new Widget("button")
            .addClass("carousel-control-next")
            .setAttribute("type", "button")
            .setAttribute("data-bs-target", "#" + __classPrivateFieldGet(this, _Carousel_id, "f"))
            .setAttribute("data-bs-slide", "next")
            .addChildren(new Widget("span").addClass("carousel-control-next-icon"), new Widget("span").addClass("visually-hidden").setText("Next")), "f");
        // .addEventListener("click", () => this.next())
        super.addChildren(__classPrivateFieldGet(this, _Carousel_inner, "f"), __classPrivateFieldGet(this, _Carousel_prevButton, "f"), __classPrivateFieldGet(this, _Carousel_nextButton, "f"));
        this.controls(__classPrivateFieldGet(this, _Carousel_withControls, "f"));
        this.indicators(__classPrivateFieldGet(this, _Carousel_withIndicators, "f"));
        this.updateBs();
    }
    setActive(idx) {
        __classPrivateFieldSet(this, _Carousel_activeIdx, idx, "f");
        let children = this.getChildren();
        idx = Math.min(idx, children.length - 1);
        for (const i in children) {
            children[+i].setActive(+i === idx);
        }
        return this;
    }
    addChildren(...args) {
        __classPrivateFieldGet(this, _Carousel_inner, "f").addChildren(...args);
        this.setActive(__classPrivateFieldGet(this, _Carousel_activeIdx, "f"));
        this.indicators(__classPrivateFieldGet(this, _Carousel_withIndicators, "f"));
        return this;
    }
    ;
    clearChildren() {
        __classPrivateFieldGet(this, _Carousel_inner, "f").clearChildren();
        this.setActive(__classPrivateFieldGet(this, _Carousel_activeIdx, "f"));
        this.indicators(__classPrivateFieldGet(this, _Carousel_withIndicators, "f"));
        return this;
    }
    ;
    getChild(idx) {
        return __classPrivateFieldGet(this, _Carousel_inner, "f").getChild(idx);
    }
    ;
    getChildren() {
        return __classPrivateFieldGet(this, _Carousel_inner, "f").getChildren();
    }
    ;
    removeChild(...args) {
        __classPrivateFieldGet(this, _Carousel_inner, "f").removeChild(...args);
        this.setActive(__classPrivateFieldGet(this, _Carousel_activeIdx, "f"));
        this.indicators(__classPrivateFieldGet(this, _Carousel_withIndicators, "f"));
        return this;
    }
    ;
    replaceChild(child, idx) {
        __classPrivateFieldGet(this, _Carousel_inner, "f").replaceChild(child, idx);
        this.setActive(__classPrivateFieldGet(this, _Carousel_activeIdx, "f"));
        this.indicators(__classPrivateFieldGet(this, _Carousel_withIndicators, "f"));
        return this;
    }
    ;
    setChild(...args) {
        __classPrivateFieldGet(this, _Carousel_inner, "f").setChild(...args);
        this.setActive(__classPrivateFieldGet(this, _Carousel_activeIdx, "f"));
        this.indicators(__classPrivateFieldGet(this, _Carousel_withIndicators, "f"));
        return this;
    }
    ;
    controls(value = true) {
        __classPrivateFieldSet(this, _Carousel_withControls, value, "f");
        if (value) {
            __classPrivateFieldGet(this, _Carousel_prevButton, "f").show();
            __classPrivateFieldGet(this, _Carousel_nextButton, "f").show();
        }
        else {
            __classPrivateFieldGet(this, _Carousel_prevButton, "f").hide();
            __classPrivateFieldGet(this, _Carousel_nextButton, "f").hide();
        }
        return this;
    }
    indicators(value = true) {
        __classPrivateFieldSet(this, _Carousel_withIndicators, value, "f");
        __classPrivateFieldGet(this, _Carousel_indicators, "f").clearChildren();
        super.removeChild(__classPrivateFieldGet(this, _Carousel_indicators, "f"));
        if (value) {
            const children = __classPrivateFieldGet(this, _Carousel_inner, "f").getChildren();
            for (let i = 0; i < children.length; i++) {
                let button = new Widget("button")
                    .setAttribute("type", "button")
                    .setAttribute("data-bs-target", "#" + __classPrivateFieldGet(this, _Carousel_id, "f"))
                    .setAttribute("data-bs-slide-to", i.toString());
                children[i].hasClass("active") && button.addClass("active");
                // .addEventListener("click", () => this.to(i))
                __classPrivateFieldGet(this, _Carousel_indicators, "f").addChildren(button);
            }
            this.insertChild(0, __classPrivateFieldGet(this, _Carousel_indicators, "f"));
        }
        return this;
    }
    crossfade(value = true) {
        this.removeClass("carousel-fade");
        value && this.addClass("carousel-fade");
        return this;
    }
    dark(value = true) {
        this.removeClass("carousel-dark");
        value && this.addClass("carousel-dark");
        return this;
    }
    setInterval(ms) {
        __classPrivateFieldSet(this, _Carousel_interval, ms, "f");
        return this;
    }
    keyboard(value) {
        __classPrivateFieldSet(this, _Carousel_keyboard, value, "f");
        return this;
    }
    setPause(value) {
        __classPrivateFieldSet(this, _Carousel_pause, value, "f");
        return this;
    }
    wrap(value) {
        __classPrivateFieldSet(this, _Carousel_wrap, value, "f");
        return this;
    }
    setRide(value) {
        __classPrivateFieldSet(this, _Carousel_ride, value, "f");
        return this;
    }
    touch(value) {
        __classPrivateFieldSet(this, _Carousel_touch, value, "f");
        return this;
    }
    updateBs() {
        bootstrap_esm_Carousel.getOrCreateInstance(this.getDom(), {
            interval: __classPrivateFieldGet(this, _Carousel_interval, "f"),
            keyboard: __classPrivateFieldGet(this, _Carousel_keyboard, "f"),
            pause: __classPrivateFieldGet(this, _Carousel_pause, "f"),
            ride: __classPrivateFieldGet(this, _Carousel_ride, "f"),
            wrap: __classPrivateFieldGet(this, _Carousel_wrap, "f"),
            touch: __classPrivateFieldGet(this, _Carousel_touch, "f"),
        });
    }
    cycle() {
        bootstrap_esm_Carousel.getOrCreateInstance(this.getDom()).cycle();
        return this;
    }
    pause() {
        bootstrap_esm_Carousel.getOrCreateInstance(this.getDom()).pause();
        return this;
    }
    prev() {
        bootstrap_esm_Carousel.getOrCreateInstance(this.getDom()).cycprevle();
        return this;
    }
    next() {
        bootstrap_esm_Carousel.getOrCreateInstance(this.getDom()).next();
        return this;
    }
    nextWhenVisible() {
        bootstrap_esm_Carousel.getOrCreateInstance(this.getDom()).nextWhenVisible();
        return this;
    }
    to(idx) {
        bootstrap_esm_Carousel.getOrCreateInstance(this.getDom()).to(idx);
        return this;
    }
    dispose() {
        bootstrap_esm_Carousel.getOrCreateInstance(this.getDom()).dispose();
        return this;
    }
    onSlide(callback) {
        this.getDom().addEventListener("slide.bs.carousel", callback);
        return this;
    }
    onSlid(callback) {
        this.getDom().addEventListener("slid.bs.carousel", callback);
        return this;
    }
}
_Carousel_id = new WeakMap(), _Carousel_inner = new WeakMap(), _Carousel_indicators = new WeakMap(), _Carousel_prevButton = new WeakMap(), _Carousel_nextButton = new WeakMap(), _Carousel_activeIdx = new WeakMap(), _Carousel_interval = new WeakMap(), _Carousel_keyboard = new WeakMap(), _Carousel_pause = new WeakMap(), _Carousel_wrap = new WeakMap(), _Carousel_ride = new WeakMap(), _Carousel_touch = new WeakMap(), _Carousel_withControls = new WeakMap(), _Carousel_withIndicators = new WeakMap();
class CarouselItem extends Widget {
    constructor() {
        super("div");
        _CarouselItem_image.set(this, void 0);
        _CarouselItem_captionHeader.set(this, void 0);
        _CarouselItem_captionBody.set(this, void 0);
        this.addClass("carousel-item");
        const captionWrap = new Widget("div").addClass("carousel-caption", "d-block");
        __classPrivateFieldSet(this, _CarouselItem_captionHeader, new Widget("h5"), "f");
        __classPrivateFieldSet(this, _CarouselItem_captionBody, new Widget("p"), "f");
        captionWrap.addChildren(__classPrivateFieldGet(this, _CarouselItem_captionHeader, "f"), __classPrivateFieldGet(this, _CarouselItem_captionBody, "f"));
        this.addChildren(captionWrap);
    }
    setActive(value = true) {
        this.removeClass("active");
        value && this.addClass("active");
        return this;
    }
    getImage() {
        return __classPrivateFieldGet(this, _CarouselItem_image, "f");
    }
    setImage(image) {
        __classPrivateFieldGet(this, _CarouselItem_image, "f") && this.removeChild(__classPrivateFieldGet(this, _CarouselItem_image, "f"));
        __classPrivateFieldSet(this, _CarouselItem_image, image, "f");
        if (__classPrivateFieldGet(this, _CarouselItem_image, "f")) {
            __classPrivateFieldGet(this, _CarouselItem_image, "f").addClass("d-block", "w-100");
            this.insertChild(0, __classPrivateFieldGet(this, _CarouselItem_image, "f"));
        }
        return this;
    }
    getCaptionHeader() {
        return __classPrivateFieldGet(this, _CarouselItem_captionHeader, "f").getText();
    }
    setCaptionHeader(text) {
        __classPrivateFieldGet(this, _CarouselItem_captionHeader, "f").setText(text);
        return this;
    }
    getCaptionBody() {
        return __classPrivateFieldGet(this, _CarouselItem_captionBody, "f").getText();
    }
    setCaptionBody(text) {
        __classPrivateFieldGet(this, _CarouselItem_captionBody, "f").setText(text);
        return this;
    }
}
_CarouselItem_image = new WeakMap(), _CarouselItem_captionHeader = new WeakMap(), _CarouselItem_captionBody = new WeakMap();
class Card extends Widget {
    constructor(options) {
        super("div");
        _Card_header.set(this, new Widget("div"));
        _Card_image.set(this, new Widget("div"));
        _Card_body.set(this, new Widget("div"));
        _Card_footer.set(this, new Widget("div"));
        _Card_bodyContent.set(this, new Widget("div"));
        _Card_bodyTitle.set(this, new Widget("h5"));
        _Card_bodySubtitle.set(this, new Widget("h6"));
        _Card_bodyText.set(this, new Widget("p"));
        const { headerTitle, image, bodyTitle, bodySubtitle, bodyText, footerTitle, width } = Object.assign({ headerTitle: "", bodyTitle: "", bodySubtitle: "", bodyText: "", footerTitle: "" }, options);
        this.addClass("card");
        __classPrivateFieldGet(this, _Card_header, "f").addClass("card-header");
        __classPrivateFieldGet(this, _Card_header, "f").setText(headerTitle);
        this.addChildren(__classPrivateFieldGet(this, _Card_header, "f"));
        __classPrivateFieldGet(this, _Card_image, "f").addClass("card-img-top").setOverflow("hidden");
        this.addChildren(__classPrivateFieldGet(this, _Card_image, "f"));
        if (image) {
            __classPrivateFieldGet(this, _Card_image, "f").setChild(image);
        }
        __classPrivateFieldGet(this, _Card_body, "f").addClass("card-body");
        this.addChildren(__classPrivateFieldGet(this, _Card_body, "f"));
        {
            __classPrivateFieldGet(this, _Card_body, "f").addChildren(__classPrivateFieldGet(this, _Card_bodyContent, "f"));
            {
                __classPrivateFieldGet(this, _Card_bodyTitle, "f").addClass("card-title");
                __classPrivateFieldGet(this, _Card_bodyTitle, "f").setText(bodyTitle);
                __classPrivateFieldGet(this, _Card_bodyContent, "f").addChildren(__classPrivateFieldGet(this, _Card_bodyTitle, "f"));
                __classPrivateFieldGet(this, _Card_bodySubtitle, "f").addClass("card-subtitle", "mb-2").setTextColor("muted");
                __classPrivateFieldGet(this, _Card_bodySubtitle, "f").setText(bodySubtitle);
                __classPrivateFieldGet(this, _Card_bodyContent, "f").addChildren(__classPrivateFieldGet(this, _Card_bodySubtitle, "f"));
                __classPrivateFieldGet(this, _Card_bodyText, "f").addClass("card-text");
                __classPrivateFieldGet(this, _Card_bodyText, "f").setText(bodyText);
                __classPrivateFieldGet(this, _Card_bodyContent, "f").addChildren(__classPrivateFieldGet(this, _Card_bodyText, "f"));
            }
        }
        __classPrivateFieldGet(this, _Card_footer, "f").addClass("card-footer");
        __classPrivateFieldGet(this, _Card_footer, "f").setText(footerTitle);
        this.addChildren(__classPrivateFieldGet(this, _Card_footer, "f"));
    }
    showHeader() {
        __classPrivateFieldGet(this, _Card_header, "f").show();
        return this;
    }
    hideHeader() {
        __classPrivateFieldGet(this, _Card_header, "f").hide();
        return this;
    }
    setHeaderTitle(title) {
        __classPrivateFieldGet(this, _Card_header, "f").setText(title);
        return this;
    }
    setHeaderContent(content) {
        __classPrivateFieldGet(this, _Card_header, "f").removeClass("d-flex").clearChildren();
        content && __classPrivateFieldGet(this, _Card_header, "f").addClass("d-flex").setChild(content);
        return this;
    }
    getHeaderContent() {
        return __classPrivateFieldGet(this, _Card_header, "f").getChildren().length ? __classPrivateFieldGet(this, _Card_header, "f").getChild(0) : undefined;
    }
    setImage(image) {
        __classPrivateFieldGet(this, _Card_image, "f").setChild(image);
        return this;
    }
    showBody() {
        __classPrivateFieldGet(this, _Card_body, "f").show();
        return this;
    }
    hideBody() {
        __classPrivateFieldGet(this, _Card_body, "f").hide();
        return this;
    }
    setBodyTitle(title) {
        __classPrivateFieldGet(this, _Card_bodyTitle, "f").setText(title);
        return this;
    }
    setBodySubtitle(subtitle) {
        __classPrivateFieldGet(this, _Card_bodySubtitle, "f").setText(subtitle);
        return this;
    }
    setBodyText(text) {
        __classPrivateFieldGet(this, _Card_bodyText, "f").setText(text);
        return this;
    }
    /**
     * Replaces default body content which are body title, body subtitle and body text.
     * @param {Widget} content - Content to replace.
     * @returns {Widget} - Itself.
     */
    setBodyContent(content) {
        __classPrivateFieldGet(this, _Card_body, "f").removeClass("d-flex").clearChildren();
        content && __classPrivateFieldGet(this, _Card_body, "f").addClass("d-flex").setChild(content);
        return this;
    }
    getBodyContent() {
        return __classPrivateFieldGet(this, _Card_body, "f").getChildren().length ? __classPrivateFieldGet(this, _Card_body, "f").getChild(0) : undefined;
    }
    showFooter() {
        __classPrivateFieldGet(this, _Card_footer, "f").show();
        return this;
    }
    hideFooter() {
        __classPrivateFieldGet(this, _Card_footer, "f").hide();
        return this;
    }
    setFooterTitle(title) {
        __classPrivateFieldGet(this, _Card_footer, "f").setText(title);
        return this;
    }
    setFooterContent(content) {
        __classPrivateFieldGet(this, _Card_footer, "f").removeClass("d-flex").clearChildren();
        content && __classPrivateFieldGet(this, _Card_footer, "f").addClass("d-flex").setChild(content);
        return this;
    }
    getFooterContent() {
        return __classPrivateFieldGet(this, _Card_footer, "f").getChildren().length ? __classPrivateFieldGet(this, _Card_footer, "f").getChild(0) : undefined;
    }
}
_Card_header = new WeakMap(), _Card_image = new WeakMap(), _Card_body = new WeakMap(), _Card_footer = new WeakMap(), _Card_bodyContent = new WeakMap(), _Card_bodyTitle = new WeakMap(), _Card_bodySubtitle = new WeakMap(), _Card_bodyText = new WeakMap();
class Checkbox extends Widget {
    constructor(text = "", startState = false) {
        super("div");
        _Checkbox_lastState.set(this, void 0);
        _Checkbox_id.set(this, "checkbox" + Math.floor(Math.random() * 100000));
        _Checkbox_input.set(this, new Widget("input"));
        _Checkbox_label.set(this, new Widget("label"));
        _Checkbox_changeCallbacks.set(this, []);
        _Checkbox_fireChangeEvenet.set(this, () => {
            __classPrivateFieldGet(this, _Checkbox_changeCallbacks, "f").forEach(callback => {
                callback(this.isChecked(), this);
            });
            __classPrivateFieldSet(this, _Checkbox_lastState, this.isChecked(), "f");
        });
        _Checkbox_onChangeCallback.set(this, void 0);
        _Checkbox_validationCallback.set(this, void 0);
        _Checkbox_customValidityMessage.set(this, void 0);
        __classPrivateFieldSet(this, _Checkbox_lastState, startState, "f");
        this.addClass("form-check");
        __classPrivateFieldGet(this, _Checkbox_input, "f").addClass("form-check-input");
        __classPrivateFieldGet(this, _Checkbox_input, "f").setAttribute("type", "checkbox");
        __classPrivateFieldGet(this, _Checkbox_input, "f").setAttribute("id", __classPrivateFieldGet(this, _Checkbox_id, "f"));
        startState && __classPrivateFieldGet(this, _Checkbox_input, "f").setProperty("checked", true);
        __classPrivateFieldGet(this, _Checkbox_label, "f").addClass("form-check-label");
        __classPrivateFieldGet(this, _Checkbox_label, "f").setAttribute("for", __classPrivateFieldGet(this, _Checkbox_id, "f"));
        __classPrivateFieldGet(this, _Checkbox_label, "f").setText(text);
        this.addChildren(__classPrivateFieldGet(this, _Checkbox_input, "f"), __classPrivateFieldGet(this, _Checkbox_label, "f"));
        __classPrivateFieldGet(this, _Checkbox_input, "f").addEventListener("click", e => {
            e.stopPropagation();
        });
        __classPrivateFieldGet(this, _Checkbox_input, "f").addEventListener("change", (e) => {
            __classPrivateFieldGet(this, _Checkbox_fireChangeEvenet, "f").call(this);
        });
    }
    /**
     * A string representing the attribute's qualified name.
     * @param {string} value
     */
    setName(name) {
        __classPrivateFieldGet(this, _Checkbox_input, "f").removeAttribute("name");
        name && __classPrivateFieldGet(this, _Checkbox_input, "f").setAttribute("name", name);
        return this;
    }
    /**
     * A string representing the attribute's qualified name.
     */
    getName() {
        return __classPrivateFieldGet(this, _Checkbox_input, "f").getAttribute("name");
    }
    asSwitch() {
        this.addClass("form-switch");
        return this;
    }
    asTick() {
        this.removeClass("form-switch");
        return this;
    }
    /**
     * Toggles the button if it is set as toggle button.
     */
    toggle() {
        __classPrivateFieldGet(this, _Checkbox_input, "f").setProperty("checked", !__classPrivateFieldGet(this, _Checkbox_lastState, "f"));
        return this;
    }
    /**
     * Sets checked if it is a toggle button.
     * @param {boolean} [value]
     */
    setChecked(value = true) {
        if (__classPrivateFieldGet(this, _Checkbox_lastState, "f") != value) {
            __classPrivateFieldGet(this, _Checkbox_input, "f").setProperty("checked", value);
            __classPrivateFieldSet(this, _Checkbox_lastState, value, "f");
        }
        return this;
    }
    setDefault(value) {
        __classPrivateFieldGet(this, _Checkbox_input, "f").setProperty("defaultChecked", value);
        return this;
    }
    /**
     * Returns if this toggle is active or not.
     */
    isChecked() {
        return __classPrivateFieldGet(this, _Checkbox_input, "f").getProperty("checked");
    }
    disable() {
        this.addClass("disabled");
        __classPrivateFieldGet(this, _Checkbox_input, "f").getDom().disabled = true;
        return this;
    }
    enable() {
        this.removeClass("disabled");
        __classPrivateFieldGet(this, _Checkbox_input, "f").getDom().disabled = false;
        return this;
    }
    /**
    * Sets the indeterminate state of the checkbox
    * @param {boolean} value
    */
    indeterminate(value) {
        __classPrivateFieldGet(this, _Checkbox_input, "f").setProperty("indeterminate", value);
        return this;
    }
    /**
     * Indeterminate state of the checkbox
     * @returns {boolean}
     */
    isIndeterminate() {
        return __classPrivateFieldGet(this, _Checkbox_input, "f").getProperty("indeterminate");
    }
    setLabel(label = "") {
        __classPrivateFieldGet(this, _Checkbox_label, "f").setText(label);
        return this;
    }
    getLabel() {
        return __classPrivateFieldGet(this, _Checkbox_label, "f").getText();
    }
    truncateText(value = true) {
        __classPrivateFieldGet(this, _Checkbox_label, "f").truncateText(value);
        return this;
    }
    /**
     * Specifies that an input field is required (must be filled out)
     * @param {boolean} value - Valid input: almost all
     */
    required(value) {
        __classPrivateFieldGet(this, _Checkbox_input, "f").setProperty("required", value);
        return this;
    }
    /**
     * Required state of input
     * @returns {boolean} - Valid input: almost all
     */
    isRequired() {
        return __classPrivateFieldGet(this, _Checkbox_input, "f").getProperty("required");
    }
    /**
    * Specifies the value for the input field
    * @param {any} value - Valid input: all
    */
    setValue(value) {
        __classPrivateFieldGet(this, _Checkbox_input, "f").setProperty("value", value);
        return this;
    }
    /**
     * Value of the input field
     * @returns {any} - Valid input: all
     */
    getValue() {
        return __classPrivateFieldGet(this, _Checkbox_input, "f").getProperty("value");
    }
    /**
     * Callback will be called when state is changed
     * @param {function(boolean, Widget)} callback
     */
    addChangeCallback(callback) {
        __classPrivateFieldGet(this, _Checkbox_changeCallbacks, "f").push(callback);
        return this;
    }
    removeChangeCallback(callback) {
        let idx = __classPrivateFieldGet(this, _Checkbox_changeCallbacks, "f").indexOf(callback);
        if (idx >= 0) {
            __classPrivateFieldGet(this, _Checkbox_changeCallbacks, "f").splice(idx, 1);
        }
        return this;
    }
    clearChangeCallbacks() {
        __classPrivateFieldGet(this, _Checkbox_changeCallbacks, "f").length = 0;
        return this;
    }
    onChange(callback) {
        if (__classPrivateFieldGet(this, _Checkbox_onChangeCallback, "f")) {
            this.removeChangeCallback(__classPrivateFieldGet(this, _Checkbox_onChangeCallback, "f"));
            __classPrivateFieldSet(this, _Checkbox_onChangeCallback, undefined, "f");
        }
        if (callback) {
            __classPrivateFieldSet(this, _Checkbox_onChangeCallback, callback, "f");
            this.addChangeCallback(__classPrivateFieldGet(this, _Checkbox_onChangeCallback, "f"));
        }
        return this;
    }
    setCustomValidity(callback, errorMessage = "Invalid input.") {
        __classPrivateFieldSet(this, _Checkbox_validationCallback, callback, "f");
        __classPrivateFieldSet(this, _Checkbox_customValidityMessage, errorMessage, "f");
        let inputElm = __classPrivateFieldGet(this, _Checkbox_input, "f").getDom();
        // Set current validation state
        if (!__classPrivateFieldGet(this, _Checkbox_validationCallback, "f").call(this, this.isChecked())) {
            inputElm.setCustomValidity(errorMessage);
        }
        inputElm.addEventListener("input", () => {
            var _a;
            inputElm.setCustomValidity('');
            let cb = (_a = __classPrivateFieldGet(this, _Checkbox_validationCallback, "f")) !== null && _a !== void 0 ? _a : ((value) => !!value);
            if (!cb(this.isChecked())) {
                inputElm.setCustomValidity(errorMessage);
            }
        });
        inputElm.addEventListener("submit", () => {
            var _a;
            inputElm.setCustomValidity('');
            let cb = (_a = __classPrivateFieldGet(this, _Checkbox_validationCallback, "f")) !== null && _a !== void 0 ? _a : ((value) => !!value);
            if (!cb(this.isChecked())) {
                inputElm.setCustomValidity(errorMessage);
            }
        });
        return this;
    }
    removeCustomValidity() {
        __classPrivateFieldSet(this, _Checkbox_validationCallback, (value) => !!value, "f");
        __classPrivateFieldSet(this, _Checkbox_customValidityMessage, undefined, "f");
        __classPrivateFieldGet(this, _Checkbox_input, "f").getDom().setCustomValidity("");
        return this;
    }
    validate() {
        this.setValid(this.isValid());
        return this;
    }
    setValid(value) {
        this.clearValidation();
        if (value) {
            this.addClass("is-valid");
            __classPrivateFieldGet(this, _Checkbox_input, "f").getDom().setCustomValidity("");
        }
        else {
            this.addClass("is-invalid");
            __classPrivateFieldGet(this, _Checkbox_customValidityMessage, "f") && __classPrivateFieldGet(this, _Checkbox_input, "f").getDom().setCustomValidity(__classPrivateFieldGet(this, _Checkbox_customValidityMessage, "f"));
        }
        return this;
    }
    isValid() {
        var _a;
        let cb = (_a = __classPrivateFieldGet(this, _Checkbox_validationCallback, "f")) !== null && _a !== void 0 ? _a : ((value) => !!value);
        return cb(this.isChecked());
    }
    clearValidation() {
        this.removeClass("is-valid", "is-invalid");
        __classPrivateFieldGet(this, _Checkbox_input, "f").getDom().setCustomValidity("");
        return this;
    }
}
_Checkbox_lastState = new WeakMap(), _Checkbox_id = new WeakMap(), _Checkbox_input = new WeakMap(), _Checkbox_label = new WeakMap(), _Checkbox_changeCallbacks = new WeakMap(), _Checkbox_fireChangeEvenet = new WeakMap(), _Checkbox_onChangeCallback = new WeakMap(), _Checkbox_validationCallback = new WeakMap(), _Checkbox_customValidityMessage = new WeakMap();
class Collapse extends Widget {
    constructor(startState = true) {
        super("div");
        _Collapse_onChangeCallback.set(this, void 0);
        this.addClass("collapse");
        startState && this.addClass("show");
        this.addEventListener("shown.bs.collapse", (e) => {
            if (e.target === e.currentTarget) {
                __classPrivateFieldGet(this, _Collapse_onChangeCallback, "f") && __classPrivateFieldGet(this, _Collapse_onChangeCallback, "f").call(this, true, this);
            }
        });
        this.addEventListener("hidden.bs.collapse", (e) => {
            if (e.target === e.currentTarget) {
                __classPrivateFieldGet(this, _Collapse_onChangeCallback, "f") && __classPrivateFieldGet(this, _Collapse_onChangeCallback, "f").call(this, false, this);
            }
        });
        bootstrap_esm_Collapse.getOrCreateInstance(this.getDom(), { toggle: false });
    }
    toggle() {
        bootstrap_esm_Collapse.getOrCreateInstance(this.getDom()).toggle();
        return this;
    }
    isOpen() {
        return this.hasClass("show");
    }
    open() {
        bootstrap_esm_Collapse.getOrCreateInstance(this.getDom()).show();
        return this;
    }
    close() {
        bootstrap_esm_Collapse.getOrCreateInstance(this.getDom()).hide();
        return this;
    }
    dispose() {
        bootstrap_esm_Collapse.getOrCreateInstance(this.getDom()).dispose();
        return this;
    }
    vertical() {
        this.removeClass("collapse-horizontal");
        return this;
    }
    horizontal() {
        this.addClass("collapse-horizontal");
        return this;
    }
    onShow(callback) {
        this.getDom().addEventListener("show.bs.collapse", callback);
        return this;
    }
    onShown(callback) {
        this.getDom().addEventListener("shown.bs.collapse", callback);
        return this;
    }
    onHide(callback) {
        this.getDom().addEventListener("hide.bs.collapse", callback);
        return this;
    }
    onHidden(callback) {
        this.getDom().addEventListener("hidden.bs.collapse", callback);
        return this;
    }
    onChange(callback) {
        if (__classPrivateFieldGet(this, _Collapse_onChangeCallback, "f")) {
            __classPrivateFieldSet(this, _Collapse_onChangeCallback, undefined, "f");
        }
        if (callback) {
            __classPrivateFieldSet(this, _Collapse_onChangeCallback, callback, "f");
        }
        return this;
    }
}
_Collapse_onChangeCallback = new WeakMap();
class ColorInput extends Input {
    constructor(color = "#ffffff") {
        super("color");
        this.addClass("form-control-color");
        this.setValue(color);
    }
}
class ContextMenu extends Widget {
    constructor() {
        super("ul");
        this.addClass("dropdown-menu");
    }
    addChildren(...args) {
        for (let i = 0; i < args.length; i++) {
            super.addChildren(args[i]);
        }
        return this;
    }
    ;
    removeChild(...args) {
        super.removeChild(...args);
        return this;
    }
    ;
    removeChildAt(idx) {
        super.removeChildAt(idx);
        return this;
    }
    ;
    /**
     *Sets the menu alignment.
     * @param {"start" | "end" | "none"} alignment - { "start" | "end" | "none" }
     */
    alignMenu(alignment) {
        this.removeClass("dropdown-menu-end");
        if (alignment === "end") {
            this.addClass("dropdown-menu-end");
        }
        return this;
    }
    ;
    /**
     * Switches the menu color light and dark.
     * @param { boolean } value
     */
    dark(value = true) {
        this.removeClass("dropdown-menu-dark");
        value && this.addClass("dropdown-menu-dark");
        return this;
    }
    ;
}
class Divider extends Widget {
    constructor(color = "secondary") {
        super("div");
        _Divider_vertical.set(this, false);
        _Divider_length.set(this, "1rem");
        _Divider_width.set(this, 5);
        _Divider_color.set(this, void 0);
        __classPrivateFieldSet(this, _Divider_color, color, "f");
        __classPrivateFieldGet(this, _Divider_vertical, "f") ? this.vertical() : this.horizontal();
    }
    vertical() {
        this.setBorder("end", { color: __classPrivateFieldGet(this, _Divider_color, "f"), width: __classPrivateFieldGet(this, _Divider_width, "f") });
        this.removeStyle("min-width");
        this.setStyle("min-height", __classPrivateFieldGet(this, _Divider_length, "f"));
        return this;
    }
    horizontal() {
        this.setBorder("bottom", { color: __classPrivateFieldGet(this, _Divider_color, "f"), width: __classPrivateFieldGet(this, _Divider_width, "f") });
        this.removeStyle("min-height");
        this.setStyle("min-width", __classPrivateFieldGet(this, _Divider_length, "f"));
        return this;
    }
    setLength(value, unit = "px") {
        __classPrivateFieldSet(this, _Divider_length, value + unit, "f");
        __classPrivateFieldGet(this, _Divider_vertical, "f") ? this.vertical() : this.horizontal();
        return this;
    }
    /**
     * @param {number} value { 1 | 2 | 3 | 4 | 5 }
     * @returns {Widget} this
     */
    setWidth(value) {
        __classPrivateFieldSet(this, _Divider_width, value, "f");
        __classPrivateFieldGet(this, _Divider_vertical, "f") ? this.vertical() : this.horizontal();
        return this;
    }
    /**
     * Sets the color of divider.
     * @param value - primary | secondary | success | danger | warning | info | light | dark
     */
    setColor(value) {
        __classPrivateFieldSet(this, _Divider_color, value, "f");
        __classPrivateFieldGet(this, _Divider_vertical, "f") ? this.vertical() : this.horizontal();
        return this;
    }
}
_Divider_vertical = new WeakMap(), _Divider_length = new WeakMap(), _Divider_width = new WeakMap(), _Divider_color = new WeakMap();
class DisplayHeading extends Widget {
    constructor(size, text = "") {
        super("h1");
        this.addClass(`display-${size}`)
            .setText(text);
    }
}
class DropdownButton extends Widget {
    constructor(text = "", togglable = false) {
        super("div");
        _DropdownButton_color.set(this, void 0);
        _DropdownButton_button.set(this, new Widget("button"));
        _DropdownButton_dropdownMenu.set(this, new ContextMenu());
        _DropdownButton_togglable.set(this, void 0);
        _DropdownButton_onclickCallback.set(this, void 0);
        _DropdownButton_onchangeCallback.set(this, void 0);
        __classPrivateFieldSet(this, _DropdownButton_togglable, togglable, "f");
        this.addClass("dropdown");
        __classPrivateFieldGet(this, _DropdownButton_button, "f").addClass("btn", "dropdown-toggle", "w-100");
        __classPrivateFieldGet(this, _DropdownButton_button, "f").setAttribute("data-bs-toggle", "dropdown");
        __classPrivateFieldGet(this, _DropdownButton_button, "f").setText(text);
        this.setColor("secondary");
        super.addChildren(__classPrivateFieldGet(this, _DropdownButton_button, "f"), __classPrivateFieldGet(this, _DropdownButton_dropdownMenu, "f"));
    }
    setActive(idx) {
        let items = __classPrivateFieldGet(this, _DropdownButton_dropdownMenu, "f").getChildren().filter((item) => item instanceof DropdownItem);
        items.forEach((item, i) => {
            if (i === idx) {
                item.setActive(true);
            }
            else {
                item.setActive(false);
            }
        });
        return this;
    }
    setTogglable(value = true) {
        __classPrivateFieldSet(this, _DropdownButton_togglable, value, "f");
        return this;
    }
    setAutoclose(value = true) {
        __classPrivateFieldGet(this, _DropdownButton_dropdownMenu, "f").removeAttribute("data-bs-auto-close");
        if (value != null) {
            __classPrivateFieldGet(this, _DropdownButton_dropdownMenu, "f").setAttribute("data-bs-auto-close", value.toString());
        }
        return this;
    }
    showArrow() {
        __classPrivateFieldGet(this, _DropdownButton_button, "f").addClass("dropdown-toggle");
        return this;
    }
    hideArrow() {
        __classPrivateFieldGet(this, _DropdownButton_button, "f").removeClass("dropdown-toggle");
        return this;
    }
    addChildren(...args) {
        // get all added children that are DropdownItem or DropdownDivider
        let items = args.filter((item) => item instanceof DropdownItem);
        for (const item of items) {
            item.addEventListener("click", () => {
                if (!__classPrivateFieldGet(this, _DropdownButton_togglable, "f"))
                    return;
                let children = __classPrivateFieldGet(this, _DropdownButton_dropdownMenu, "f").getChildren().filter((item) => item instanceof DropdownItem);
                let idx = children.indexOf(item);
                this.setActive(idx);
                __classPrivateFieldGet(this, _DropdownButton_onchangeCallback, "f") && __classPrivateFieldGet(this, _DropdownButton_onchangeCallback, "f").call(this, item, idx);
            });
        }
        __classPrivateFieldGet(this, _DropdownButton_dropdownMenu, "f").addChildren(...args);
        return this;
    }
    ;
    removeChild(...args) {
        __classPrivateFieldGet(this, _DropdownButton_dropdownMenu, "f").removeChild(...args);
        return this;
    }
    ;
    removeChildAt(idx) {
        __classPrivateFieldGet(this, _DropdownButton_dropdownMenu, "f").removeChildAt(idx);
        return this;
    }
    ;
    /**
     * Sets the color of button.
     * @param value - primary | secondary | success | danger | warning | info | light | dark
     * @returns this
     */
    setColor(value) {
        __classPrivateFieldGet(this, _DropdownButton_button, "f").removeClass(`btn-${__classPrivateFieldGet(this, _DropdownButton_color, "f")}`);
        __classPrivateFieldSet(this, _DropdownButton_color, value, "f");
        __classPrivateFieldGet(this, _DropdownButton_button, "f").addClass(`btn-${__classPrivateFieldGet(this, _DropdownButton_color, "f")}`);
        return this;
    }
    /**
     * Removes all background images and colors.
     * @param {boolean} value
     */
    setOutlined(value = true) {
        __classPrivateFieldGet(this, _DropdownButton_button, "f").removeClass(`btn-${__classPrivateFieldGet(this, _DropdownButton_color, "f")}`, `btn-outline-${__classPrivateFieldGet(this, _DropdownButton_color, "f")}`);
        value && __classPrivateFieldGet(this, _DropdownButton_button, "f").addClass(`btn-outline-${__classPrivateFieldGet(this, _DropdownButton_color, "f")}`);
        return this;
    }
    ;
    /**
     * Sets the size of button
     * @param { "sm" | "md" | "lg" | "none" } size
     */
    setButtonSize(size) {
        __classPrivateFieldGet(this, _DropdownButton_button, "f").removeClass("btn-sm", "btn-lg");
        if (size === "sm" || size === "lg") {
            __classPrivateFieldGet(this, _DropdownButton_button, "f").addClass("btn-" + size);
        }
        return this;
    }
    ;
    getContent() {
        return __classPrivateFieldGet(this, _DropdownButton_button, "f").getChild(0);
    }
    /**
     * Replaces all childs of the button with given one.
     * @param {Widget} content
     */
    setContent(content) {
        __classPrivateFieldGet(this, _DropdownButton_button, "f").clearChildren();
        content && __classPrivateFieldGet(this, _DropdownButton_button, "f").setChild(content);
        return this;
    }
    ;
    getText() {
        return __classPrivateFieldGet(this, _DropdownButton_button, "f").getText();
    }
    /**
     * Sets the text of the button.
     * @param {string} text
     */
    setText(text) {
        __classPrivateFieldGet(this, _DropdownButton_button, "f").setText(text);
        return this;
    }
    ;
    click() {
        __classPrivateFieldGet(this, _DropdownButton_button, "f").getDom().click();
        return this;
    }
    ;
    onClick(callback) {
        if (__classPrivateFieldGet(this, _DropdownButton_onclickCallback, "f")) {
            __classPrivateFieldGet(this, _DropdownButton_button, "f").removeEventListener(__classPrivateFieldGet(this, _DropdownButton_onclickCallback, "f"));
            __classPrivateFieldSet(this, _DropdownButton_onclickCallback, undefined, "f");
        }
        if (callback) {
            __classPrivateFieldSet(this, _DropdownButton_onclickCallback, e => callback(this, e), "f");
            __classPrivateFieldGet(this, _DropdownButton_onclickCallback, "f").event = "click";
            __classPrivateFieldGet(this, _DropdownButton_button, "f").addEventListener("click", __classPrivateFieldGet(this, _DropdownButton_onclickCallback, "f"));
        }
        return this;
    }
    ;
    onChange(callback) {
        __classPrivateFieldSet(this, _DropdownButton_onclickCallback, undefined, "f");
        if (callback) {
            __classPrivateFieldSet(this, _DropdownButton_onchangeCallback, callback, "f");
        }
        return this;
    }
    ;
    /**
     * Sets the where dropdown menu show up.
     * @param {"dropup" | "dropdown" | "dropstart" | "dropend"} side - { "dropup" | "dropdown" | "dropstart" | "dropend" }
     */
    setDropSide(side) {
        this.removeClass("dropup", "dropdown", "dropstart", "dropend");
        this.addClass(side);
        return this;
    }
    ;
    /**
     *Sets the menu alignment.
     * @param {"start" | "end" | "none"} alignment - { "start" | "end" | "none" }
     */
    alignMenu(alignment) {
        __classPrivateFieldGet(this, _DropdownButton_dropdownMenu, "f").alignMenu(alignment);
        return this;
    }
    ;
    /**
     * Switches the menu color light and dark.
     * @param { boolean } value
     */
    dark(value = true) {
        __classPrivateFieldGet(this, _DropdownButton_dropdownMenu, "f").dark(value);
        return this;
    }
    ;
    truncateText(value = true) {
        __classPrivateFieldGet(this, _DropdownButton_button, "f").truncateText(value);
        return this;
    }
}
_DropdownButton_color = new WeakMap(), _DropdownButton_button = new WeakMap(), _DropdownButton_dropdownMenu = new WeakMap(), _DropdownButton_togglable = new WeakMap(), _DropdownButton_onclickCallback = new WeakMap(), _DropdownButton_onchangeCallback = new WeakMap();
class DropdownDivider extends Widget {
    constructor() {
        super("li");
        const divider = new Widget("hr");
        divider.addClass("dropdown-divider");
        this.addChildren(divider);
    }
}
class DropdownItem extends Widget {
    constructor(text = "") {
        super("li");
        _DropdownItem_link.set(this, new Widget("a"));
        _DropdownItem_onclickCallback.set(this, void 0);
        this.addClass("d-flex");
        __classPrivateFieldGet(this, _DropdownItem_link, "f").addClass("dropdown-item");
        __classPrivateFieldGet(this, _DropdownItem_link, "f").setAttribute("role", "button");
        __classPrivateFieldGet(this, _DropdownItem_link, "f").setText(text);
        super.addChildren(__classPrivateFieldGet(this, _DropdownItem_link, "f"));
    }
    setActive(value = true) {
        __classPrivateFieldGet(this, _DropdownItem_link, "f").removeClass("active");
        value && __classPrivateFieldGet(this, _DropdownItem_link, "f").addClass("active");
    }
    getContent() {
        return __classPrivateFieldGet(this, _DropdownItem_link, "f").getChild(0);
    }
    /**
     * Replaces all childs of the button with given one. Leaving empty or passing null clears content.
     * @param {Widget} content
     */
    setContent(content) {
        __classPrivateFieldGet(this, _DropdownItem_link, "f").clearChildren();
        content && __classPrivateFieldGet(this, _DropdownItem_link, "f").setChild(content);
        return this;
    }
    ;
    /**
     * Aligns content and label horizontally.
     * @param {"start" | "center" | "end" | "none"} value - { "start" | "center" | "end" | "none" }
     */
    alignContent(value) {
        __classPrivateFieldGet(this, _DropdownItem_link, "f").alignText(value);
        this.removeClass("justify-content-start", "justify-content-center", "justify-content-end");
        if (value) {
            this.addClass("justify-content-" + value);
        }
        return this;
    }
    ;
    getText() {
        return __classPrivateFieldGet(this, _DropdownItem_link, "f").getText();
    }
    setText(text) {
        __classPrivateFieldGet(this, _DropdownItem_link, "f").setText(text);
        return this;
    }
    ;
    onClick(callback) {
        if (__classPrivateFieldGet(this, _DropdownItem_onclickCallback, "f")) {
            __classPrivateFieldGet(this, _DropdownItem_link, "f").removeEventListener(__classPrivateFieldGet(this, _DropdownItem_onclickCallback, "f"));
            __classPrivateFieldSet(this, _DropdownItem_onclickCallback, undefined, "f");
        }
        if (callback) {
            __classPrivateFieldSet(this, _DropdownItem_onclickCallback, e => callback(this, e), "f");
            __classPrivateFieldGet(this, _DropdownItem_onclickCallback, "f").event = "click";
            __classPrivateFieldGet(this, _DropdownItem_link, "f").addEventListener("click", __classPrivateFieldGet(this, _DropdownItem_onclickCallback, "f"));
        }
        return this;
    }
    ;
    // default overrides incase they are needed
    addChildren(...args) {
        __classPrivateFieldGet(this, _DropdownItem_link, "f").addChildren(...args);
        return this;
    }
    ;
    getChild(idx) {
        return __classPrivateFieldGet(this, _DropdownItem_link, "f").getChild(idx);
    }
    ;
    getChildren() {
        return __classPrivateFieldGet(this, _DropdownItem_link, "f").getChildren();
    }
    ;
    removeChild(...args) {
        __classPrivateFieldGet(this, _DropdownItem_link, "f").removeChild(...args);
        return this;
    }
    ;
    replaceChild(child, idx) {
        __classPrivateFieldGet(this, _DropdownItem_link, "f").replaceChild(child, idx);
        return this;
    }
    ;
    setChild(...args) {
        __classPrivateFieldGet(this, _DropdownItem_link, "f").setChild(...args);
        return this;
    }
    ;
    truncateText(value = true) {
        __classPrivateFieldGet(this, _DropdownItem_link, "f").truncateText(value);
        return this;
    }
    addEventListener(evnt, callback, options = false) {
        __classPrivateFieldGet(this, _DropdownItem_link, "f").addEventListener(evnt, callback, options);
        return this;
    }
    ;
    removeEventListener(callback, evnt) {
        __classPrivateFieldGet(this, _DropdownItem_link, "f").removeEventListener(callback, evnt);
        return this;
    }
    ;
    clearEventListeners() {
        __classPrivateFieldGet(this, _DropdownItem_link, "f").clearEventListeners();
        return this;
    }
    ;
}
_DropdownItem_link = new WeakMap(), _DropdownItem_onclickCallback = new WeakMap();
class DropdownLink extends Widget {
    constructor(text = "", color = "primary") {
        super("div");
        _DropdownLink_color.set(this, void 0);
        _DropdownLink_link.set(this, new Widget("a"));
        _DropdownLink_dropdownMenu.set(this, new ContextMenu());
        _DropdownLink_onclickCallback.set(this, void 0);
        this.addClass("dropdown");
        __classPrivateFieldGet(this, _DropdownLink_link, "f").addClass("nav-link");
        __classPrivateFieldGet(this, _DropdownLink_link, "f").setAttribute("data-bs-toggle", "dropdown");
        // this.#link.setProperty("type", "button")
        __classPrivateFieldGet(this, _DropdownLink_link, "f").setCursor("pointer");
        __classPrivateFieldGet(this, _DropdownLink_link, "f").setText(text);
        this.setColor(color);
        super.addChildren(__classPrivateFieldGet(this, _DropdownLink_link, "f"));
        super.addChildren(__classPrivateFieldGet(this, _DropdownLink_dropdownMenu, "f"));
    }
    showArrow(value = true) {
        __classPrivateFieldGet(this, _DropdownLink_link, "f").removeClass("dropdown-toggle");
        value && __classPrivateFieldGet(this, _DropdownLink_link, "f").addClass("dropdown-toggle");
        return this;
    }
    addChildren(...args) {
        __classPrivateFieldGet(this, _DropdownLink_dropdownMenu, "f").addChildren(...args);
        return this;
    }
    ;
    removeChild(...args) {
        __classPrivateFieldGet(this, _DropdownLink_dropdownMenu, "f").removeChild(...args);
        return this;
    }
    ;
    removeChildAt(idx) {
        __classPrivateFieldGet(this, _DropdownLink_dropdownMenu, "f").removeChildAt(idx);
        return this;
    }
    ;
    getContent() {
        return __classPrivateFieldGet(this, _DropdownLink_link, "f").getChild(0);
    }
    /**
     * Replaces all childs of the button with given one. Leaving empty or passing null clears content.
     * @param {Widget} content
     */
    setContent(content) {
        __classPrivateFieldGet(this, _DropdownLink_link, "f").clearChildren();
        content && __classPrivateFieldGet(this, _DropdownLink_link, "f").setChild(content);
        return this;
    }
    ;
    getText() {
        return __classPrivateFieldGet(this, _DropdownLink_link, "f").getText();
    }
    /**
     * Sets the text of the button.
     * @param {string} text
     */
    setText(text) {
        __classPrivateFieldGet(this, _DropdownLink_link, "f").setText(text);
        return this;
    }
    ;
    /**
     * Sets the color of link.
     * @param value - primary | secondary | success | danger | warning | info | light | dark
     */
    setColor(value) {
        __classPrivateFieldGet(this, _DropdownLink_link, "f").removeClass(`link-${__classPrivateFieldGet(this, _DropdownLink_color, "f")}`);
        __classPrivateFieldSet(this, _DropdownLink_color, value, "f");
        __classPrivateFieldGet(this, _DropdownLink_link, "f").addClass(`link-${__classPrivateFieldGet(this, _DropdownLink_color, "f")}`);
        return this;
    }
    ;
    onClick(callback) {
        if (__classPrivateFieldGet(this, _DropdownLink_onclickCallback, "f")) {
            __classPrivateFieldGet(this, _DropdownLink_link, "f").removeEventListener(__classPrivateFieldGet(this, _DropdownLink_onclickCallback, "f"));
            __classPrivateFieldSet(this, _DropdownLink_onclickCallback, undefined, "f");
        }
        if (callback) {
            __classPrivateFieldSet(this, _DropdownLink_onclickCallback, e => callback(this, e), "f");
            __classPrivateFieldGet(this, _DropdownLink_onclickCallback, "f").event = "click";
            __classPrivateFieldGet(this, _DropdownLink_link, "f").addEventListener("click", __classPrivateFieldGet(this, _DropdownLink_onclickCallback, "f"));
        }
        return this;
    }
    ;
    /**
     * Sets the where dropdown menu show up.
     * @param {"dropup" | "dropdown" | "dropstart" | "dropend"} side - {} "dropup" | "dropdown" | "dropstart" | "dropend" }
     */
    setDropSide(side) {
        this.removeClass("dropup", "dropdown", "dropstart", "dropend");
        this.addClass(side);
        return this;
    }
    ;
    /**
     *Sets the menu alignment.
     * @param {"start" | "end" | "none" } alignment - { "start" | "end" | "none" }
     */
    alignMenu(alignment) {
        __classPrivateFieldGet(this, _DropdownLink_dropdownMenu, "f").alignMenu(alignment);
        return this;
    }
    ;
    /**
    * Switches the menu color light and dark.
    * @param { boolean } value
    */
    dark(value = true) {
        __classPrivateFieldGet(this, _DropdownLink_dropdownMenu, "f").dark(value);
        return this;
    }
    ;
    truncateText(value = true) {
        __classPrivateFieldGet(this, _DropdownLink_link, "f").truncateText(value);
        return this;
    }
}
_DropdownLink_color = new WeakMap(), _DropdownLink_link = new WeakMap(), _DropdownLink_dropdownMenu = new WeakMap(), _DropdownLink_onclickCallback = new WeakMap();
class Figure extends Widget {
    constructor(caption = "", image) {
        super("figure");
        _Figure_image.set(this, void 0);
        _Figure_caption.set(this, void 0);
        __classPrivateFieldSet(this, _Figure_caption, new Widget("figcaption")
            .addClass("figure-caption")
            .setText(caption), "f");
        this.setImage(image);
        this.addChildren(__classPrivateFieldGet(this, _Figure_caption, "f"));
    }
    getCaption() {
        return __classPrivateFieldGet(this, _Figure_caption, "f").getText();
    }
    setCaption(caption) {
        __classPrivateFieldGet(this, _Figure_caption, "f").setText(caption);
        return this;
    }
    setImage(image) {
        __classPrivateFieldGet(this, _Figure_image, "f") && this.removeChild(__classPrivateFieldGet(this, _Figure_image, "f"));
        __classPrivateFieldSet(this, _Figure_image, image, "f");
        __classPrivateFieldGet(this, _Figure_image, "f") && this.insertChild(0, __classPrivateFieldGet(this, _Figure_image, "f"));
        return this;
    }
    getImage() {
        return __classPrivateFieldGet(this, _Figure_image, "f");
    }
}
_Figure_image = new WeakMap(), _Figure_caption = new WeakMap();
class FloatingInput extends Widget {
    constructor(label = "", input) {
        super("div");
        _FloatingInput_input.set(this, void 0);
        _FloatingInput_label.set(this, new Label());
        this.addClass("form-floating");
        this.setLabel(label);
        this.setInput(input);
        this.addChildren(__classPrivateFieldGet(this, _FloatingInput_label, "f"));
    }
    setInput(input) {
        __classPrivateFieldGet(this, _FloatingInput_input, "f") && this.removeChild(__classPrivateFieldGet(this, _FloatingInput_input, "f"));
        __classPrivateFieldSet(this, _FloatingInput_input, input, "f");
        if (__classPrivateFieldGet(this, _FloatingInput_input, "f")) {
            this.addChildren(__classPrivateFieldGet(this, _FloatingInput_input, "f"));
            if (!__classPrivateFieldGet(this, _FloatingInput_input, "f").getAttribute("id")) {
                __classPrivateFieldGet(this, _FloatingInput_input, "f").setAttribute("id", __classPrivateFieldGet(this, _FloatingInput_input, "f").getProperty("tagName") + Math.floor(Math.random() * 100000));
            }
            // it needs to be set, otherwise size animation doesnt show
            if (!__classPrivateFieldGet(this, _FloatingInput_input, "f").getProperty("placeholder")) {
                __classPrivateFieldGet(this, _FloatingInput_input, "f").setProperty("placeholder", __classPrivateFieldGet(this, _FloatingInput_label, "f").getText());
            }
            __classPrivateFieldGet(this, _FloatingInput_label, "f").setAttribute("for", __classPrivateFieldGet(this, _FloatingInput_input, "f").getAttribute("id"));
        }
        return this;
    }
    getInput() {
        return __classPrivateFieldGet(this, _FloatingInput_input, "f");
    }
    setLabel(value) {
        __classPrivateFieldGet(this, _FloatingInput_label, "f").setText(value);
        return this;
    }
    getLabel() {
        return __classPrivateFieldGet(this, _FloatingInput_label, "f").getText();
    }
}
_FloatingInput_input = new WeakMap(), _FloatingInput_label = new WeakMap();
class Form extends Widget {
    constructor() {
        super("form");
        _Form_customValidation.set(this, void 0);
        this.disableBrowserValidation();
    }
    disable() {
        super.disable();
        var elements = this.getDom().elements;
        for (var i = 0, len = elements.length; i < len; ++i) {
            elements[i].disabled = true;
        }
        return this;
    }
    enable() {
        super.enable();
        var elements = this.getDom().elements;
        for (var i = 0, len = elements.length; i < len; ++i) {
            elements[i].disabled = false;
        }
        return this;
    }
    /**
     * Submits the form to the server.
     * @returns {this}
     */
    submit() {
        this.getDom().submit();
        return this;
    }
    /**
     * Requests that the form be submitted using the specified submit button and its corresponding configuration.
     * @returns {this}
     */
    requestSubmit() {
        this.getDom().requestSubmit();
        return this;
    }
    /**
     * Resets the form to its initial state.
     * @returns {this}
     */
    reset() {
        this.getDom().reset();
        this.clearValidation();
        return this;
    }
    /**
     * Enable bypassing form control validation for form submission
     * @param {boolean} value
     */
    enableBrowserValidation() {
        this.setProperty("noValidate", false);
        return this;
    }
    /**
     * Disable bypassing form control validation for form submission
     * @param {boolean} value
     */
    disableBrowserValidation() {
        this.setProperty("noValidate", true);
        return this;
    }
    /**
     * Validation for form submission
     * @returns {boolean}
     */
    isBrowserValidation() {
        return this.getProperty("noValidate");
    }
    getFormData() {
        return new FormData(this.getDom());
    }
    onSubmit(cb) {
        __classPrivateFieldGet(this, _Form_customValidation, "f") && this.removeEventListener(__classPrivateFieldGet(this, _Form_customValidation, "f"));
        if (cb) {
            __classPrivateFieldSet(this, _Form_customValidation, (e) => {
                e.preventDefault();
                e.stopPropagation();
                if (this.validate()) {
                    cb(this, e);
                    return;
                }
            }, "f");
            __classPrivateFieldGet(this, _Form_customValidation, "f").event = "submit";
            this.addEventListener("submit", __classPrivateFieldGet(this, _Form_customValidation, "f"));
        }
        return this;
    }
    validate() {
        this.clearValidation();
        this.addClass('was-validated');
        return this.getDom().checkValidity();
    }
    clearValidation() {
        this.removeClass('was-validated');
        return this;
    }
}
_Form_customValidation = new WeakMap();
/**
* Label for input, needs to be specified with for
*/
class FormLabel extends Widget {
    constructor(text = "", inputId) {
        super("label");
        this.addClass("form-label");
        this.setText(text);
        inputId && this.setInputId(inputId);
    }
    setInputId(inputId) {
        this.setAttribute("for", inputId);
    }
    /**
     * Sets the size of button
     * @param {string} size - { "sm" | "md" | "lg" | "none" }
     */
    setLabelSize(size) {
        this.removeClass("form-label-sm", "form-label-lg");
        if (size === "sm" || size === "lg") {
            this.addClass("form-label-" + size);
        }
        return this;
    }
}
/**
* Help text sits on the bottom of input
*/
class FormText extends Widget {
    constructor(text = "") {
        super("div");
        this.addClass("form-text");
        this.setText(text);
    }
}
class Heading extends Widget {
    constructor(size, text = "") {
        super(`h${size}`);
        this.addClass(`h-${size}`)
            .setText(text);
    }
}
var HTML = new Widget(document.documentElement);
HTML.render = function () {
    return HTML;
};
class Icon extends Widget {
    constructor(iconName = "") {
        super("i");
        _Icon_iconName.set(this, void 0);
        __classPrivateFieldSet(this, _Icon_iconName, iconName, "f");
        this.setStyle("line-height", "1")
            .setIcon(__classPrivateFieldGet(this, _Icon_iconName, "f"));
    }
    getIcon() {
        return __classPrivateFieldGet(this, _Icon_iconName, "f");
    }
    setIcon(iconName) {
        this.removeClass("bi-" + __classPrivateFieldGet(this, _Icon_iconName, "f"));
        __classPrivateFieldSet(this, _Icon_iconName, iconName, "f");
        this.addClass("bi-" + __classPrivateFieldGet(this, _Icon_iconName, "f"));
        return this;
    }
}
_Icon_iconName = new WeakMap();
/**
 * {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe | IFrame}
 * Represents a nested browsing context, embedding another HTML page into the current one.
 * @param src
 * @example
 * ```javascript
 * const myIFrame = new IFrame("/frame.html").sandbox("allow-scripts").csp("default-src 'self')
 * ```
 * @returns - Itself.
 */
class IFrame extends Widget {
    constructor(src = "") {
        super("iframe");
        _IFrame_messageCallback.set(this, void 0);
        this.setStyle("frameborder", "0");
        src && this.setAttribute("src", src);
    }
    /**
     * {@link https://developer.mozilla.org/en-US/docs/Web/HTTP/Feature_Policy | Feature Policy}
     * @param values
     * @example
     * ```javascript
     * myIFrame.allow("camera", "layout-animations 'none'", "geolocation 'self' https://example.com")
     * ```
     * @returns - Itself.
     */
    allow(...values) {
        this.removeAttribute("allow");
        values.length && this.setAttribute("allow", values.join(";"));
        return this;
    }
    /**
     * Allows activating fullscreen mode by calling the requestFullscreen() method.
     * @param value
     * @returns - Itself.
     */
    allowFullscreen(value = true) {
        this.removeAttribute("allowfullscreen");
        value && this.setAttribute("allowfullscreen", "true");
        return this;
    }
    /**
     * Sets the cross-origin iframe should be allowed to invoke the Payment Request API.
     * @param value
     * @returns - Itself.
     */
    allowPaymentRequest(value = true) {
        this.removeAttribute("allowpaymentrequest");
        value && this.setAttribute("allowpaymentrequest", "true");
        return this;
    }
    /**
     * {@link https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP | Content Security Policy}
     * @param values
     * @example
     * ```javascript
     * myIFrame.csp("default-src 'self' trusted.com *.trusted.com", "img-src *")
     * ```
     * @returns - Itself.
     */
    csp(...values) {
        this.removeAttribute("csp");
        values.length && this.setAttribute("csp", values.join(";"));
        return this;
    }
    /**
    * {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#attr-referrerpolicy | Referrer Policy}
    * Indicates which referrer to send when fetching the frame's resource.
    * @param values
    * @example
    * ```javascript
    * myIFrame.setReferrerPolicy("same-origin)
    * ```
    * @returns - Itself.
    */
    setReferrerPolicy(...values) {
        this.removeAttribute("referrerpolicy");
        values.length && this.setAttribute("referrerpolicy", values.join(";"));
        return this;
    }
    /**
    * Applies extra restrictions to the content in the frame.
    * @param values
    * @example
    * ```javascript
    * myIFrame.sandbox("allow-forms", "allow-scripts")
    * ```
    * @returns - Itself.
    */
    sandbox(...values) {
        this.removeAttribute("sandbox");
        values.length && this.setAttribute("sandbox", values.join(" "));
        return this;
    }
    /**
    * Indicates how the browser should load the iframe.
    * @param value
    * - eager: Load the iframe immediately, regardless if it is outside the visible viewport (this is the default value).
    * - lazy: Defer loading of the iframe until it reaches a calculated distance from the viewport, as defined by the browser.
    * @returns - Itself.
    */
    setLoading(value) {
        this.removeAttribute("loading");
        value && this.setAttribute("loading", value);
        return this;
    }
    /**
    * Sends message object to iframe window.
    * @param message Data to be sent to the other window.
    * @param targetOrigin Specifies what the origin of targetWindow.
    * @returns - Itself.
    */
    postMessage(message, targetOrigin = "*") {
        var _a;
        (_a = this.getDom().contentWindow) === null || _a === void 0 ? void 0 : _a.postMessage(message, targetOrigin);
        return this;
    }
    /**
     * Triggers the given callback function when iframe window receives message
     * @param callback
     * @returns - Itself.
     */
    onMessageReceived(callback) {
        if (__classPrivateFieldGet(this, _IFrame_messageCallback, "f")) {
            this.removeEventListener(__classPrivateFieldGet(this, _IFrame_messageCallback, "f"));
            __classPrivateFieldSet(this, _IFrame_messageCallback, undefined, "f");
        }
        if (callback) {
            __classPrivateFieldSet(this, _IFrame_messageCallback, callback, "f");
            __classPrivateFieldGet(this, _IFrame_messageCallback, "f").event = "message";
            this.addEventListener("message", __classPrivateFieldGet(this, _IFrame_messageCallback, "f"));
        }
        return this;
    }
}
_IFrame_messageCallback = new WeakMap();
class CodeBlock extends IFrame {
    constructor(data = "", language = "javascript", options = {}) {
        super();
        this.src = `<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
        <link
            rel="stylesheet"
            data-name="vs/editor/editor.main"
            href="https://cdn.jsdelivr.net/npm/monaco-editor@0.33.0/min/vs/editor/editor.main.css"
        />
        <style>
            body, html {
                margin: 0;
                padding: 0;
                width: 100%;
                height: 100%;
            }
        </style>
        <script>
            var require = { paths: { vs: 'https://cdn.jsdelivr.net/npm/monaco-editor@0.33.0/min/vs' } };
        </script>
        <script src="https://cdn.jsdelivr.net/npm/monaco-editor@0.33.0/min/vs/loader.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/monaco-editor@0.33.0/min/vs/editor/editor.main.nls.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/monaco-editor@0.33.0/min/vs/editor/editor.main.js"></script>
    </head>
    <body>
    <script>
        fetch("{value}").then(async response => {
            monaco.editor.defineTheme('dark', {
                base: 'vs-dark',
                inherit: true,
                rules: [],
                colors: {
                    'editor.background': '#282c34',
                }
            });
            monaco.editor.defineTheme('light', {
                base: 'vs',
                inherit: true,
                rules: [],
                colors: {}
            });
            var editor = monaco.editor.create(document.body, {
                value: await response.text(),
                language: "{language}",
                theme: "{theme}",
                lineNumbers: "{lineNumbers}",
                minimap: { enabled: {minimap} },
                automaticLayout: {automaticLayout},
                fontSize: {fontSize},
                scrollBeyondLastLine: {scrollBeyondLastLine},
                fontFamily: 'monospace',
            });
            editor.onDidChangeModelContent(function () {
                window.changeCallback && window.changeCallback(editor.getValue())
            })
            let keyMod = (window.navigator.userAgent.indexOf("Mac") != -1) ? monaco.KeyMod.CtrlCmd : monaco.KeyMod.WinCtrl
            var myBinding = editor.addCommand([ keyMod | monaco.KeyCode.KeyS], function () {
                window.saveCallback && window.saveCallback(editor.getValue())
            });
        })
        </script>
    </body>
</html>`;
        _CodeBlock_fireChangeEvent.set(this, (data) => {
            __classPrivateFieldGet(this, _CodeBlock_onChangeCallback, "f") && __classPrivateFieldGet(this, _CodeBlock_onChangeCallback, "f").call(this, data);
        });
        _CodeBlock_fireSaveEvent.set(this, (data) => {
            __classPrivateFieldGet(this, _CodeBlock_onSaveCallback, "f") && __classPrivateFieldGet(this, _CodeBlock_onSaveCallback, "f").call(this, data);
        });
        _CodeBlock_onChangeCallback.set(this, void 0);
        _CodeBlock_onSaveCallback.set(this, void 0);
        let opt = Object.assign({ theme: "light", lineNumbers: true, minimap: true, automaticLayout: true, fontSize: 16, scrollBeyondLastLine: false }, options);
        this.data = data;
        this.language = language;
        this.theme = opt.theme;
        this.lineNumbers = opt.lineNumbers;
        this.minimap = opt.minimap;
        this.automaticLayout = opt.automaticLayout;
        this.fontSize = opt.fontSize;
        this.scrollBeyondLastLine = opt.scrollBeyondLastLine;
        this.addEventListener("load", () => {
            this.getDom().contentWindow.changeCallback = (data) => {
                this.data = data;
                __classPrivateFieldGet(this, _CodeBlock_fireChangeEvent, "f").call(this, data);
            };
            this.getDom().contentWindow.saveCallback = (data) => {
                __classPrivateFieldGet(this, _CodeBlock_fireSaveEvent, "f").call(this, data);
            };
        });
        this.reload();
    }
    reload() {
        let file = new File([this.data], "data.txt", {
            type: "text/plain",
        });
        let src = this.src.replace("{value}", URL.createObjectURL(file));
        src = src.replace("{language}", this.language);
        src = src.replace("{theme}", this.theme);
        src = src.replace("{lineNumbers}", this.lineNumbers ? "on" : "off");
        src = src.replace("{minimap}", this.minimap + "");
        src = src.replace("{automaticLayout}", this.automaticLayout + "");
        src = src.replace("{fontSize}", this.fontSize + "");
        src = src.replace("{scrollBeyondLastLine}", this.scrollBeyondLastLine + "");
        const blob = new Blob([src], { type: 'text/html' });
        this.setAttribute("src", URL.createObjectURL(blob));
    }
    showLineNumbers() {
        this.lineNumbers = true;
        this.reload();
        return this;
    }
    hideLineNumbers() {
        this.lineNumbers = false;
        this.reload();
        return this;
    }
    setCode(data) {
        this.data = data;
        this.reload();
        return this;
    }
    getCode() {
        return this.data;
    }
    setFontSize(value) {
        this.fontSize = value;
        this.reload();
        return this;
    }
    setAutomaticLayout(value) {
        this.automaticLayout = value;
        this.reload();
        return this;
    }
    setScrollBeyondLastLine(value) {
        this.scrollBeyondLastLine = value;
        this.reload();
        return this;
    }
    showMinimap() {
        this.minimap = true;
        this.reload();
        return this;
    }
    hideMinimap() {
        this.minimap = false;
        this.reload();
        return this;
    }
    setTheme(value = "dark") {
        this.theme = value;
        this.reload();
        return this;
    }
    setLanguage(language) {
        this.language = language;
        this.reload();
        return this;
    }
    onChange(callback) {
        __classPrivateFieldSet(this, _CodeBlock_onChangeCallback, callback, "f");
        return this;
    }
    onSave(callback) {
        __classPrivateFieldSet(this, _CodeBlock_onSaveCallback, callback, "f");
        return this;
    }
}
_CodeBlock_fireChangeEvent = new WeakMap(), _CodeBlock_fireSaveEvent = new WeakMap(), _CodeBlock_onChangeCallback = new WeakMap(), _CodeBlock_onSaveCallback = new WeakMap();
class Image extends Widget {
    constructor(src = "", alt = "") {
        super("img");
        this.setAttribute("src", src);
        this.setAttribute("alt", alt);
    }
    setSrc(src) {
        this.setAttribute("src", src);
        return this;
    }
    getSrc() {
        return this.getAttribute("src");
    }
    fit(value) {
        this.removeStyle("object-fit");
        value && this.setStyle("object-fit", value);
        return this;
    }
    fluid(value = true) {
        this.removeClass("img-fluid");
        value && this.addClass("img-fluid");
        return this;
    }
    thumbnail(value = true) {
        this.removeClass("img-thumbnail");
        value && this.addClass("img-thumbnail");
        return this;
    }
    /**
     * Specifies the vertical dimension
     * @param {number} value - Valid input: "image"
     */
    setImageHeight(value) {
        this.setProperty("height", value);
        return this;
    }
    /**
     * Vertical dimension
     * @returns {number} - Valid input: "image"
     */
    getImageHeight() {
        return this.getProperty("height");
    }
    /**
     * Specifies the horizontal dimension
     * @param {number} value - Valid input: "image"
     */
    setImageWidth(value) {
        this.setProperty("width", value);
        return this;
    }
    /**
     * Horizontal dimension
     * @returns {number} - Valid input: "image"
     */
    getImageWidth() {
        return this.getProperty("width");
    }
}
/**
* Validation feedback text sits bottom of the input. Must be placed under input.
*/
class InputFeedback extends Widget {
    constructor(text = "", type = "valid") {
        super("div");
        this.setFeedbackType(type);
        this.setText(text);
    }
    setFeedbackType(type = "valid") {
        this.removeClass("valid-feedback", "invalid-feedback");
        type === "valid" && this.addClass("valid-feedback");
        type === "invalid" && this.addClass("invalid-feedback");
    }
}
class InputValidFeedback extends InputFeedback {
    constructor(text = "") {
        super(text, "valid");
    }
}
class InputInvalidFeedback extends InputFeedback {
    constructor(text = "") {
        super(text, "invalid");
    }
}
class InputGroup extends Widget {
    constructor() {
        super("div");
        _InputGroup_updateClass.set(this, (control) => {
            if (control instanceof instantui_Button || control instanceof Label || control instanceof Icon) {
                control.addClass("input-group-text");
                //control.setStyle("font-size", "2rem")
            }
        });
        this.addClass("input-group");
    }
    // it can be button or label
    addChildren(...controls) {
        for (const control of controls) {
            __classPrivateFieldGet(this, _InputGroup_updateClass, "f").call(this, control);
            super.addChildren(control);
            if (control instanceof InputFeedback) {
                this.hasValidation();
            }
        }
        return this;
    }
    hasValidation(value = true) {
        this.removeClass("has-validation");
        value && this.addClass("has-validation");
        return this;
    }
    insertChild(idx, ...controls) {
        for (const control of controls) {
            __classPrivateFieldGet(this, _InputGroup_updateClass, "f").call(this, control);
            super.insertChild(idx, control);
        }
        return this;
    }
    removeChild(...controls) {
        for (let control of controls) {
            super.removeChild(control);
            control.removeClass("input-group-text");
        }
        return this;
    }
    removeChildAt(idx) {
        let control = this.getChild(idx);
        control && this.removeChild(control);
        return this;
    }
    disable() {
        for (const control of this.getChildren()) {
            control.disable();
        }
        return this;
    }
    enable() {
        for (const control of this.getChildren()) {
            control.enable();
        }
        return this;
    }
    /**
     * Sets the size of button
     * @param { "sm" | "md" | "lg" | "none" } size
     */
    setGroupSize(size) {
        this.removeClass("input-group-sm", "input-group-lg");
        if (size === "sm" || size === "lg") {
            this.addClass("input-group-" + size);
        }
        return this;
    }
    ;
}
_InputGroup_updateClass = new WeakMap();
class InputTooltip extends Widget {
    constructor(text = "", type = "valid") {
        super("div");
        this.setFeedbackType(type);
        this.setText(text);
    }
    setFeedbackType(type = "valid") {
        this.removeClass("valid-tooltip", "invalid-tooltip");
        type === "valid" && this.addClass("valid-tooltip");
        type === "invalid" && this.addClass("invalid-tooltip");
    }
}
class InputValidTooltip extends InputTooltip {
    constructor(text = "") {
        super(text, "valid");
    }
}
class InputInvalidTooltip extends InputTooltip {
    constructor(text = "") {
        super(text, "invalid");
    }
}
class Label extends Widget {
    constructor(text = "") {
        super("label");
        // this.addClass("form-check-label")
        this.setText(text)
            .setTextWrap("nowrap")
            .setPointerInteraction("none");
    }
}
class Link extends Widget {
    constructor(text = "", link = "", color = "primary") {
        super("a");
        _Link_color.set(this, void 0);
        _Link_type.set(this, 'link');
        this.addClass("link").setTextWrap("nowrap");
        this.setAttribute("role", "button");
        this.setAttribute("href", link);
        this.setText(text);
        this.setColor(color);
    }
    getLink() {
        return this.getAttribute("href");
    }
    setLink(link) {
        this.setAttribute("href", link);
        return this;
    }
    setActive(value = true) {
        this.removeClass("active");
        value && this.addClass("active");
        return this;
    }
    isActive() {
        return this.hasClass("active");
    }
    setTarget(value) {
        this.removeAttribute("target");
        value && this.setAttribute("target", value);
        return this;
    }
    setDisplayType(value) {
        __classPrivateFieldSet(this, _Link_type, value, "f");
        this.removeClass("link", "btn");
        if (value === "button") {
            this.addClass("btn");
        }
        if (value === "link") {
            this.addClass("link");
        }
        this.setColor(__classPrivateFieldGet(this, _Link_color, "f"));
        return this;
    }
    /**
     * Sets the size of button, only for button type.
     * @param {string} size - { "sm" | "md" | "lg" | "none" }
     */
    setButtonSize(size) {
        this.removeClass("btn-sm", "btn-lg");
        if (size === "sm" || size === "lg") {
            this.addClass("btn-" + size);
        }
        return this;
    }
    /**
     * Sets the color of link.
     * @param value - "primary" | "secondary" | "success" | "danger" | "warning" | "info" | "light" | "dark"
     * @returns {Link} - Self.
     */
    setColor(value) {
        this.removeClass(`link-${__classPrivateFieldGet(this, _Link_color, "f")}`, `btn-${__classPrivateFieldGet(this, _Link_color, "f")}`);
        __classPrivateFieldSet(this, _Link_color, value, "f");
        this.addClass(__classPrivateFieldGet(this, _Link_type, "f") === 'link' ? `link-${__classPrivateFieldGet(this, _Link_color, "f")}` : `btn-${__classPrivateFieldGet(this, _Link_color, "f")}`);
        return this;
    }
    ;
    setScrollSpyTarget(targetId) {
        this.setLink("#" + targetId);
        return this;
    }
}
_Link_color = new WeakMap(), _Link_type = new WeakMap();
class ListGroup extends Widget {
    constructor(text = "") {
        super("ul");
        _ListGroup_toggleable.set(this, false);
        this.addClass("list-group");
    }
    toggleable(value = true) {
        __classPrivateFieldSet(this, _ListGroup_toggleable, value, "f");
        return this;
    }
    vertical() {
        this.removeClass("list-group-horizontal");
        return this;
    }
    horizontal() {
        this.addClass("list-group-horizontal");
        return this;
    }
    /**
     * Remove some borders and rounded corners to render list group items edge-to-edge in a parent container (e.g., cards).
     * @param {boolean} value
     * @returns {ListGroup} - Self.
     */
    flush(value = true) {
        this.removeClass("list-group-flush");
        value && this.addClass("list-group-flush");
        return this;
    }
    numbered(value = true) {
        this.removeClass("list-group-numbered");
        value && this.addClass("list-group-numbered");
        return this;
    }
    addChildren(...args) {
        this.applyActiveListener(...args);
        super.addChildren(...args);
        return this;
    }
    setActiveLink(child) {
        super.getChildren().forEach((listItem) => {
            if (listItem === child) {
                listItem.addClass("active");
            }
            else {
                listItem.removeClass("active");
            }
        });
    }
    applyActiveListener(...args) {
        args.forEach(listItem => {
            listItem.addEventListener("click", () => {
                __classPrivateFieldGet(this, _ListGroup_toggleable, "f") && this.setActiveLink(listItem);
            });
        });
        return this;
    }
}
_ListGroup_toggleable = new WeakMap();
class ListGroupItem extends Widget {
    constructor(text, color = 'light') {
        super("li");
        _ListGroupItem_color.set(this, void 0);
        this.addClass("list-group-item");
        text && this.setText(text);
        this.setColor(color);
    }
    asButton(value = true) {
        this.removeClass("list-group-item-action");
        this.setCursor();
        if (value) {
            this.addClass("list-group-item-action");
            this.setCursor("pointer");
        }
        return this;
    }
    setActive(value = true) {
        this.removeClass("active");
        value && this.addClass("active");
        return this;
    }
    isActive() {
        return this.hasClass("active");
    }
    /**
     * Sets the color of list group item.
     * @param value - "primary" | "secondary" | "success" | "danger" | "warning" | "info" | "light" | "dark"
     * @returns this
     */
    setColor(value) {
        this.removeClass(`list-group-item-${__classPrivateFieldGet(this, _ListGroupItem_color, "f")}`);
        __classPrivateFieldSet(this, _ListGroupItem_color, value, "f");
        this.addClass(`list-group-item-${__classPrivateFieldGet(this, _ListGroupItem_color, "f")}`);
        return this;
    }
    getColor() {
        return __classPrivateFieldGet(this, _ListGroupItem_color, "f");
    }
}
_ListGroupItem_color = new WeakMap();
class ListItem extends Widget {
    constructor(text) {
        super("li");
        text && this.setText(text);
    }
    inline(value = true) {
        this.removeClass("list-inline-item");
        value && this.addClass("list-inline-item");
        return this;
    }
}
/**
 * Represents text which is marked or highlighted for reference or notation purposes
 */
class Mark extends Widget {
    constructor(text = "") {
        super("mark");
        this.setText(text);
    }
}
class Markdown extends Column {
    constructor(markdownText) {
        super();
        _Markdown_markdownContent.set(this, new Widget("div"));
        _Markdown_needsHighlight.set(this, false);
        _Markdown_markdownStyle.set(this, `
        .markdown hr {
            margin: 1em 0;
            border: 0;
            border-bottom: 1px solid #ccc;
        }
        .markdown blockquote {
            margin-left: 0;
            padding: 0.5em 0 0.5em 2em;
            border-left: 3px solid rgb(211, 218, 234);
        }
        .markdown li, .markdown code {
            margin: 0.4em 0;
        }
        .markdown p {
            margin: 0.9em 0;
        }
        .markdown pre {
            padding: 0.5em 0.5em;
            background: rgba(211, 218, 234, 0.25);
        }
        .markdown pre > code {
            display: inline-block;
            /* white-space: pre-wrap; */
        }
        .markdown table {
            border-spacing: 0;
            border-collapse: collapse;
        }
        .markdown td {
            padding: 4px 8px;
        }
        .markdown tr:nth-child(2n) {
            background: #84848414;
        }
        .markdown table td, .markdown table th {
            border: 1px solid #dee2e6;
            padding: 6px 13px;
        }
        .markdown img {
            
        }`);
        this.setAttribute("id", "markdown" + Math.floor(Math.random() * 100000));
        this.addClass("markdown").stretch("none", "none");
        __classPrivateFieldGet(this, _Markdown_markdownContent, "f").addClass("markdown");
        super.addChildren(__classPrivateFieldGet(this, _Markdown_markdownContent, "f"));
        markdownText && this.setMarkdownText(markdownText);
        if (!document.getElementById("markdown-style")) {
            this.addMarkdownStyle();
        }
        if (__classPrivateFieldGet(this, _Markdown_needsHighlight, "f")) {
            this.addHighlightStyle();
        }
    }
    setMarkdownText(markdownText) {
        __classPrivateFieldGet(this, _Markdown_markdownContent, "f").setInnerHTML(this.markdown(markdownText));
        this.reorganizeChildren();
        return this;
    }
    addChildren(...args) {
        super.addChildren(...args);
        this.reorganizeChildren();
        return this;
    }
    ;
    replaceChild(child, idx) {
        super.replaceChild(child, idx);
        this.reorganizeChildren();
        return this;
    }
    ;
    setChild(...args) {
        super.setChild(...args);
        this.reorganizeChildren();
        return this;
    }
    ;
    markdown(src) {
        var self = this;
        var rx_r = /(\r|\r)/gm;
        var rx_lt = /</g;
        var rx_gt = />/g;
        var rx_space = /\t|\r|\uf8ff/g;
        var rx_escape = /\\([\\\|`*_{}\[\]()#+\-~])/g;
        var rx_hr = /^([*\-=_] *){3,}$/gm;
        var rx_br = /^([/] *){3,}$/gm;
        var rx_blockquote = /\n *&gt; *([^]*?)(?=(\n|$){2})/g;
        var rx_list = /\n( *)(?:[*\-+]|((\d+)|([a-z])|[A-Z])[.)]) +([^]*?)(?=(\n|$){2})/g;
        var rx_listjoin = /<\/(ol|ul)>\n\n<\1>/g;
        var rx_highlight = /(^|[^A-Za-z\d\\])(([*_])|(~)|(\^)|(--)|(\+\+)|`)(\2?)([^<]*?)\2\8(?!\2)(?=\W|_|$)/g;
        var rx_code = /\n((```|~~~).*\n?([^]*?)\n?\2|((    .*?\n)+))/g;
        var rx_link = /((!?)\[(.*?)\]\((.*?)( ".*")?\)|\\([\\`*_{}\[\]()#+\-.!~]))/g;
        var rx_table = /\n(( *\|.*?\| *\n)+)/g;
        var rx_thead = /^.*\n( *\|( *\:?-+\:?-+\:? *\|)* *\n|)/;
        var rx_row = /.*\n/g;
        var rx_cell = /\||(.*?[^\\])\|/g;
        var rx_heading = /(?=^|>|\n)([>\s]*?)(#{1,6}) (.*?)( #*)? *(?=\n|$)/g;
        var rx_para = /(?=^|>|\n)\s*\n+([^<]+?)\n+\s*(?=\n|<|$)/g;
        var rx_stash = /-\d+\uf8ff/g;
        var rx_template = /\{\{.*?\}}/g;
        function replace(rex, fn) {
            src = src.replace(rex, fn);
        }
        function element(tag, content, attributes) {
            attributes = attributes ? " " + attributes : "";
            return '<' + tag + attributes + '>' + content + '</' + tag + '>';
        }
        function blockquote(src) {
            return src.replace(rx_blockquote, function (all, content) {
                return element('blockquote', blockquote(highlight(content.replace(/^ *&gt; */gm, ''))));
            });
        }
        function list(src) {
            return src.replace(rx_list, function (all, ind, ol, num, low, content) {
                var entry = element('li', highlight(content.split(RegExp('\n ?' + ind + '(?:(?:\\d+|[a-zA-Z])[.)]|[*\\-+]) +', 'g')).map(list).join('</li><li>')));
                return '\n' + (ol
                    ? '<ol start="' + (num
                        ? ol + '">'
                        : parseInt(ol, 36) - 9 + '" style="list-style-type:' + (low ? 'low' : 'upp') + 'er-alpha">') + entry + '</ol>'
                    : element('ul', entry));
            });
        }
        function highlight(src) {
            return src.replace(rx_highlight, function (all, _, p1, emp, sub, sup, small, big, p2, content) {
                return _ + element(emp ? (p2 ? 'strong' : 'em')
                    : sub ? (p2 ? 's' : 'sub')
                        : sup ? 'sup'
                            : small ? 'small'
                                : big ? 'big'
                                    : 'code', highlight(content));
            });
        }
        function unesc(str) {
            return str.replace(rx_escape, '$1');
        }
        var stash = [];
        var si = 0;
        src = '\n' + src + '\n';
        replace(rx_r, '');
        replace(rx_lt, '&lt;');
        replace(rx_gt, '&gt;');
        replace(rx_space, '  ');
        // blockquote
        src = blockquote(src);
        // horizontal rule
        replace(rx_hr, '<hr/>');
        // break rule
        replace(rx_br, '<br>');
        // list
        src = list(src);
        replace(rx_listjoin, '');
        // code
        replace(rx_code, function (all, p1, p2, p3, p4) {
            __classPrivateFieldSet(self, _Markdown_needsHighlight, true, "f");
            stash[--si] = element('pre', element('code', p3 || p4.replace(/^    /gm, ''), 'class="prettyprint"'));
            return si + '\uf8ff';
        });
        // link or image
        replace(rx_link, function (all, p1, p2, p3, p4, p5, p6) {
            stash[--si] = p4
                ? p2
                    ? '<img src="' + p4 + '" alt="' + p3 + '" id="' + p3 + '"/>'
                    : '<a href="' + p4 + '" id="' + p3 + '">' + unesc(highlight(p3)) + '</a>'
                : p6;
            return si + '\uf8ff';
        });
        // table
        replace(rx_table, function (all, table) {
            var sep = table.match(rx_thead)[1];
            return '\n' + element('table', table.replace(rx_row, function (row, ri) {
                return row == sep ? '' : element('tr', row.replace(rx_cell, function (all, cell, ci) {
                    return ci ? element(sep && !ri ? 'th' : 'td', unesc(highlight(cell || ''))) : '';
                }));
            }));
        });
        // heading
        replace(rx_heading, function (all, _, p1, p2) { return _ + element('h' + p1.length, unesc(highlight(p2)), `id="${p2.toLowerCase().replace(/\s/g, "-")}"`); });
        // paragraph
        replace(rx_para, function (all, content) { return element('p', unesc(highlight(content))); });
        // stash
        replace(rx_stash, function (all) { return stash[parseInt(all)]; });
        // variable
        replace(rx_template, (all) => {
            return `<div id="${this.getAttribute("id")}-${all.slice(2, -2)}"></div>`;
        });
        return src.trim();
    }
    ;
    reorganizeChildren() {
        for (const child of this.getChildren()) {
            let childId = child.getAttribute("id");
            let hook = document.getElementById(`${this.getAttribute("id")}-${childId}`);
            if (hook) {
                hook.appendChild(child.getDom());
            }
        }
    }
    addHighlightStyle() {
        var _a;
        let script = (_a = document.getElementById("markdown-highlight")) !== null && _a !== void 0 ? _a : document.createElement("script");
        script.setAttribute("id", "markdown-highlight");
        script.setAttribute("src", "https://cdn.jsdelivr.net/gh/google/code-prettify@master/loader/run_prettify.js");
        document.head.appendChild(script);
    }
    addMarkdownStyle() {
        let style = document.createElement("style");
        style.setAttribute("id", "markdown-style");
        style.setAttribute("type", "text/css");
        style.innerHTML = __classPrivateFieldGet(this, _Markdown_markdownStyle, "f");
        document.head.appendChild(style);
    }
}
_Markdown_markdownContent = new WeakMap(), _Markdown_needsHighlight = new WeakMap(), _Markdown_markdownStyle = new WeakMap();
class Modal extends Widget {
    constructor(headerTitle = "") {
        super("div");
        _Modal_headerTitle.set(this, new Widget("h5"));
        _Modal_header.set(this, new Widget("div"));
        _Modal_body.set(this, new Widget("div"));
        _Modal_footer.set(this, new Widget("div"));
        _Modal_modalDialog.set(this, new Widget("div"));
        _Modal_headerCloseButton.set(this, new Widget("button"));
        this.addClass("modal", "fade");
        this.setAttribute("tabindex", -1);
        this.setAttribute("id", "modal" + Math.floor(Math.random() * 100000));
        __classPrivateFieldGet(this, _Modal_headerCloseButton, "f").addClass("btn-close");
        __classPrivateFieldGet(this, _Modal_headerCloseButton, "f").setProperty("type", "button");
        __classPrivateFieldGet(this, _Modal_headerCloseButton, "f").setAttribute("data-bs-dismiss", "modal");
        __classPrivateFieldGet(this, _Modal_headerCloseButton, "f").setAttribute("aria-label", "Close");
        __classPrivateFieldGet(this, _Modal_modalDialog, "f").addClass("modal-dialog");
        {
            let modalContent = new Widget("div");
            modalContent.addClass("modal-content");
            {
                __classPrivateFieldGet(this, _Modal_header, "f").addClass("modal-header");
                {
                    __classPrivateFieldGet(this, _Modal_headerTitle, "f").addClass("modal-title");
                    __classPrivateFieldGet(this, _Modal_headerTitle, "f").setText(headerTitle);
                    __classPrivateFieldGet(this, _Modal_header, "f").addChildren(__classPrivateFieldGet(this, _Modal_headerTitle, "f"), __classPrivateFieldGet(this, _Modal_headerCloseButton, "f"));
                }
                __classPrivateFieldGet(this, _Modal_body, "f").addClass("modal-body");
                {
                }
                __classPrivateFieldGet(this, _Modal_footer, "f").addClass("modal-footer");
                {
                }
                modalContent.addChildren(__classPrivateFieldGet(this, _Modal_header, "f"), __classPrivateFieldGet(this, _Modal_body, "f"), __classPrivateFieldGet(this, _Modal_footer, "f"));
            }
            __classPrivateFieldGet(this, _Modal_modalDialog, "f").addChildren(modalContent);
        }
        this.addChildren(__classPrivateFieldGet(this, _Modal_modalDialog, "f"));
        this.setModalSize("md");
    }
    toggle() {
        bootstrap_esm_Modal.getOrCreateInstance(this.getDom()).toggle();
        return this;
    }
    open() {
        bootstrap_esm_Modal.getOrCreateInstance(this.getDom()).show();
        return this;
    }
    close() {
        bootstrap_esm_Modal.getOrCreateInstance(this.getDom()).hide();
        return this;
    }
    isActive() {
        return this.hasClass("show");
    }
    onShow(callback) {
        this.getDom().addEventListener("show.bs.modal", callback);
        return this;
    }
    onShown(callback) {
        this.getDom().addEventListener("shown.bs.modal", callback);
        return this;
    }
    onHide(callback) {
        this.getDom().addEventListener("hide.bs.modal", callback);
        return this;
    }
    onHidden(callback) {
        this.getDom().addEventListener("hidden.bs.modal", callback);
        return this;
    }
    setModalSize(size) {
        __classPrivateFieldGet(this, _Modal_modalDialog, "f").removeClass("modal-xl", "modal-lg", "modal-md", "modal-sm");
        size !== "none" && __classPrivateFieldGet(this, _Modal_modalDialog, "f").addClass("modal-" + size);
        return this;
    }
    scrollable(value = true) {
        __classPrivateFieldGet(this, _Modal_modalDialog, "f").removeClass("modal-dialog-scrollable");
        value && __classPrivateFieldGet(this, _Modal_modalDialog, "f").addClass("modal-dialog-scrollable");
        return this;
    }
    staticBackdrop(value = true) {
        this.removeAttribute("data-bs-backdrop", "data-bs-keyboard");
        // bootstrap.Modal.getOrCreateInstance(this.getDom(), { backdrop: true });
        if (value) {
            this.setAttribute("data-bs-backdrop", "static");
            this.setAttribute("data-bs-keyboard", "false");
            // bootstrap.Modal.getOrCreateInstance(this.getDom(), { backdrop: 'static' });
        }
        return this;
    }
    /**
     * @param {boolean} value
     * @param {BREAKPOINT} [breakpoint]
     * @returns {Widget} - Self.
     */
    fullscreen(value = true, breakpoint) {
        __classPrivateFieldGet(this, _Modal_modalDialog, "f").removeClass("modal-fullscreen");
        for (const bp of BREAKPOINTS) {
            __classPrivateFieldGet(this, _Modal_modalDialog, "f").removeClass(`modal-fullscreen-${bp}-down`);
        }
        if (value) {
            if (breakpoint) {
                __classPrivateFieldGet(this, _Modal_modalDialog, "f").addClass(`modal-fullscreen-${breakpoint}-down`);
            }
            else {
                __classPrivateFieldGet(this, _Modal_modalDialog, "f").addClass("modal-fullscreen");
            }
        }
        return this;
    }
    setCentered(value = true) {
        __classPrivateFieldGet(this, _Modal_modalDialog, "f").removeClass("modal-dialog-centered");
        value && __classPrivateFieldGet(this, _Modal_modalDialog, "f").addClass("modal-dialog-centered");
        return this;
    }
    showHeader() {
        __classPrivateFieldGet(this, _Modal_header, "f").show();
        return this;
    }
    hideHeader() {
        __classPrivateFieldGet(this, _Modal_header, "f").hide();
        return this;
    }
    setHeaderTitle(value) {
        __classPrivateFieldGet(this, _Modal_headerTitle, "f").setText(value);
        return this;
    }
    setHeaderContent(content) {
        if (content) {
            __classPrivateFieldGet(this, _Modal_header, "f").setChild(content);
        }
        else {
            __classPrivateFieldGet(this, _Modal_header, "f").clearChildren().addChildren(__classPrivateFieldGet(this, _Modal_headerTitle, "f"), __classPrivateFieldGet(this, _Modal_headerCloseButton, "f"));
        }
        return this;
    }
    getHeaderContent() {
        return __classPrivateFieldGet(this, _Modal_header, "f").getChildren().length ? __classPrivateFieldGet(this, _Modal_header, "f").getChild(0) : undefined;
    }
    showBody() {
        __classPrivateFieldGet(this, _Modal_body, "f").show();
        return this;
    }
    hideBody() {
        __classPrivateFieldGet(this, _Modal_body, "f").hide();
        return this;
    }
    setBodyContent(content) {
        __classPrivateFieldGet(this, _Modal_body, "f").clearChildren();
        content && __classPrivateFieldGet(this, _Modal_body, "f").setChild(content);
        return this;
    }
    getBodyContent() {
        return __classPrivateFieldGet(this, _Modal_body, "f").getChildren().length ? __classPrivateFieldGet(this, _Modal_body, "f").getChild(0) : undefined;
    }
    showFooter() {
        __classPrivateFieldGet(this, _Modal_footer, "f").show();
        return this;
    }
    hideFooter() {
        __classPrivateFieldGet(this, _Modal_footer, "f").hide();
        return this;
    }
    setFooterContent(content) {
        __classPrivateFieldGet(this, _Modal_footer, "f").clearChildren();
        content && __classPrivateFieldGet(this, _Modal_footer, "f").setChild(content);
        return this;
    }
    getFooterContent() {
        return __classPrivateFieldGet(this, _Modal_footer, "f").getChildren().length ? __classPrivateFieldGet(this, _Modal_footer, "f").getChild(0) : undefined;
    }
}
_Modal_headerTitle = new WeakMap(), _Modal_header = new WeakMap(), _Modal_body = new WeakMap(), _Modal_footer = new WeakMap(), _Modal_modalDialog = new WeakMap(), _Modal_headerCloseButton = new WeakMap();
class Nav extends Widget {
    constructor() {
        super("nav");
        this.addClass("nav");
    }
    vertical() {
        this.addClass("flex-column");
        return this;
    }
    horizontal() {
        this.removeClass("flex-column");
        return this;
    }
    setDisplayType(type) {
        this.removeClass("nav-tabs", "nav-pills", "nav-link");
        type === "tab" && this.addClass("nav-tabs");
        type === "pill" && this.addClass("nav-pills");
        type === "link" && this.addClass("nav-link");
        return this;
    }
}
class Navbar extends Widget {
    constructor(color = "light") {
        super("div");
        _Navbar_responsive.set(this, new Widget("div"));
        _Navbar_navbar.set(this, new Widget("nav"));
        _Navbar_brand.set(this, new Widget("a"));
        _Navbar_container.set(this, new Widget("div"));
        _Navbar_toggler.set(this, new Widget("button"));
        _Navbar_collapse.set(this, new Widget("div"));
        _Navbar_navGroup.set(this, new Widget("div"));
        _Navbar_id.set(this, void 0);
        // offcanvas
        _Navbar_offCanvas.set(this, new Widget("div"));
        _Navbar_offCanvasBody.set(this, new Widget("div"));
        _Navbar_offCanvasClose.set(this, new Widget("button"));
        this.stretchX();
        __classPrivateFieldGet(this, _Navbar_responsive, "f").stretchX();
        __classPrivateFieldGet(this, _Navbar_navbar, "f").addClass("navbar");
        __classPrivateFieldGet(this, _Navbar_brand, "f").addClass("navbar-brand").setAttribute("href", "/").hide();
        __classPrivateFieldGet(this, _Navbar_container, "f").addClass("container-fluid");
        __classPrivateFieldGet(this, _Navbar_navGroup, "f").addClass("navbar-nav").stretchX();
        __classPrivateFieldSet(this, _Navbar_id, `collapsibleNavbar-${Math.floor(Math.random() * 100)}`, "f");
        __classPrivateFieldGet(this, _Navbar_toggler, "f").addClass("navbar-toggler")
            .setProperty("type", "button")
            .setAttribute("data-bs-toggle", "collapse")
            .setAttribute("data-bs-target", `#${__classPrivateFieldGet(this, _Navbar_id, "f")}`);
        let span = new Widget("span");
        span.addClass("navbar-toggler-icon");
        __classPrivateFieldGet(this, _Navbar_collapse, "f").addClass("collapse", "navbar-collapse");
        __classPrivateFieldGet(this, _Navbar_collapse, "f").setProperty("id", __classPrivateFieldGet(this, _Navbar_id, "f"));
        __classPrivateFieldGet(this, _Navbar_offCanvas, "f").addClass("offcanvas", "offcanvas-end", "visible")
            .setAttribute("tabindex", "-1")
            .setAttribute("id", "offcanvasNavbar")
            .addChildren(new Widget("div").addClass("offcanvas-header").addChildren(new Widget("h5").addClass("offcanvas-title").setText("Menu"), __classPrivateFieldGet(this, _Navbar_offCanvasClose, "f").addClass("btn-close", "text-reset").setAttribute("data-bs-dismiss", "offcanvas")), __classPrivateFieldGet(this, _Navbar_offCanvasBody, "f").addClass("offcanvas-body"));
        __classPrivateFieldGet(this, _Navbar_collapse, "f").addChildren(__classPrivateFieldGet(this, _Navbar_navGroup, "f"));
        __classPrivateFieldGet(this, _Navbar_toggler, "f").addChildren(span);
        __classPrivateFieldGet(this, _Navbar_container, "f").addChildren(__classPrivateFieldGet(this, _Navbar_brand, "f"), __classPrivateFieldGet(this, _Navbar_toggler, "f"), __classPrivateFieldGet(this, _Navbar_collapse, "f"));
        __classPrivateFieldGet(this, _Navbar_navbar, "f").addChildren(__classPrivateFieldGet(this, _Navbar_container, "f"));
        __classPrivateFieldGet(this, _Navbar_responsive, "f").addChildren(__classPrivateFieldGet(this, _Navbar_navbar, "f"));
        super.addChildren(__classPrivateFieldGet(this, _Navbar_responsive, "f"));
        this.setColor(color);
    }
    setBreakpoint(breakpoint) {
        this.removeClass("navbar-expand");
        for (const bp of BREAKPOINTS) {
            this.removeClass(`"navbar-expand-"-${bp}`);
        }
        breakpoint ? this.addClass("navbar-expand-" + breakpoint) : this.addClass("navbar-expand");
        return this;
    }
    setBrand(title, imageUrl, imageSize = 30) {
        __classPrivateFieldGet(this, _Navbar_brand, "f").setText("").clearChildren().hide();
        title && __classPrivateFieldGet(this, _Navbar_brand, "f").setChild(imageUrl ?
            new Row().addChildren(new Image(imageUrl).setImageWidth(imageSize).setImageHeight(imageSize), new Label(title)) :
            new Label(title)).show();
        return this;
    }
    setBrandContent(brand) {
        __classPrivateFieldGet(this, _Navbar_brand, "f").setText("").clearChildren().hide();
        brand && __classPrivateFieldGet(this, _Navbar_brand, "f").setChild(brand).show();
        return this;
    }
    snapToBreakpoints(value = true, breakpoint) {
        if (!breakpoint) {
            __classPrivateFieldGet(this, _Navbar_responsive, "f").removeClass(`container`);
            for (const bp of BREAKPOINTS) {
                __classPrivateFieldGet(this, _Navbar_responsive, "f").removeClass(`container-${bp}`);
            }
        }
        if (value) {
            if (breakpoint) {
                __classPrivateFieldGet(this, _Navbar_responsive, "f").addClass(`container-${breakpoint}`);
            }
            else {
                __classPrivateFieldGet(this, _Navbar_responsive, "f").addClass(`container`);
            }
        }
        return this;
    }
    expand(value = true, breakpoint) {
        __classPrivateFieldGet(this, _Navbar_navbar, "f").removeClass("navbar-expand");
        for (const bp of BREAKPOINTS) {
            __classPrivateFieldGet(this, _Navbar_navbar, "f").removeClass(`"navbar-expand-"-${bp}`);
        }
        if (value) {
            breakpoint ? __classPrivateFieldGet(this, _Navbar_navbar, "f").addClass("navbar-expand-" + breakpoint) : __classPrivateFieldGet(this, _Navbar_navbar, "f").addClass("navbar-expand");
        }
        return this;
    }
    setDisplayType(type) {
        __classPrivateFieldGet(this, _Navbar_navGroup, "f").removeClass("nav-tabs", "nav-pills");
        type === "link" && __classPrivateFieldGet(this, _Navbar_navGroup, "f").addClass("nav-links");
        type === "pill" && __classPrivateFieldGet(this, _Navbar_navGroup, "f").addClass("nav-pills");
        return this;
    }
    setFolding(value = "collapsed") {
        if (value === "collapsed") {
            __classPrivateFieldGet(this, _Navbar_toggler, "f").setAttribute("data-bs-toggle", "collapse")
                .setAttribute("data-bs-target", "#collapsibleNavbar");
            __classPrivateFieldGet(this, _Navbar_container, "f").removeChildAt(2);
            __classPrivateFieldGet(this, _Navbar_container, "f").addChildren(__classPrivateFieldGet(this, _Navbar_collapse, "f"));
            __classPrivateFieldGet(this, _Navbar_collapse, "f").setChild(__classPrivateFieldGet(this, _Navbar_navGroup, "f"));
        }
        else {
            __classPrivateFieldGet(this, _Navbar_toggler, "f").setAttribute("data-bs-toggle", "offcanvas")
                .setAttribute("data-bs-target", "#offcanvasNavbar");
            __classPrivateFieldGet(this, _Navbar_container, "f").removeChildAt(2);
            __classPrivateFieldGet(this, _Navbar_container, "f").addChildren(__classPrivateFieldGet(this, _Navbar_offCanvas, "f"));
            __classPrivateFieldGet(this, _Navbar_offCanvasBody, "f").setChild(__classPrivateFieldGet(this, _Navbar_navGroup, "f"));
        }
        return this;
    }
    justifyLinks(value, breakpoint) {
        if (!value || !breakpoint) {
            for (const align of JUSTIFIES) {
                __classPrivateFieldGet(this, _Navbar_navGroup, "f").removeClass(`justify-content-${align}`);
                for (const bp of BREAKPOINTS) {
                    __classPrivateFieldGet(this, _Navbar_navGroup, "f").removeClass(`justify-content-${bp}-${align}`);
                }
            }
        }
        if (value) {
            if (breakpoint) {
                __classPrivateFieldGet(this, _Navbar_navGroup, "f").addClass(`justify-content-${breakpoint}-${value}`);
            }
            else {
                __classPrivateFieldGet(this, _Navbar_navGroup, "f").addClass(`justify-content-${value}`);
            }
        }
        return this;
    }
    alignLinks(value, breakpoint) {
        if (value && !breakpoint) {
            for (const align of ALIGNS) {
                __classPrivateFieldGet(this, _Navbar_navGroup, "f").removeClass(`align-items-${align}`);
                for (const bp of BREAKPOINTS) {
                    __classPrivateFieldGet(this, _Navbar_navGroup, "f").removeClass(`align-items-${bp}-${align}`);
                }
            }
        }
        if (value) {
            if (breakpoint) {
                __classPrivateFieldGet(this, _Navbar_navGroup, "f").addClass(`align-items-${breakpoint}-${value}`);
            }
            else {
                __classPrivateFieldGet(this, _Navbar_navGroup, "f").addClass(`align-items-${value}`);
            }
        }
        return this;
    }
    wrapItems(value = true, breakpoint, reverse = false) {
        __classPrivateFieldGet(this, _Navbar_navGroup, "f").removeClass(`flex-wrap`, `flex-wrap-reverse`);
        for (const bp of BREAKPOINTS) {
            __classPrivateFieldGet(this, _Navbar_navGroup, "f").removeClass(`flex-${bp}-wrap`, `flex-${bp}-wrap-reverse`);
        }
        if (value) {
            if (breakpoint) {
                __classPrivateFieldGet(this, _Navbar_navGroup, "f").addClass(reverse ? `flex-${breakpoint}-wrap-reverse` : `flex-${breakpoint}-wrap`);
            }
            else {
                __classPrivateFieldGet(this, _Navbar_navGroup, "f").addClass(reverse ? `flex--wrap-reverse` : `flex-wrap`);
            }
        }
        return this;
    }
    column(breakpoint, reverse = false) {
        if (!breakpoint) {
            __classPrivateFieldGet(this, _Navbar_navGroup, "f").removeClass("flex-row", "flex-row-reverse", "flex-column", "flex-column-reverse");
            for (const bp of BREAKPOINTS) {
                __classPrivateFieldGet(this, _Navbar_navGroup, "f").removeClass(`flex-${bp}-row`, `flex-${bp}-row-reverse`, `flex-${bp}-column`, `flex-${bp}-column-reverse`);
            }
            __classPrivateFieldGet(this, _Navbar_navGroup, "f").addClass(reverse ? `flex-column-reverse` : `flex-column`);
        }
        else {
            __classPrivateFieldGet(this, _Navbar_navGroup, "f").addClass(reverse ? `flex-${breakpoint}-column-reverse` : `flex-${breakpoint}-column`);
        }
        return this;
    }
    row(breakpoint, reverse = false) {
        if (!breakpoint) {
            __classPrivateFieldGet(this, _Navbar_navGroup, "f").removeClass("flex-row", "flex-row-reverse", "flex-column", "flex-column-reverse");
            for (const bp of BREAKPOINTS) {
                __classPrivateFieldGet(this, _Navbar_navGroup, "f").removeClass(`flex-${bp}-row`, `flex-${bp}-row-reverse`, `flex-${bp}-column`, `flex-${bp}-column-reverse`);
            }
            __classPrivateFieldGet(this, _Navbar_navGroup, "f").addClass(reverse ? `flex-row-reverse` : `flex-row`);
        }
        else {
            __classPrivateFieldGet(this, _Navbar_navGroup, "f").addClass(reverse ? `flex-${breakpoint}-row-reverse` : `flex-${breakpoint}-row`);
        }
        return this;
    }
    scrollable(value = true, scrollHeight = 100) {
        __classPrivateFieldGet(this, _Navbar_navGroup, "f").removeClass("navbar-nav-scroll").removeStyle("max-height");
        if (value) {
            __classPrivateFieldGet(this, _Navbar_navGroup, "f").addClass("navbar-nav-scroll");
            __classPrivateFieldGet(this, _Navbar_navGroup, "f").setStyle("max-height", `${scrollHeight}px`);
        }
        return this;
    }
    /**
     * Sets the color of navbar.
     * @param value - primary, secondary, success, danger, warning, info, light, dark
     */
    setColor(value) {
        let lightBg = ["warning", "info", "light"].includes(value);
        __classPrivateFieldGet(this, _Navbar_navbar, "f").removeClass("navbar-dark", "navbar-light");
        this.setBgColor(value);
        __classPrivateFieldGet(this, _Navbar_offCanvas, "f").setBgColor(value);
        __classPrivateFieldGet(this, _Navbar_offCanvas, "f").setTextColor(lightBg ? "dark" : "light");
        __classPrivateFieldGet(this, _Navbar_offCanvasClose, "f").addClass(lightBg ? "btn-close-dark" : "btn-close-white");
        __classPrivateFieldGet(this, _Navbar_navbar, "f").addClass(lightBg ? "navbar-light" : "navbar-dark");
        return this;
    }
    _getChildrenRecursive(widget, arr) {
        if (widget instanceof NavLink) {
            arr.push(widget);
        }
        else {
            widget.getChildren().forEach(child => this._getChildrenRecursive(child, arr));
        }
        return arr;
    }
    setActiveLink(activeLink) {
        let children = [];
        this._getChildrenRecursive(__classPrivateFieldGet(this, _Navbar_navGroup, "f"), children);
        children.forEach(child => {
            child.setActive(false);
        });
        if (typeof activeLink === "number") {
            activeLink = children[activeLink];
        }
        activeLink && activeLink.setActive(true);
    }
    addChildren(...args) {
        __classPrivateFieldGet(this, _Navbar_navGroup, "f").addChildren(...args);
        return this;
    }
    getChild(idx) {
        return __classPrivateFieldGet(this, _Navbar_navGroup, "f").getChild(idx);
    }
    getChildren() {
        return __classPrivateFieldGet(this, _Navbar_navGroup, "f").getChildren();
    }
    removeChild(...args) {
        __classPrivateFieldGet(this, _Navbar_navGroup, "f").removeChild(...args);
        return this;
    }
    replaceChild(child, idx) {
        __classPrivateFieldGet(this, _Navbar_navGroup, "f").replaceChild(child, idx);
        // this.applyActiveListener(child)
        return this;
    }
    setChild(...args) {
        __classPrivateFieldGet(this, _Navbar_navGroup, "f").setChild(...args);
        // this.applyActiveListener(...args)
        return this;
    }
}
_Navbar_responsive = new WeakMap(), _Navbar_navbar = new WeakMap(), _Navbar_brand = new WeakMap(), _Navbar_container = new WeakMap(), _Navbar_toggler = new WeakMap(), _Navbar_collapse = new WeakMap(), _Navbar_navGroup = new WeakMap(), _Navbar_id = new WeakMap(), _Navbar_offCanvas = new WeakMap(), _Navbar_offCanvasBody = new WeakMap(), _Navbar_offCanvasClose = new WeakMap();
class NavLink extends Link {
    constructor(text = "", link = "") {
        super(text, link);
        this.removeClass("link").addClass("nav-link");
    }
}
class Offcanvas extends Widget {
    constructor(title = "") {
        super("div");
        _Offcanvas_header.set(this, new Widget("div"));
        _Offcanvas_body.set(this, new Widget("div"));
        _Offcanvas_headerCloseButton.set(this, new Widget("button"));
        _Offcanvas_backdrop.set(this, true);
        _Offcanvas_keyboard.set(this, true);
        _Offcanvas_scroll.set(this, false);
        this.addClass("offcanvas", "offcanvas-start");
        this.setAttribute("tabindex", -1);
        this.setAttribute("id", "offcanvas" + Math.floor(Math.random() * 100000));
        __classPrivateFieldGet(this, _Offcanvas_headerCloseButton, "f").addClass("btn-close").setStyle("color", "inherit");
        __classPrivateFieldGet(this, _Offcanvas_headerCloseButton, "f").setProperty("type", "button");
        __classPrivateFieldGet(this, _Offcanvas_headerCloseButton, "f").setAttribute("data-bs-dismiss", "offcanvas");
        __classPrivateFieldGet(this, _Offcanvas_headerCloseButton, "f").setAttribute("aria-label", "Close");
        __classPrivateFieldGet(this, _Offcanvas_header, "f").addClass("offcanvas-header");
        {
            let titleH5 = new Widget("h5");
            titleH5.addClass("offcanvas-title");
            titleH5.setText(title);
            __classPrivateFieldGet(this, _Offcanvas_header, "f").addChildren(titleH5, __classPrivateFieldGet(this, _Offcanvas_headerCloseButton, "f"));
        }
        __classPrivateFieldGet(this, _Offcanvas_body, "f").addClass("offcanvas-body");
        {
        }
        this.addChildren(__classPrivateFieldGet(this, _Offcanvas_header, "f"), __classPrivateFieldGet(this, _Offcanvas_body, "f"));
        this.updateBs();
    }
    toggle() {
        bootstrap_esm_Offcanvas.getOrCreateInstance(this.getDom()).toggle();
        return this;
    }
    open() {
        bootstrap_esm_Offcanvas.getOrCreateInstance(this.getDom()).show();
        return this;
    }
    close() {
        bootstrap_esm_Offcanvas.getOrCreateInstance(this.getDom()).hide();
        return this;
    }
    onShow(callback) {
        this.getDom().addEventListener("show.bs.offcanvas", callback);
        return this;
    }
    onShown(callback) {
        this.getDom().addEventListener("shown.bs.offcanvas", callback);
        return this;
    }
    onHide(callback) {
        this.getDom().addEventListener("hide.bs.offcanvas", callback);
        return this;
    }
    onHidden(callback) {
        this.getDom().addEventListener("hidden.bs.offcanvas", callback);
        return this;
    }
    isActive() {
        return this.hasClass("show");
    }
    setPlace(value = "start") {
        this.removeClass("offcanvas-start", "offcanvas-end", "offcanvas-top", "offcanvas-bottom");
        this.addClass(`offcanvas-${value}`);
        return this;
    }
    scrollable(value = true) {
        __classPrivateFieldSet(this, _Offcanvas_scroll, value, "f");
        this.removeAttribute("data-bs-scroll");
        if (value) {
            this.setAttribute("data-bs-scroll", "true");
        }
        this.updateBs();
        return this;
    }
    backdrop(value = true) {
        __classPrivateFieldSet(this, _Offcanvas_backdrop, value, "f");
        this.removeAttribute("data-bs-backdrop");
        if (value) {
            this.setAttribute("data-bs-backdrop", "true");
        }
        this.updateBs();
        return this;
    }
    keyboard(value = true) {
        __classPrivateFieldSet(this, _Offcanvas_keyboard, value, "f");
        this.updateBs();
        return this;
    }
    updateBs() {
        // Bootstrap bug, gives error if its not added scene
        if (!this.getDom().parentElement) {
            document.body.appendChild(this.getDom());
        }
        bootstrap_esm_Offcanvas.getOrCreateInstance(this.getDom(), {
            backdrop: __classPrivateFieldGet(this, _Offcanvas_backdrop, "f"),
            keyboard: __classPrivateFieldGet(this, _Offcanvas_keyboard, "f"),
            scroll: __classPrivateFieldGet(this, _Offcanvas_scroll, "f"),
        });
    }
    setHeaderContent(content) {
        if (content) {
            __classPrivateFieldGet(this, _Offcanvas_header, "f").setChild(content);
        }
        else {
            __classPrivateFieldGet(this, _Offcanvas_header, "f").clearChildren().addChildren(__classPrivateFieldGet(this, _Offcanvas_headerCloseButton, "f"));
        }
        return this;
    }
    getHeaderContent() {
        return __classPrivateFieldGet(this, _Offcanvas_header, "f").getChildren().length ? __classPrivateFieldGet(this, _Offcanvas_header, "f").getChild(0) : undefined;
    }
    setBodyContent(content) {
        __classPrivateFieldGet(this, _Offcanvas_body, "f").clearChildren();
        content && __classPrivateFieldGet(this, _Offcanvas_body, "f").setChild(content);
        return this;
    }
    getBodyContent() {
        return __classPrivateFieldGet(this, _Offcanvas_body, "f").getChildren().length ? __classPrivateFieldGet(this, _Offcanvas_body, "f").getChild(0) : undefined;
    }
}
_Offcanvas_header = new WeakMap(), _Offcanvas_body = new WeakMap(), _Offcanvas_headerCloseButton = new WeakMap(), _Offcanvas_backdrop = new WeakMap(), _Offcanvas_keyboard = new WeakMap(), _Offcanvas_scroll = new WeakMap();
class OrderedList extends Widget {
    constructor(...items) {
        super("ol");
        items.forEach(item => {
            this.addChildren(new Widget("li").setText(item));
        });
    }
    unstyled(value = true) {
        this.removeClass(`list-unstyled`);
        value && this.addClass(`list-unstyled`);
    }
}
class PaginationLink extends Widget {
    constructor() {
        super("nav");
        _PaginationLink_pagination.set(this, void 0);
        _PaginationLink_activeIdx.set(this, 0);
        __classPrivateFieldSet(this, _PaginationLink_pagination, new Widget("ul").addClass("pagination"), "f");
        super.addChildren(__classPrivateFieldGet(this, _PaginationLink_pagination, "f"));
    }
    /**
     * Sets the size of button
     * @param {string} size { "sm" | "md" | "lg" | "none" }
     */
    setButtonSize(size) {
        __classPrivateFieldGet(this, _PaginationLink_pagination, "f").removeClass("pagination-sm", "pagination-lg");
        if (size === "sm" || size === "lg") {
            __classPrivateFieldGet(this, _PaginationLink_pagination, "f").addClass("pagination-" + size);
        }
        return this;
    }
    addChildren(...args) {
        let items = [...args].map((link) => {
            link.addClass("page-link");
            return new Widget("li").addClass("page-item").addChildren(link);
        });
        __classPrivateFieldGet(this, _PaginationLink_pagination, "f").addChildren(...items);
        this.applyActiveListener(...items);
        this.setActive(__classPrivateFieldGet(this, _PaginationLink_activeIdx, "f"));
        return this;
    }
    ;
    clearChildren() {
        __classPrivateFieldGet(this, _PaginationLink_pagination, "f").clearChildren();
        return this;
    }
    ;
    getChild(idx) {
        return __classPrivateFieldGet(this, _PaginationLink_pagination, "f").getChild(idx).getChild(0);
    }
    ;
    getChildren() {
        return __classPrivateFieldGet(this, _PaginationLink_pagination, "f").getChildren().map(link => link.getChild(0));
    }
    ;
    removeChild(...args) {
        let matchItems = [];
        __classPrivateFieldGet(this, _PaginationLink_pagination, "f").getChildren().forEach(item => {
            [...args].forEach(link => {
                item.getChild(0) === link && matchItems.push(item);
            });
        });
        __classPrivateFieldGet(this, _PaginationLink_pagination, "f").removeChild(...matchItems);
        this.setActive(__classPrivateFieldGet(this, _PaginationLink_activeIdx, "f"));
        return this;
    }
    ;
    replaceChild(link, idx) {
        link.addClass("page-link");
        __classPrivateFieldGet(this, _PaginationLink_pagination, "f").getChild(idx).setChild(link);
        return this;
    }
    ;
    setChild(...args) {
        let items = [...args].map((link) => {
            link.addClass("page-link");
            return new Widget("li").addClass("page-item").addChildren(link);
        });
        __classPrivateFieldGet(this, _PaginationLink_pagination, "f").setChild(...items);
        this.applyActiveListener(...items);
        return this;
    }
    ;
    prev() {
        __classPrivateFieldSet(this, _PaginationLink_activeIdx, Math.max(__classPrivateFieldGet(this, _PaginationLink_activeIdx, "f") - 1, 0), "f");
        this.setActive(__classPrivateFieldGet(this, _PaginationLink_activeIdx, "f"));
        return this;
    }
    next() {
        __classPrivateFieldSet(this, _PaginationLink_activeIdx, Math.min(__classPrivateFieldGet(this, _PaginationLink_activeIdx, "f") + 1, __classPrivateFieldGet(this, _PaginationLink_pagination, "f").getChildren().length - 1), "f");
        this.setActive(__classPrivateFieldGet(this, _PaginationLink_activeIdx, "f"));
        return this;
    }
    setActive(idx) {
        __classPrivateFieldSet(this, _PaginationLink_activeIdx, idx, "f");
        __classPrivateFieldGet(this, _PaginationLink_pagination, "f").getChildren().forEach(item => {
            item.removeClass("active");
        });
        if (idx < __classPrivateFieldGet(this, _PaginationLink_pagination, "f").getChildren().length) {
            __classPrivateFieldGet(this, _PaginationLink_pagination, "f").getChild(idx).addClass("active");
        }
        return this;
    }
    getActive() {
        return __classPrivateFieldGet(this, _PaginationLink_activeIdx, "f");
    }
    applyActiveListener(...args) {
        args.forEach(link => {
            link.addEventListener("click", () => {
                this.setActive(__classPrivateFieldGet(this, _PaginationLink_pagination, "f").getChildren().indexOf(link));
            });
        });
        return this;
    }
}
_PaginationLink_pagination = new WeakMap(), _PaginationLink_activeIdx = new WeakMap();
class Pagination extends Row {
    constructor(length, activeIdx) {
        super();
        this.prev = new instantui_Button("< Prev").setOutlined();
        this.next = new instantui_Button("Next >").setOutlined();
        this.pagination = new PaginationLink().addSpacing("mx-2").setOverflow("auto");
        _Pagination_onChangeCallback.set(this, void 0);
        this.length = length || 5;
        this.current = activeIdx || 0;
        this.offset = Math.floor(this.current / this.length) * this.length;
        const paginationWrapper = new Row().stretchX("none").setOverflow("hidden").setHeight(40).addChildren(this.pagination);
        for (let i = 0; i < length; i++) {
            let link = new Link("" + i);
            link.onClick(() => {
                this.current = this.offset + i;
                __classPrivateFieldGet(this, _Pagination_onChangeCallback, "f") && __classPrivateFieldGet(this, _Pagination_onChangeCallback, "f").call(this, this.current);
                // this.offset = Math.max(this.current - Math.floor(this.length / 2), 0)
                // this.updatePageNumbers()
                // let active = this.current - this.offset
                // this.pagination.setActive(active)
            });
            this.pagination.addChildren(link);
        }
        activeIdx && this.pagination.setActive(activeIdx);
        this.addChildren(this.prev, paginationWrapper, this.next).stretchX("none");
        this.prev.onClick(() => {
            this.pagination.prev();
            this.pagination.getChild(this.pagination.getActive()).scrollIntoView();
            this.current = Math.max(0, this.current - 1);
            if (this.current < this.offset) {
                this.offset = this.current;
                this.updatePageNumbers();
            }
            __classPrivateFieldGet(this, _Pagination_onChangeCallback, "f") && __classPrivateFieldGet(this, _Pagination_onChangeCallback, "f").call(this, this.current);
        });
        this.next.onClick(() => {
            this.pagination.next();
            this.pagination.getChild(this.pagination.getActive()).scrollIntoView();
            this.current++;
            if (this.current >= this.offset + this.length) {
                this.offset = this.current - this.length + 1;
                this.updatePageNumbers();
            }
            __classPrivateFieldGet(this, _Pagination_onChangeCallback, "f") && __classPrivateFieldGet(this, _Pagination_onChangeCallback, "f").call(this, this.current);
        });
    }
    updatePageNumbers() {
        for (let i = 0; i < this.length; i++) {
            this.pagination.getChild(i).setText("" + (this.offset + i));
        }
        return this;
    }
    onChange(callback) {
        __classPrivateFieldSet(this, _Pagination_onChangeCallback, callback, "f");
        return this;
    }
}
_Pagination_onChangeCallback = new WeakMap();
class PlaceholderImage extends Widget {
    constructor(text = "No Preview", color, size = ["100%", 100]) {
        super("svg", "http://www.w3.org/2000/svg");
        this.setStyle("font-size", "1.125rem");
        this.setStyle("text-anchor", "middle");
        this.setStyle("user-select", "none");
        this.setAttribute("width", size[0] + "");
        this.setAttribute("height", size[1] + "");
        this.setAttribute("role", "img");
        this.setAttribute("preserveAspectRatio", "xMidYMid slice");
        this.setAttribute("focusable", "false");
        let rect = new Widget("rect");
        rect.setAttribute("width", "100%");
        rect.setAttribute("height", "100%");
        rect.setAttribute("fill", color || "#868e96");
        this.addChildren(rect);
        let _text = new Widget("text");
        _text.setAttribute("x", "50%");
        _text.setAttribute("y", "50%");
        _text.setAttribute("fill", color ? new Color(color).textColor : "#dee2e6");
        _text.setAttribute("dy", ".3em");
        _text.setText(text);
        this.addChildren(_text);
        this.setProperty("innerHTML", this.getProperty("innerHTML"));
    }
}
class Progressbar extends Widget {
    constructor(label) {
        super("div");
        _Progressbar_progressBar.set(this, new Widget("div"));
        this.addClass("progress");
        this.stretchX();
        __classPrivateFieldGet(this, _Progressbar_progressBar, "f").addClass("progress-bar");
        __classPrivateFieldGet(this, _Progressbar_progressBar, "f").setProperty("role", "progressbar");
        label && this.setLabel(label);
        this.addChildren(__classPrivateFieldGet(this, _Progressbar_progressBar, "f"));
    }
    setLabel(value) {
        __classPrivateFieldGet(this, _Progressbar_progressBar, "f").setText(value);
        return this;
    }
    getLabel() {
        return __classPrivateFieldGet(this, _Progressbar_progressBar, "f").getText();
    }
    animated(value = true) {
        __classPrivateFieldGet(this, _Progressbar_progressBar, "f").removeClass("progress-bar-animated");
        value && __classPrivateFieldGet(this, _Progressbar_progressBar, "f").addClass("progress-bar-animated");
        return this;
    }
    /**
     * Sets the color of progressbar.
     * @param value - primary | secondary | success | danger | warning | info | light | dark
     * @returns this
     */
    setColor(color) {
        __classPrivateFieldGet(this, _Progressbar_progressBar, "f").setBgColor(color);
        return this;
    }
    striped(value = true) {
        __classPrivateFieldGet(this, _Progressbar_progressBar, "f").removeClass("progress-bar-striped");
        value && __classPrivateFieldGet(this, _Progressbar_progressBar, "f").addClass("progress-bar-striped");
        return this;
    }
    setProgress(value) {
        __classPrivateFieldGet(this, _Progressbar_progressBar, "f").setWidth(value, "%");
        return this;
    }
    getProgress() {
        return __classPrivateFieldGet(this, _Progressbar_progressBar, "f").getWidth();
    }
}
_Progressbar_progressBar = new WeakMap();
class Radio extends Widget {
    constructor(label = "", startState = false) {
        super("div");
        _Radio_input.set(this, new Widget("input"));
        _Radio_label.set(this, new Widget("label"));
        _Radio_changeCallbacks.set(this, []);
        _Radio_fireChangeEvenet.set(this, () => {
            __classPrivateFieldGet(this, _Radio_changeCallbacks, "f").forEach(callback => {
                callback(this.isChecked(), this);
            });
        });
        _Radio_onChangeCallback.set(this, void 0);
        this.addClass("form-check");
        const _id = "radio" + Math.floor(Math.random() * 100000);
        __classPrivateFieldGet(this, _Radio_input, "f").addClass("form-check-input");
        __classPrivateFieldGet(this, _Radio_input, "f").setProperty("type", "radio");
        __classPrivateFieldGet(this, _Radio_input, "f").setAttribute("name", "radio"); // it will allow to toggle between radios that share this name
        __classPrivateFieldGet(this, _Radio_input, "f").setAttribute("id", _id);
        startState && __classPrivateFieldGet(this, _Radio_input, "f").setProperty("checked", true);
        __classPrivateFieldGet(this, _Radio_label, "f").addClass("form-check-label");
        __classPrivateFieldGet(this, _Radio_label, "f").setAttribute("for", _id);
        __classPrivateFieldGet(this, _Radio_label, "f").setText(label);
        this.addChildren(__classPrivateFieldGet(this, _Radio_input, "f"), __classPrivateFieldGet(this, _Radio_label, "f"));
        __classPrivateFieldGet(this, _Radio_input, "f").addEventListener("change", (e) => {
            __classPrivateFieldGet(this, _Radio_fireChangeEvenet, "f").call(this);
        });
    }
    /**
     * A string representing the attribute's qualified name.
     * @param {string} value
     */
    setName(name) {
        __classPrivateFieldGet(this, _Radio_input, "f").removeAttribute("name");
        name && __classPrivateFieldGet(this, _Radio_input, "f").setAttribute("name", name);
        return this;
    }
    /**
     * A string representing the attribute's qualified name.
     */
    getName() {
        return __classPrivateFieldGet(this, _Radio_input, "f").getAttribute("name");
    }
    setLabel(label = "") {
        __classPrivateFieldGet(this, _Radio_label, "f").setText(label);
        return this;
    }
    getLabel() {
        return __classPrivateFieldGet(this, _Radio_label, "f").getText();
    }
    truncateText(value = true) {
        __classPrivateFieldGet(this, _Radio_label, "f").truncateText(value);
        return this;
    }
    /**
     * Toggles the button if it is set as toggle button.
     */
    toggle() {
        __classPrivateFieldGet(this, _Radio_input, "f").setProperty("checked", !this.isChecked());
        __classPrivateFieldGet(this, _Radio_fireChangeEvenet, "f").call(this);
        return this;
    }
    ;
    /**
     * Sets checked if it is a toggle button.
     * @param {boolean} [value]
     */
    setChecked(value = true) {
        if (this.isChecked() != value) {
            __classPrivateFieldGet(this, _Radio_input, "f").setProperty("checked", value);
        }
        return this;
    }
    ;
    setDefault(value) {
        __classPrivateFieldGet(this, _Radio_input, "f").setProperty("defaultChecked", value);
        return this;
    }
    /**
     * Returns if this toggle is active or not.
     */
    isChecked() {
        return __classPrivateFieldGet(this, _Radio_input, "f").getProperty("checked");
    }
    ;
    /**
     * Specifies that an input field is required (must be filled out)
     * @param {boolean} value - Valid input: almost all
     */
    required(value) {
        __classPrivateFieldGet(this, _Radio_input, "f").setProperty("required", value);
        return this;
    }
    /**
     * Required state of input
     * @returns {boolean} - Valid input: almost all
     */
    isRequired() {
        return __classPrivateFieldGet(this, _Radio_input, "f").getProperty("required");
    }
    disable() {
        __classPrivateFieldGet(this, _Radio_input, "f").disable();
        __classPrivateFieldGet(this, _Radio_label, "f").disable();
        return this;
    }
    enable() {
        __classPrivateFieldGet(this, _Radio_input, "f").enable();
        __classPrivateFieldGet(this, _Radio_label, "f").enable();
        return this;
    }
    /**
    * Specifies the value for the input field
    * @param {any} value - Valid input: all
    */
    setValue(value) {
        __classPrivateFieldGet(this, _Radio_input, "f").setProperty("value", value);
        return this;
    }
    /**
     * Value of the input field
     * @returns {any} - Valid input: all
     */
    getValue() {
        return __classPrivateFieldGet(this, _Radio_input, "f").getProperty("value");
    }
    /**
     * Callback will be called when state is changed
     * @param {function(Widget, boolean)} callback
     */
    addChangeCallback(callback) {
        __classPrivateFieldGet(this, _Radio_changeCallbacks, "f").push(callback);
        return this;
    }
    ;
    removeChangeCallback(callback) {
        let idx = __classPrivateFieldGet(this, _Radio_changeCallbacks, "f").indexOf(callback);
        if (idx >= 0) {
            __classPrivateFieldGet(this, _Radio_changeCallbacks, "f").splice(idx, 1);
        }
        return this;
    }
    ;
    clearChangeCallbacks() {
        __classPrivateFieldGet(this, _Radio_changeCallbacks, "f").length = 0;
        return this;
    }
    ;
    onChange(callback) {
        if (__classPrivateFieldGet(this, _Radio_onChangeCallback, "f")) {
            this.removeChangeCallback(__classPrivateFieldGet(this, _Radio_onChangeCallback, "f"));
            __classPrivateFieldSet(this, _Radio_onChangeCallback, undefined, "f");
        }
        if (callback) {
            __classPrivateFieldSet(this, _Radio_onChangeCallback, callback, "f");
            this.addChangeCallback(__classPrivateFieldGet(this, _Radio_onChangeCallback, "f"));
        }
        return this;
    }
}
_Radio_input = new WeakMap(), _Radio_label = new WeakMap(), _Radio_changeCallbacks = new WeakMap(), _Radio_fireChangeEvenet = new WeakMap(), _Radio_onChangeCallback = new WeakMap();
class RadioButton extends Widget {
    constructor(text = "", startState = false, color = "primary") {
        super("div");
        _RadioButton_color.set(this, void 0);
        _RadioButton_id.set(this, "radioButton" + Math.floor(Math.random() * 100000));
        _RadioButton_input.set(this, new Widget("input"));
        _RadioButton_text.set(this, new Widget("label"));
        _RadioButton_changeCallbacks.set(this, []);
        _RadioButton_fireChangeEvenet.set(this, () => {
            __classPrivateFieldGet(this, _RadioButton_changeCallbacks, "f").forEach(callback => {
                callback(this.isChecked(), this);
            });
        });
        _RadioButton_onChangeCallback.set(this, void 0);
        this.addClass("btn-group").fill();
        this.setAttribute("role", "group");
        this.setStyle("padding", "1px"); // otherwise truncate cuts border
        __classPrivateFieldGet(this, _RadioButton_input, "f").addClass("btn-check");
        __classPrivateFieldGet(this, _RadioButton_input, "f").setProperty("type", "radio");
        __classPrivateFieldGet(this, _RadioButton_input, "f").setAttribute("name", "radio"); // it will allow to toggle between radios that share this name
        __classPrivateFieldGet(this, _RadioButton_input, "f").setProperty("autocomplete", "off");
        __classPrivateFieldGet(this, _RadioButton_input, "f").setAttribute("id", __classPrivateFieldGet(this, _RadioButton_id, "f"));
        startState && __classPrivateFieldGet(this, _RadioButton_input, "f").setProperty("checked", true);
        __classPrivateFieldGet(this, _RadioButton_text, "f").addClass("btn");
        __classPrivateFieldGet(this, _RadioButton_text, "f").setAttribute("for", __classPrivateFieldGet(this, _RadioButton_id, "f"));
        __classPrivateFieldGet(this, _RadioButton_text, "f").setText(text);
        this.addChildren(__classPrivateFieldGet(this, _RadioButton_input, "f"), __classPrivateFieldGet(this, _RadioButton_text, "f"));
        this.setColor(color);
        __classPrivateFieldGet(this, _RadioButton_input, "f").addEventListener("change", (e) => {
            __classPrivateFieldGet(this, _RadioButton_fireChangeEvenet, "f").call(this);
        });
    }
    /**
     * A string representing the attribute's qualified name.
     * @param {string} value
     */
    setName(name) {
        __classPrivateFieldGet(this, _RadioButton_input, "f").removeAttribute("name");
        name && __classPrivateFieldGet(this, _RadioButton_input, "f").setAttribute("name", name);
        return this;
    }
    /**
     * A string representing the attribute's qualified name.
     */
    getName() {
        return __classPrivateFieldGet(this, _RadioButton_input, "f").getAttribute("name");
    }
    /**
     * Sets the color of button.
     * @param {string} value - primary, secondary, success, danger, warning, info, light, dark
     */
    setColor(value) {
        __classPrivateFieldGet(this, _RadioButton_text, "f").removeClass(`btn-outline-${__classPrivateFieldGet(this, _RadioButton_color, "f")}`);
        __classPrivateFieldSet(this, _RadioButton_color, value, "f");
        __classPrivateFieldGet(this, _RadioButton_text, "f").addClass(`btn-outline-${__classPrivateFieldGet(this, _RadioButton_color, "f")}`);
        return this;
    }
    getColor() {
        return __classPrivateFieldGet(this, _RadioButton_color, "f");
    }
    /**
     * Sets the size of button
     * @param {"sm" | "md" | "lg" | "none"} size {"sm" | "md" | "lg" | "none"}
     */
    setButtonSize(size) {
        __classPrivateFieldGet(this, _RadioButton_text, "f").removeClass("btn-sm", "btn-lg");
        if (size === "sm" || size === "lg") {
            __classPrivateFieldGet(this, _RadioButton_text, "f").addClass("btn-" + size);
        }
        return this;
    }
    ;
    /**
     * Replaces all childs of the button with given one. Leaving empty or passing null clears content.
     * @param {Widget} content
     */
    setContent(content) {
        __classPrivateFieldGet(this, _RadioButton_text, "f").clearChildren();
        content && __classPrivateFieldGet(this, _RadioButton_text, "f").setChild(content);
        return this;
    }
    ;
    getText() {
        return __classPrivateFieldGet(this, _RadioButton_text, "f").getText();
    }
    /**
     * Sets the text of the button.
     * @param {string} text
     */
    setText(text) {
        __classPrivateFieldGet(this, _RadioButton_text, "f").setText(text);
        return this;
    }
    ;
    /**
     * Toggles the button if it is set as toggle button.
     */
    toggle() {
        __classPrivateFieldGet(this, _RadioButton_input, "f").setProperty("checked", !this.isChecked());
        return this;
    }
    ;
    /**
     * Sets checked if it is a toggle button.
     * @param {boolean} [value]
     */
    setChecked(value = true) {
        __classPrivateFieldGet(this, _RadioButton_input, "f").setProperty("checked", value);
        return this;
    }
    ;
    setDefault(value) {
        __classPrivateFieldGet(this, _RadioButton_input, "f").setProperty("defaultChecked", value);
        return this;
    }
    /**
     * Returns if this toggle is active or not.
     */
    isChecked() {
        return __classPrivateFieldGet(this, _RadioButton_input, "f").getProperty("checked");
    }
    ;
    truncateText(value = true) {
        value ? this.setOverflow("hidden") : this.setOverflow();
        __classPrivateFieldGet(this, _RadioButton_text, "f").truncateText(value);
        return this;
    }
    /**
     * Callback will be called when state is changed
     * @param {function(Widget, boolean)} callback
     */
    addChangeCallback(callback) {
        __classPrivateFieldGet(this, _RadioButton_changeCallbacks, "f").push(callback);
        return this;
    }
    ;
    removeChangeCallback(callback) {
        let idx = __classPrivateFieldGet(this, _RadioButton_changeCallbacks, "f").indexOf(callback);
        if (idx >= 0) {
            __classPrivateFieldGet(this, _RadioButton_changeCallbacks, "f").splice(idx, 1);
        }
        return this;
    }
    ;
    clearChangeCallbacks() {
        __classPrivateFieldGet(this, _RadioButton_changeCallbacks, "f").length = 0;
        return this;
    }
    ;
    onChange(callback) {
        if (__classPrivateFieldGet(this, _RadioButton_onChangeCallback, "f")) {
            this.removeChangeCallback(__classPrivateFieldGet(this, _RadioButton_onChangeCallback, "f"));
            __classPrivateFieldSet(this, _RadioButton_onChangeCallback, undefined, "f");
        }
        if (callback) {
            __classPrivateFieldSet(this, _RadioButton_onChangeCallback, callback, "f");
            this.addChangeCallback(__classPrivateFieldGet(this, _RadioButton_onChangeCallback, "f"));
        }
        return this;
    }
}
_RadioButton_color = new WeakMap(), _RadioButton_id = new WeakMap(), _RadioButton_input = new WeakMap(), _RadioButton_text = new WeakMap(), _RadioButton_changeCallbacks = new WeakMap(), _RadioButton_fireChangeEvenet = new WeakMap(), _RadioButton_onChangeCallback = new WeakMap();
class SelectionBox extends Widget {
    constructor(startIdx = 0) {
        super("select");
        _SelectionBox_lastState.set(this, void 0);
        _SelectionBox_changeCallbacks.set(this, []);
        _SelectionBox_onChangeCallback.set(this, void 0);
        this.addClass("form-select");
        __classPrivateFieldSet(this, _SelectionBox_lastState, startIdx, "f");
        this.addEventListener("change", (e) => {
            let currentState = this.getDom().options.selectedIndex;
            //let option = this.getDom().options[currentState] this is dom
            __classPrivateFieldGet(this, _SelectionBox_changeCallbacks, "f").forEach(callback => {
                callback(this.getChild(currentState).getValue(), currentState, this.getChild(currentState));
            });
            __classPrivateFieldSet(this, _SelectionBox_lastState, currentState, "f");
        });
    }
    getDom() {
        return super.getDom();
    }
    addChildren(...args) {
        super.addChildren(...args);
        let _startIdx = Math.min(__classPrivateFieldGet(this, _SelectionBox_lastState, "f"), (this.getChildren().length - 1));
        this.getDom().options.selectedIndex = _startIdx;
        __classPrivateFieldSet(this, _SelectionBox_lastState, _startIdx, "f");
        return this;
    }
    ;
    /**
     * Sets the size of button
     * @param { "sm" | "md" | "lg" | "none" } size { "sm" | "md" | "lg" | "none" }
     */
    setSelectSize(size) {
        this.removeClass("form-select-sm", "form-select-lg");
        if (size === "sm" || size === "lg") {
            this.addClass("form-select-" + size);
        }
        return this;
    }
    ;
    /**
     * Show all items.
     * @param { boolean } value
     */
    multiple(value = true) {
        this.removeAttribute("multiple");
        if (value) {
            this.setAttribute("multiple", "");
        }
        return this;
    }
    ;
    /**
     * @param {1 | 2 | 3} value
     */
    setDisplaySize(value) {
        this.removeAttribute("size");
        if (value > 0) {
            this.setAttribute("size", value + "");
        }
        return this;
    }
    ;
    // It should be set after children is added to be able to dispatch change event
    setSelected(idx) {
        if (__classPrivateFieldGet(this, _SelectionBox_lastState, "f") == idx)
            return this;
        __classPrivateFieldSet(this, _SelectionBox_lastState, idx, "f");
        if (this.getChild(idx)) {
            this.getDom().options.selectedIndex = idx;
            this.getDom().dispatchEvent(new Event("change"));
        }
        return this;
    }
    ;
    /**
     * Callback will be called when state is changed
     * @param {function(Widget, boolean)} callback
     */
    addChangeCallback(callback) {
        __classPrivateFieldGet(this, _SelectionBox_changeCallbacks, "f").push(callback);
        return this;
    }
    ;
    removeChangeCallback(callback) {
        let idx = __classPrivateFieldGet(this, _SelectionBox_changeCallbacks, "f").indexOf(callback);
        if (idx >= 0) {
            __classPrivateFieldGet(this, _SelectionBox_changeCallbacks, "f").splice(idx, 1);
        }
        return this;
    }
    ;
    clearChangeCallbacks() {
        __classPrivateFieldGet(this, _SelectionBox_changeCallbacks, "f").length = 0;
        return this;
    }
    ;
    onChange(callback) {
        if (__classPrivateFieldGet(this, _SelectionBox_onChangeCallback, "f")) {
            this.removeChangeCallback(__classPrivateFieldGet(this, _SelectionBox_onChangeCallback, "f"));
            __classPrivateFieldSet(this, _SelectionBox_onChangeCallback, undefined, "f");
        }
        if (callback) {
            __classPrivateFieldSet(this, _SelectionBox_onChangeCallback, callback, "f");
            this.addChangeCallback(__classPrivateFieldGet(this, _SelectionBox_onChangeCallback, "f"));
        }
        return this;
    }
}
_SelectionBox_lastState = new WeakMap(), _SelectionBox_changeCallbacks = new WeakMap(), _SelectionBox_onChangeCallback = new WeakMap();
class SelectionItem extends Widget {
    constructor(text = "", value) {
        super("option");
        this.setText(text);
        this.setValue(value);
    }
    /**
    * Specifies the value for the input field
    * @param {any} value - Valid input: all
    */
    setValue(value) {
        this.setProperty("value", value);
        return this;
    }
    /**
     * Value of the input field
     * @returns {any} - Valid input: all
     */
    getValue() {
        return this.getProperty("value");
    }
    getContent() {
        return this.getChild(0);
    }
    /**
     * Replaces all childs of the button with given one. Leaving empty or passing null clears content.
     * @param {Widget} content
     */
    setContent(content) {
        this.clearChildren();
        content && this.setChild(content);
        return this;
    }
    ;
}
class Slider extends Input {
    constructor(options) {
        super("range");
        const { min, max, dValue, step } = Object.assign({ min: 0, max: 100, dValue: 0, step: 1 }, options);
        this.addClass("form-range");
        this.setAttribute("min", min);
        this.setAttribute("max", max);
        this.setAttribute("step", step);
        this.setProperty("defaultValue", dValue);
    }
}
/**
 * Represents side-comments and small print, like copyright and legal text
 */
class Small extends Widget {
    constructor(text = "") {
        super("small");
        this.setText(text);
    }
}
class Span extends Widget {
    constructor(text = "") {
        super("span");
        this.setText(text);
    }
}
class Spinner extends Widget {
    constructor(color) {
        super("div");
        _Spinner_color.set(this, void 0);
        _Spinner_spinner.set(this, new Widget("div"));
        _Spinner_type.set(this, "border");
        _Spinner_small.set(this, false);
        __classPrivateFieldGet(this, _Spinner_spinner, "f").addClass("spinner-border");
        __classPrivateFieldGet(this, _Spinner_spinner, "f").setAttribute("role", "status");
        const span = new Widget("span");
        span.addClass("visually-hidden");
        span.setText("Loading...");
        __classPrivateFieldGet(this, _Spinner_spinner, "f").addChildren(span);
        this.addChildren(__classPrivateFieldGet(this, _Spinner_spinner, "f"));
        color && this.setColor(color);
    }
    /**
     *
     * @param {string} value - Hex color code, valid inputs: "rgb", "rgba", "rrggbb", "rrggbbaa", "#rgb", "#rgba", "#rrggbb", "#rrggbbaa" | "initial" | "inherit"
     * @returns
     */
    setColor(value) {
        __classPrivateFieldGet(this, _Spinner_spinner, "f").removeClass(`text-${__classPrivateFieldGet(this, _Spinner_color, "f")}`);
        __classPrivateFieldSet(this, _Spinner_color, value, "f");
        __classPrivateFieldGet(this, _Spinner_spinner, "f").addClass(`text-${__classPrivateFieldGet(this, _Spinner_color, "f")}`);
        return this;
    }
    ;
    setDisplayType(type) {
        __classPrivateFieldGet(this, _Spinner_spinner, "f").removeClass("spinner-grow", "spinner-grow-sm", "spinner-border", "spinner-border-sm");
        __classPrivateFieldSet(this, _Spinner_type, type, "f");
        __classPrivateFieldGet(this, _Spinner_spinner, "f").addClass(`spinner-${__classPrivateFieldGet(this, _Spinner_type, "f")}`);
        __classPrivateFieldGet(this, _Spinner_small, "f") && __classPrivateFieldGet(this, _Spinner_spinner, "f").addClass(`spinner-${__classPrivateFieldGet(this, _Spinner_type, "f")}-sm`);
        return this;
    }
    /**
     * Sets the size of button
     * @param {boolean} value
     */
    small(value = true) {
        __classPrivateFieldSet(this, _Spinner_small, value, "f");
        __classPrivateFieldGet(this, _Spinner_spinner, "f").removeClass("spinner-" + __classPrivateFieldGet(this, _Spinner_type, "f") + "-sm");
        __classPrivateFieldGet(this, _Spinner_small, "f") && __classPrivateFieldGet(this, _Spinner_spinner, "f").addClass("spinner-" + __classPrivateFieldGet(this, _Spinner_type, "f") + "-sm");
        return this;
    }
    ;
}
_Spinner_color = new WeakMap(), _Spinner_spinner = new WeakMap(), _Spinner_type = new WeakMap(), _Spinner_small = new WeakMap();
class Split extends Row {
    constructor(dividerPos = 50) {
        super();
        _Split_isRow.set(this, true);
        _Split_dividerPos.set(this, void 0);
        _Split_dividerThickness.set(this, 5);
        _Split_snapTolerance.set(this, 20);
        _Split_minSize.set(this, 0);
        _Split_maxSize.set(this, 0);
        _Split_dividerMax.set(this, 0);
        _Split_firstVisState.set(this, true);
        _Split_secondVisState.set(this, true);
        _Split_firstContent.set(this, void 0);
        _Split_secondContent.set(this, void 0);
        _Split_first.set(this, new Column());
        _Split_second.set(this, new Column());
        _Split_divider.set(this, new Widget("a")); // div or others create problems on touch on chrome
        _Split_resizable.set(this, void 0);
        _Split_callback.set(this, void 0);
        __classPrivateFieldSet(this, _Split_dividerPos, dividerPos, "f");
        this.stretch().setPositioning("relative").alignItems("stretch").setPositioning("relative");
        __classPrivateFieldGet(this, _Split_first, "f").addClass("overflow-hidden");
        __classPrivateFieldGet(this, _Split_second, "f").addClass("overflow-hidden");
        __classPrivateFieldGet(this, _Split_divider, "f").addClass("align-self-stretch").setPositioning("absolute");
        this.setDividerColor("secondary");
        __classPrivateFieldSet(this, _Split_resizable, new Row().alignItems("stretch").stretch().setPositioning("absolute"), "f");
        __classPrivateFieldGet(this, _Split_resizable, "f").addChildren(__classPrivateFieldGet(this, _Split_first, "f"), __classPrivateFieldGet(this, _Split_divider, "f"), __classPrivateFieldGet(this, _Split_second, "f"));
        this.addChildren(__classPrivateFieldGet(this, _Split_resizable, "f"));
        // A function is used for dragging and moving
        let dragElement = (dividerDom, firstDom, secondDom) => {
            let md; // remember mouse down info
            if (isMobileDevice()) {
                dividerDom.ontouchstart = (e) => {
                    onMouseDown(e);
                    e.preventDefault();
                };
            }
            else {
                dividerDom.onpointerdown = (e) => {
                    dividerDom.setPointerCapture(e.pointerId);
                    onMouseDown(e);
                    e.preventDefault();
                };
            }
            let onMouseDown = (e) => {
                const firstRect = firstDom.getBoundingClientRect();
                const secondRect = secondDom.getBoundingClientRect();
                firstDom.style.removeProperty("width");
                firstDom.style.removeProperty("height");
                secondDom.style.removeProperty("width");
                secondDom.style.removeProperty("height");
                if (__classPrivateFieldGet(this, _Split_isRow, "f")) {
                    firstDom.style.width = firstRect.width + "px";
                    secondDom.style.width = secondRect.width + "px";
                    __classPrivateFieldSet(this, _Split_maxSize, firstRect.width + secondRect.width - __classPrivateFieldGet(this, _Split_minSize, "f"), "f");
                }
                else {
                    firstDom.style.height = firstRect.height + "px";
                    secondDom.style.height = secondRect.height + "px";
                    __classPrivateFieldSet(this, _Split_maxSize, firstRect.height + secondRect.height - __classPrivateFieldGet(this, _Split_minSize, "f"), "f");
                }
                __classPrivateFieldSet(this, _Split_dividerMax, __classPrivateFieldGet(this, _Split_maxSize, "f") + __classPrivateFieldGet(this, _Split_minSize, "f") - __classPrivateFieldGet(this, _Split_dividerThickness, "f"), "f");
                md = {
                    e,
                    offsetLeft: dividerDom.offsetLeft,
                    offsetTop: dividerDom.offsetTop,
                    firstWidth: firstRect.width,
                    firstHeight: firstRect.height,
                    secondWidth: secondRect.width,
                    secondHeight: secondRect.height
                };
                if (isMobileDevice()) {
                    dividerDom.ontouchmove = (e) => {
                        onMouseMove(e);
                        e.preventDefault();
                    };
                    dividerDom.ontouchend = (e) => {
                        dividerDom.ontouchmove = dividerDom.ontouchend = null;
                        e.preventDefault();
                    };
                }
                else {
                    dividerDom.onpointermove = (e) => {
                        onMouseMove(e);
                        e.preventDefault();
                    };
                    dividerDom.onpointerup = (e) => {
                        dividerDom.releasePointerCapture(e.pointerId);
                        dividerDom.onpointermove = dividerDom.onpointerup = null;
                        e.preventDefault();
                    };
                }
            };
            let onMouseMove = (e) => {
                var delta = {
                    x: e.type === "touchmove" ? e.touches[0].clientX - md.e.touches[0].clientX : e.clientX - md.e.clientX,
                    y: e.type === "touchmove" ? e.touches[0].clientY - md.e.touches[0].clientY : e.clientY - md.e.clientY,
                };
                let maxSize = __classPrivateFieldGet(this, _Split_maxSize, "f");
                if (__classPrivateFieldGet(this, _Split_isRow, "f")) // Horizontal
                 {
                    // Prevent negative-sized elements
                    delta.x = Math.min(Math.max(delta.x, -md.firstWidth), md.secondWidth);
                    let firstWidth = (md.firstWidth + delta.x);
                    let secondWidth = (md.secondWidth - delta.x);
                    if (firstWidth < __classPrivateFieldGet(this, _Split_snapTolerance, "f")) {
                        secondWidth += firstWidth;
                        firstWidth = 0;
                        maxSize = secondWidth;
                        if (__classPrivateFieldGet(this, _Split_firstVisState, "f")) {
                            __classPrivateFieldGet(this, _Split_first, "f").hide();
                            __classPrivateFieldSet(this, _Split_firstVisState, false, "f");
                        }
                    }
                    else {
                        if (!__classPrivateFieldGet(this, _Split_firstVisState, "f")) {
                            __classPrivateFieldGet(this, _Split_first, "f").show();
                            __classPrivateFieldSet(this, _Split_firstVisState, true, "f");
                        }
                    }
                    if (secondWidth < __classPrivateFieldGet(this, _Split_snapTolerance, "f")) {
                        firstWidth += secondWidth;
                        secondWidth = 0;
                        maxSize = firstWidth;
                        if (__classPrivateFieldGet(this, _Split_secondVisState, "f")) {
                            __classPrivateFieldGet(this, _Split_second, "f").hide();
                            __classPrivateFieldSet(this, _Split_secondVisState, false, "f");
                        }
                    }
                    else {
                        if (!__classPrivateFieldGet(this, _Split_secondVisState, "f")) {
                            __classPrivateFieldGet(this, _Split_second, "f").show();
                            __classPrivateFieldSet(this, _Split_secondVisState, true, "f");
                        }
                    }
                    let newFirstWidth = __classPrivateFieldGet(this, _Split_firstVisState, "f") ? Math.max(Math.min(firstWidth, maxSize), __classPrivateFieldGet(this, _Split_minSize, "f")) : 0;
                    firstDom.style.width = newFirstWidth + "px";
                    secondDom.style.width = __classPrivateFieldGet(this, _Split_secondVisState, "f") ? Math.max(Math.min(secondWidth, maxSize), __classPrivateFieldGet(this, _Split_minSize, "f")) + "px" : "0";
                    dividerDom.style.left = Math.min(newFirstWidth, __classPrivateFieldGet(this, _Split_dividerMax, "f")) + "px";
                    __classPrivateFieldGet(this, _Split_callback, "f") && __classPrivateFieldGet(this, _Split_callback, "f").call(this, parseInt(firstDom.style.width, 10), parseInt(secondDom.style.width, 10));
                }
                else {
                    // Prevent negative-sized elements
                    delta.y = Math.min(Math.max(delta.y, -md.firstHeight), md.secondHeight);
                    let firstheight = (md.firstHeight + delta.y);
                    let secondheight = (md.secondHeight - delta.y);
                    if (firstheight < __classPrivateFieldGet(this, _Split_snapTolerance, "f")) {
                        secondheight += firstheight;
                        firstheight = 0;
                        maxSize = secondheight;
                        if (__classPrivateFieldGet(this, _Split_firstVisState, "f")) {
                            __classPrivateFieldGet(this, _Split_first, "f").hide();
                            __classPrivateFieldSet(this, _Split_firstVisState, false, "f");
                        }
                    }
                    else {
                        if (!__classPrivateFieldGet(this, _Split_firstVisState, "f")) {
                            __classPrivateFieldGet(this, _Split_first, "f").show();
                            __classPrivateFieldSet(this, _Split_firstVisState, true, "f");
                        }
                    }
                    if (secondheight < __classPrivateFieldGet(this, _Split_snapTolerance, "f")) {
                        firstheight += secondheight;
                        secondheight = 0;
                        maxSize = firstheight;
                        if (__classPrivateFieldGet(this, _Split_secondVisState, "f")) {
                            __classPrivateFieldGet(this, _Split_second, "f").hide();
                            __classPrivateFieldSet(this, _Split_secondVisState, false, "f");
                        }
                    }
                    else {
                        if (!__classPrivateFieldGet(this, _Split_secondVisState, "f")) {
                            __classPrivateFieldGet(this, _Split_second, "f").show();
                            __classPrivateFieldSet(this, _Split_secondVisState, true, "f");
                        }
                    }
                    let newFirstHeight = __classPrivateFieldGet(this, _Split_firstVisState, "f") ? Math.max(Math.min(firstheight, maxSize), __classPrivateFieldGet(this, _Split_minSize, "f")) : 0;
                    firstDom.style.height = newFirstHeight + "px";
                    secondDom.style.height = __classPrivateFieldGet(this, _Split_secondVisState, "f") ? Math.max(Math.min(secondheight, maxSize), __classPrivateFieldGet(this, _Split_minSize, "f")) + "px" : "0";
                    dividerDom.style.top = Math.min(newFirstHeight, __classPrivateFieldGet(this, _Split_dividerMax, "f")) + "px";
                    __classPrivateFieldGet(this, _Split_callback, "f") && __classPrivateFieldGet(this, _Split_callback, "f").call(this, parseInt(firstDom.style.height, 10), parseInt(secondDom.style.height, 10));
                }
            };
        };
        dragElement(__classPrivateFieldGet(this, _Split_divider, "f").getDom(), __classPrivateFieldGet(this, _Split_first, "f").getDom(), __classPrivateFieldGet(this, _Split_second, "f").getDom());
        this.row();
        new ResizeObserver(() => {
            this.fixSize();
        }).observe(__classPrivateFieldGet(this, _Split_resizable, "f").getDom());
    }
    fixSize() {
        let first = __classPrivateFieldGet(this, _Split_first, "f").getDom();
        let second = __classPrivateFieldGet(this, _Split_second, "f").getDom();
        const parent = this.getDom();
        const parentRect = parent.getBoundingClientRect();
        const firstRect = first.getBoundingClientRect();
        const secondRect = second.getBoundingClientRect();
        if (__classPrivateFieldGet(this, _Split_isRow, "f")) {
            if (firstRect.width > secondRect.width) {
                let newWidth = parentRect.width - secondRect.width;
                first.style.width = newWidth + "px";
            }
            else {
                let newWidth = parentRect.width - firstRect.width;
                second.style.width = newWidth + "px";
            }
            __classPrivateFieldGet(this, _Split_divider, "f").getDom().style.left = second.offsetLeft + "px";
        }
        else {
            if (firstRect.height > secondRect.height) {
                let newHeight = parentRect.height - secondRect.height;
                first.style.height = newHeight + "px";
            }
            else {
                let newHeight = parentRect.height - firstRect.height;
                second.style.height = newHeight + "px";
            }
            __classPrivateFieldGet(this, _Split_divider, "f").getDom().style.top = second.offsetTop + "px";
        }
    }
    setDir() {
        if (__classPrivateFieldGet(this, _Split_isRow, "f")) {
            __classPrivateFieldGet(this, _Split_divider, "f").setMinWidth(__classPrivateFieldGet(this, _Split_dividerThickness, "f"));
            __classPrivateFieldGet(this, _Split_divider, "f").setMinHeight(100, "%");
            __classPrivateFieldGet(this, _Split_divider, "f").setCursor("col-resize");
            __classPrivateFieldGet(this, _Split_second, "f").removeStyle("padding-top");
            __classPrivateFieldGet(this, _Split_second, "f").setStyle("padding-left", __classPrivateFieldGet(this, _Split_dividerThickness, "f") + "px");
        }
        else {
            __classPrivateFieldGet(this, _Split_divider, "f").setMinWidth(100, "%");
            __classPrivateFieldGet(this, _Split_divider, "f").setMinHeight(__classPrivateFieldGet(this, _Split_dividerThickness, "f"));
            __classPrivateFieldGet(this, _Split_divider, "f").setCursor("row-resize");
            __classPrivateFieldGet(this, _Split_second, "f").setStyle("padding-top", __classPrivateFieldGet(this, _Split_dividerThickness, "f") + "px");
            __classPrivateFieldGet(this, _Split_second, "f").removeStyle("padding-left");
        }
    }
    /**
     * Sets the color of button.
     * @param value - primary | secondary | success | danger | warning | info | light | dark
     * @returns - this
     */
    setDividerColor(value) {
        __classPrivateFieldGet(this, _Split_divider, "f").setBgColor(value);
        return this;
    }
    setDividerThickness(thickness) {
        __classPrivateFieldSet(this, _Split_dividerThickness, thickness, "f");
        this.setDir();
        return this;
    }
    row() {
        __classPrivateFieldGet(this, _Split_resizable, "f").row();
        __classPrivateFieldSet(this, _Split_isRow, true, "f");
        this.setDir();
        this.setDividerPos(__classPrivateFieldGet(this, _Split_dividerPos, "f"));
        return this;
    }
    column() {
        __classPrivateFieldGet(this, _Split_resizable, "f").column();
        __classPrivateFieldSet(this, _Split_isRow, false, "f");
        this.setDir();
        this.setDividerPos(__classPrivateFieldGet(this, _Split_dividerPos, "f"));
        return this;
    }
    setSnapTolerance(val) {
        __classPrivateFieldSet(this, _Split_snapTolerance, val, "f");
        return this;
    }
    ;
    setFirstContent(value) {
        __classPrivateFieldSet(this, _Split_firstContent, value, "f");
        __classPrivateFieldGet(this, _Split_first, "f").clearChildren();
        if (__classPrivateFieldGet(this, _Split_firstContent, "f")) {
            __classPrivateFieldGet(this, _Split_first, "f").addChildren(__classPrivateFieldGet(this, _Split_firstContent, "f"));
        }
        return this;
    }
    ;
    getFirstContent() {
        return __classPrivateFieldGet(this, _Split_firstContent, "f");
    }
    ;
    setSecondContent(value) {
        __classPrivateFieldSet(this, _Split_secondContent, value, "f");
        __classPrivateFieldGet(this, _Split_second, "f").clearChildren();
        if (__classPrivateFieldGet(this, _Split_secondContent, "f")) {
            __classPrivateFieldGet(this, _Split_second, "f").addChildren(__classPrivateFieldGet(this, _Split_secondContent, "f"));
        }
        return this;
    }
    ;
    getSecondContent() {
        return __classPrivateFieldGet(this, _Split_secondContent, "f");
    }
    ;
    onSizeChange(callback) {
        __classPrivateFieldSet(this, _Split_callback, callback, "f");
        return this;
    }
    ;
    setDividerPos(value, unit = "%") {
        this.runOnMount(() => {
            let first = __classPrivateFieldGet(this, _Split_first, "f").getDom();
            let second = __classPrivateFieldGet(this, _Split_second, "f").getDom();
            const parent = this.getDom();
            const parentRect = parent.getBoundingClientRect();
            if (unit === "%") {
                __classPrivateFieldSet(this, _Split_dividerPos, value / 100, "f");
                if (__classPrivateFieldGet(this, _Split_isRow, "f")) {
                    let newFirstWidth = parentRect.width * __classPrivateFieldGet(this, _Split_dividerPos, "f");
                    first.style.width = newFirstWidth + "px";
                    second.style.width = parentRect.width * (1 - __classPrivateFieldGet(this, _Split_dividerPos, "f")) + "px";
                    __classPrivateFieldGet(this, _Split_divider, "f").getDom().style.left = Math.min(newFirstWidth, parentRect.width - __classPrivateFieldGet(this, _Split_dividerThickness, "f")) + "px";
                }
                else {
                    let newFirstHeight = parentRect.height * __classPrivateFieldGet(this, _Split_dividerPos, "f");
                    first.style.height = newFirstHeight + "px";
                    second.style.height = parentRect.height * (1 - __classPrivateFieldGet(this, _Split_dividerPos, "f")) + "px";
                    __classPrivateFieldGet(this, _Split_divider, "f").getDom().style.top = Math.min(newFirstHeight, parentRect.height - __classPrivateFieldGet(this, _Split_dividerThickness, "f")) + "px";
                }
            }
            else {
                const dividerPercentage = value / (__classPrivateFieldGet(this, _Split_isRow, "f") ? parentRect.width : parentRect.height);
                this.setDividerPos(dividerPercentage * 100);
            }
        });
        return this;
    }
    ;
    setStartSize(left, right) {
        this.runOnMount(() => {
            const parentRect = this.getDom().getBoundingClientRect();
            if (left) {
                if (__classPrivateFieldGet(this, _Split_isRow, "f")) {
                    this.setDividerPos((left / parentRect.width) * 100);
                }
                else {
                    this.setDividerPos((left / parentRect.height) * 100);
                }
            }
            if (right) {
                if (__classPrivateFieldGet(this, _Split_isRow, "f")) {
                    this.setDividerPos(100 - (right / parentRect.width) * 100);
                }
                else {
                    this.setDividerPos(100 - (right / parentRect.height) * 100);
                }
            }
        });
        return this;
    }
    setMinSplitSize(value) {
        __classPrivateFieldSet(this, _Split_minSize, value, "f");
        return this;
    }
}
_Split_isRow = new WeakMap(), _Split_dividerPos = new WeakMap(), _Split_dividerThickness = new WeakMap(), _Split_snapTolerance = new WeakMap(), _Split_minSize = new WeakMap(), _Split_maxSize = new WeakMap(), _Split_dividerMax = new WeakMap(), _Split_firstVisState = new WeakMap(), _Split_secondVisState = new WeakMap(), _Split_firstContent = new WeakMap(), _Split_secondContent = new WeakMap(), _Split_first = new WeakMap(), _Split_second = new WeakMap(), _Split_divider = new WeakMap(), _Split_resizable = new WeakMap(), _Split_callback = new WeakMap();
class Stretch extends Widget {
    constructor() {
        super("div");
        this.stretch(100, 100);
    }
}
class SubmenuItem extends DropdownItem {
    constructor(text = "") {
        super();
        _SubmenuItem_submenu.set(this, new Widget("div"));
        _SubmenuItem_dropdownMenu.set(this, new ContextMenu());
        _SubmenuItem_link.set(this, new Widget("a"));
        _SubmenuItem_onclickCallback.set(this, void 0);
        __classPrivateFieldGet(this, _SubmenuItem_submenu, "f").addClass("dropend");
        __classPrivateFieldGet(this, _SubmenuItem_link, "f").addClass("submenu-item", "dropdown-toggle");
        __classPrivateFieldGet(this, _SubmenuItem_link, "f").setAttribute("data-bs-toggle", "dropdown");
        __classPrivateFieldGet(this, _SubmenuItem_link, "f").setProperty("type", "button");
        __classPrivateFieldGet(this, _SubmenuItem_link, "f").addSpacing("px-0");
        __classPrivateFieldGet(this, _SubmenuItem_link, "f").setText(text);
        __classPrivateFieldGet(this, _SubmenuItem_link, "f").setStyle("color", "inherit"); // nav-link class makes it blue
        __classPrivateFieldGet(this, _SubmenuItem_submenu, "f").addChildren(__classPrivateFieldGet(this, _SubmenuItem_link, "f"));
        __classPrivateFieldGet(this, _SubmenuItem_submenu, "f").addChildren(__classPrivateFieldGet(this, _SubmenuItem_dropdownMenu, "f"));
        super.setContent(__classPrivateFieldGet(this, _SubmenuItem_submenu, "f"));
        this.addEventListener("mouseover", () => {
            Dropdown.getOrCreateInstance(__classPrivateFieldGet(this, _SubmenuItem_link, "f").getDom()).show();
        });
        this.addEventListener("mouseleave", () => {
            Dropdown.getOrCreateInstance(__classPrivateFieldGet(this, _SubmenuItem_link, "f").getDom()).hide();
        });
    }
    addChildren(...args) {
        __classPrivateFieldGet(this, _SubmenuItem_dropdownMenu, "f").addChildren(...args);
        return this;
    }
    ;
    removeChild(...args) {
        __classPrivateFieldGet(this, _SubmenuItem_dropdownMenu, "f").removeChild(...args);
        return this;
    }
    ;
    removeChildAt(idx) {
        __classPrivateFieldGet(this, _SubmenuItem_dropdownMenu, "f").removeChildAt(idx);
        return this;
    }
    ;
    getContent() {
        return __classPrivateFieldGet(this, _SubmenuItem_link, "f").getChild(0);
    }
    /**
     * Replaces all childs of the button with given one. Leaving empty or passing null clears content.
     * @param {Widget} content
     */
    setContent(content) {
        __classPrivateFieldGet(this, _SubmenuItem_link, "f").clearChildren();
        content && __classPrivateFieldGet(this, _SubmenuItem_link, "f").setChild(content);
        return this;
    }
    ;
    getText() {
        return __classPrivateFieldGet(this, _SubmenuItem_link, "f").getText();
    }
    /**
     * Sets the text of the button.
     * @param {string} text
     */
    setText(text) {
        __classPrivateFieldGet(this, _SubmenuItem_link, "f").setText(text);
        return this;
    }
    ;
    click() {
        __classPrivateFieldGet(this, _SubmenuItem_link, "f").getDom().click();
        return this;
    }
    ;
    onClick(callback) {
        if (__classPrivateFieldGet(this, _SubmenuItem_onclickCallback, "f")) {
            __classPrivateFieldGet(this, _SubmenuItem_link, "f").removeEventListener(__classPrivateFieldGet(this, _SubmenuItem_onclickCallback, "f"));
            __classPrivateFieldSet(this, _SubmenuItem_onclickCallback, undefined, "f");
        }
        if (callback) {
            __classPrivateFieldSet(this, _SubmenuItem_onclickCallback, e => callback(this, e), "f");
            __classPrivateFieldGet(this, _SubmenuItem_onclickCallback, "f").event = "click";
            __classPrivateFieldGet(this, _SubmenuItem_link, "f").addEventListener("click", __classPrivateFieldGet(this, _SubmenuItem_onclickCallback, "f"));
        }
        return this;
    }
    ;
    /**
     * Sets the where dropdown menu show up.
     * @param {"dropup" | "dropdown" | "dropstart" | "dropend"} value - { "dropup" | "dropdown" | "dropstart" | "dropend" }
     */
    setDropSide(value) {
        __classPrivateFieldGet(this, _SubmenuItem_submenu, "f").removeClass("dropup", "dropdown", "dropstart", "dropend");
        __classPrivateFieldGet(this, _SubmenuItem_submenu, "f").addClass(value);
        return this;
    }
    ;
    /**
     *Sets the menu alignment.
     * @param {"start" | "end" | "none"} value - { "start" | "end" | "none" }
     */
    alignMenu(value) {
        __classPrivateFieldGet(this, _SubmenuItem_dropdownMenu, "f").alignMenu(value);
        return this;
    }
    ;
    /**
    * Switches the menu color light and dark.
    * @param { boolean } value
    */
    dark(value = true) {
        __classPrivateFieldGet(this, _SubmenuItem_dropdownMenu, "f").dark(value);
        return this;
    }
    ;
}
_SubmenuItem_submenu = new WeakMap(), _SubmenuItem_dropdownMenu = new WeakMap(), _SubmenuItem_link = new WeakMap(), _SubmenuItem_onclickCallback = new WeakMap();
class Switch extends Widget {
    constructor(label = "", startState = false) {
        super("div");
        _Switch_input.set(this, new Widget("input"));
        _Switch_label.set(this, new Widget("label"));
        _Switch_changeCallbacks.set(this, []);
        _Switch_fireChangeEvenet.set(this, () => {
            __classPrivateFieldGet(this, _Switch_changeCallbacks, "f").forEach(callback => {
                callback(this.isChecked(), this);
            });
        });
        _Switch_onChangeCallback.set(this, void 0);
        this.addClass("form-check", "form-switch");
        __classPrivateFieldGet(this, _Switch_input, "f").addClass("form-check-input");
        __classPrivateFieldGet(this, _Switch_input, "f").setProperty("type", "checkbox");
        __classPrivateFieldGet(this, _Switch_input, "f").setProperty("role", "switch");
        __classPrivateFieldGet(this, _Switch_input, "f").setAttribute("name", "radio"); // it will allow to toggle between radios that share this name
        startState && __classPrivateFieldGet(this, _Switch_input, "f").setProperty("checked", true);
        __classPrivateFieldGet(this, _Switch_label, "f").addClass("form-check-label");
        __classPrivateFieldGet(this, _Switch_label, "f").setText(label);
        this.addChildren(__classPrivateFieldGet(this, _Switch_input, "f"), __classPrivateFieldGet(this, _Switch_label, "f"));
        __classPrivateFieldGet(this, _Switch_input, "f").addEventListener("change", (e) => {
            __classPrivateFieldGet(this, _Switch_fireChangeEvenet, "f").call(this);
        });
    }
    setLabel(label = "") {
        __classPrivateFieldGet(this, _Switch_label, "f").setText(label);
        return this;
    }
    getLabel() {
        return __classPrivateFieldGet(this, _Switch_label, "f").getText();
    }
    truncateText(value = true) {
        __classPrivateFieldGet(this, _Switch_label, "f").truncateText(value);
        return this;
    }
    /**
     * Toggles the button if it is set as toggle button.
     */
    toggle() {
        __classPrivateFieldGet(this, _Switch_input, "f").setProperty("checked", !this.isChecked());
        __classPrivateFieldGet(this, _Switch_fireChangeEvenet, "f").call(this);
        return this;
    }
    ;
    /**
     * Sets checked if it is a toggle button.
     * @param {boolean} [value]
     */
    setChecked(value = true) {
        if (this.isChecked() != value) {
            __classPrivateFieldGet(this, _Switch_input, "f").setProperty("checked", value);
        }
        return this;
    }
    ;
    /**
     * Returns if this toggle is active or not.
     */
    isChecked() {
        return __classPrivateFieldGet(this, _Switch_input, "f").getProperty("checked");
    }
    ;
    /**
     * Specifies that an input field is required (must be filled out)
     * @param {boolean} value - Valid input: almost all
     */
    required(value) {
        __classPrivateFieldGet(this, _Switch_input, "f").setProperty("required", value);
        return this;
    }
    /**
     * Required state of input
     * @returns {boolean} - Valid input: almost all
     */
    isRequired() {
        return __classPrivateFieldGet(this, _Switch_input, "f").getProperty("required");
    }
    disable() {
        __classPrivateFieldGet(this, _Switch_input, "f").disable();
        __classPrivateFieldGet(this, _Switch_label, "f").disable();
        return this;
    }
    enable() {
        __classPrivateFieldGet(this, _Switch_input, "f").enable();
        __classPrivateFieldGet(this, _Switch_label, "f").enable();
        return this;
    }
    /**
    * Specifies the value for the input field
    * @param {any} value - Valid input: all
    */
    setValue(value) {
        __classPrivateFieldGet(this, _Switch_input, "f").setProperty("value", value);
        return this;
    }
    /**
     * Value of the input field
     * @returns {any} - Valid input: all
     */
    getValue() {
        return __classPrivateFieldGet(this, _Switch_input, "f").getProperty("value");
    }
    /**
     * Callback will be called when state is changed
     * @param {function(Widget, boolean)} callback
     */
    addChangeCallback(callback) {
        __classPrivateFieldGet(this, _Switch_changeCallbacks, "f").push(callback);
        return this;
    }
    ;
    removeChangeCallback(callback) {
        let idx = __classPrivateFieldGet(this, _Switch_changeCallbacks, "f").indexOf(callback);
        if (idx >= 0) {
            __classPrivateFieldGet(this, _Switch_changeCallbacks, "f").splice(idx, 1);
        }
        return this;
    }
    ;
    clearChangeCallbacks() {
        __classPrivateFieldGet(this, _Switch_changeCallbacks, "f").length = 0;
        return this;
    }
    ;
    onChange(callback) {
        if (__classPrivateFieldGet(this, _Switch_onChangeCallback, "f")) {
            this.removeChangeCallback(__classPrivateFieldGet(this, _Switch_onChangeCallback, "f"));
            __classPrivateFieldSet(this, _Switch_onChangeCallback, undefined, "f");
        }
        if (callback) {
            __classPrivateFieldSet(this, _Switch_onChangeCallback, callback, "f");
            this.addChangeCallback(__classPrivateFieldGet(this, _Switch_onChangeCallback, "f"));
        }
        return this;
    }
}
_Switch_input = new WeakMap(), _Switch_label = new WeakMap(), _Switch_changeCallbacks = new WeakMap(), _Switch_fireChangeEvenet = new WeakMap(), _Switch_onChangeCallback = new WeakMap();
class Table extends Widget {
    constructor(rows, cols) {
        super("div");
        _Table_table.set(this, new Widget("table"));
        _Table_header.set(this, new Widget("thead"));
        _Table_headerRow.set(this, new Widget("tr"));
        _Table_body.set(this, new Widget("tbody"));
        _Table_bodyRows.set(this, []);
        _Table_footer.set(this, new Widget("tfoot"));
        _Table_footerRow.set(this, new Widget("tr"));
        _Table_caption.set(this, new Widget("caption"));
        _Table_rows.set(this, 0);
        _Table_cols.set(this, 0);
        _Table_headerColor.set(this, void 0);
        _Table_headerColors.set(this, void 0);
        _Table_rowColors.set(this, void 0);
        _Table_cellColors.set(this, void 0);
        _Table_footerColor.set(this, void 0);
        _Table_footerColors.set(this, void 0);
        // Table
        _Table_tableColor.set(this, void 0);
        __classPrivateFieldGet(this, _Table_table, "f").addClass("table", "table-striped", "table-bordered");
        __classPrivateFieldSet(this, _Table_rows, rows, "f");
        __classPrivateFieldSet(this, _Table_cols, cols, "f");
        __classPrivateFieldGet(this, _Table_header, "f").addChildren(__classPrivateFieldGet(this, _Table_headerRow, "f"));
        for (let i = 0; i < cols; i++) {
            __classPrivateFieldGet(this, _Table_headerRow, "f").addChildren(new Widget("th"));
        }
        for (let i = 0; i < rows; i++) {
            let row = new Widget("tr");
            __classPrivateFieldGet(this, _Table_body, "f").addChildren(row);
            __classPrivateFieldGet(this, _Table_bodyRows, "f").push(row);
            for (let i = 0; i < cols; i++) {
                row.addChildren(new Widget("td").alignText("center").setWidth(10).setHeight(5));
            }
        }
        __classPrivateFieldGet(this, _Table_footer, "f").addChildren(__classPrivateFieldGet(this, _Table_footerRow, "f")).hide();
        for (let i = 0; i < cols; i++) {
            __classPrivateFieldGet(this, _Table_footerRow, "f").addChildren(new Widget("th"));
        }
        __classPrivateFieldGet(this, _Table_table, "f").addChildren(__classPrivateFieldGet(this, _Table_caption, "f"), __classPrivateFieldGet(this, _Table_header, "f"), __classPrivateFieldGet(this, _Table_body, "f"), __classPrivateFieldGet(this, _Table_footer, "f"));
        this.addChildren(__classPrivateFieldGet(this, _Table_table, "f"));
    }
    clampCol(col) {
        col = Math.max(0, col);
        col = Math.min(col, __classPrivateFieldGet(this, _Table_cols, "f") - 1);
        return col;
    }
    clampRow(row) {
        row = Math.max(0, row);
        row = Math.min(row, __classPrivateFieldGet(this, _Table_rows, "f") - 1);
        return row;
    }
    // header
    showHeader() {
        __classPrivateFieldGet(this, _Table_header, "f").show();
        return this;
    }
    hideHeader() {
        __classPrivateFieldGet(this, _Table_header, "f").hide();
        return this;
    }
    getHeaderCellText(col) {
        col = this.clampCol(col);
        return __classPrivateFieldGet(this, _Table_headerRow, "f").getChild(col).getText();
    }
    setHeaderCellText(col, text) {
        col = this.clampCol(col);
        __classPrivateFieldGet(this, _Table_headerRow, "f").getChild(col).setText(text);
        return this;
    }
    setHeaderCellContent(col, content) {
        col = this.clampCol(col);
        let cell = __classPrivateFieldGet(this, _Table_headerRow, "f").getChild(col);
        cell.clearChildren();
        content && cell.setChild(content);
        return this;
    }
    mergeHeaderColumns(startCol, endCol) {
        startCol = this.clampCol(startCol);
        endCol = this.clampCol(endCol);
        let cell = __classPrivateFieldGet(this, _Table_headerRow, "f").getChild(startCol);
        let oldSpanNumber = ~~cell.getAttribute("colspan");
        //check if it already has format and clear
        if (!oldSpanNumber) {
            for (let i = startCol + 1; i <= endCol; i++) {
                let cell = __classPrivateFieldGet(this, _Table_headerRow, "f").getChild(i);
                if (cell.hasAttribute("colspan")) {
                    console.log("Overlaps another merged column, skipped");
                    return this;
                }
            }
            if (__classPrivateFieldGet(this, _Table_headerRow, "f").getChild(startCol).isHidden()) {
                console.log("Overlaps another merged row, skipped");
                return this;
            }
        }
        if (oldSpanNumber > 1) {
            for (let i = startCol + 1; i < startCol + oldSpanNumber; i++) {
                __classPrivateFieldGet(this, _Table_headerRow, "f").getChild(i).show();
            }
        }
        cell.removeAttribute("colspan");
        let numberOfSpan = (endCol - startCol) + 1;
        numberOfSpan > 1 && cell.setAttribute("colspan", numberOfSpan.toString());
        for (let i = startCol + 1; i <= endCol; i++) {
            __classPrivateFieldGet(this, _Table_headerRow, "f").getChild(i).hide();
        }
        return this;
    }
    alignHeaderCellVertical(value, col) {
        col = this.clampRow(col);
        let cell = __classPrivateFieldGet(this, _Table_headerRow, "f").getChild(col);
        cell.removeClass("align-top", "align-middle", "align-bottom");
        value !== "none" && cell.addClass(`align-${value}`);
        return this;
    }
    alignHeaderCellHorizontal(value, col) {
        col = this.clampRow(col);
        let cell = __classPrivateFieldGet(this, _Table_headerRow, "f").getChild(col);
        cell.alignText(value);
        return this;
    }
    setHeaderColor(value) {
        __classPrivateFieldGet(this, _Table_header, "f").removeClass(`table-${__classPrivateFieldGet(this, _Table_headerColor, "f")}`);
        if (value) {
            __classPrivateFieldSet(this, _Table_headerColor, value, "f");
            __classPrivateFieldGet(this, _Table_header, "f").addClass(`table-${__classPrivateFieldGet(this, _Table_headerColor, "f")}`);
        }
        return this;
    }
    setHeaderCellColor(col, value) {
        col = this.clampCol(col);
        let headerCell = __classPrivateFieldGet(this, _Table_headerRow, "f").getChild(col);
        __classPrivateFieldGet(this, _Table_headerColors, "f")[col] && headerCell.removeClass(`table-${__classPrivateFieldGet(this, _Table_headerColors, "f")[col]}`);
        if (value) {
            __classPrivateFieldGet(this, _Table_headerColors, "f")[col] = value;
            headerCell.addClass(`table-${__classPrivateFieldGet(this, _Table_headerColors, "f")[col]}`);
        }
        return this;
    }
    // Body
    getCell(row, col) {
        return __classPrivateFieldGet(this, _Table_bodyRows, "f")[row].getChild(col);
    }
    getCellText(row, col) {
        col = this.clampCol(col);
        return this.getCell(row, col).getText();
    }
    setCellText(row, col, text) {
        col = this.clampCol(col);
        this.getCell(row, col).setText(text);
        return this;
    }
    setCellContent(row, col, content) {
        col = this.clampCol(col);
        let cell = this.getCell(row, col);
        cell.clearChildren();
        content && cell.setChild(content);
        return this;
    }
    mergeColumns(row, startCol, endCol) {
        startCol = this.clampCol(startCol);
        endCol = this.clampCol(endCol);
        let cell = this.getCell(row, startCol);
        let oldSpanNumber = ~~cell.getAttribute("colspan");
        //check if it already has format and clear
        if (!oldSpanNumber) {
            for (let i = startCol + 1; i <= endCol; i++) {
                let cell = this.getCell(row, i);
                if (cell.hasAttribute("colspan")) {
                    console.log("Overlaps another merged column, skipped");
                    return this;
                }
            }
            if (this.getCell(row, startCol).isHidden()) {
                console.log("Overlaps another merged row, skipped");
                return this;
            }
        }
        if (oldSpanNumber > 1) {
            for (let i = startCol + 1; i < startCol + oldSpanNumber; i++) {
                this.getCell(row, i).show();
            }
        }
        cell.removeAttribute("colspan");
        let numberOfSpan = (endCol - startCol) + 1;
        numberOfSpan > 1 && cell.setAttribute("colspan", numberOfSpan.toString());
        for (let i = startCol + 1; i <= endCol; i++) {
            this.getCell(row, i).hide();
        }
        return this;
    }
    mergeRows(col, startRow, endRow) {
        startRow = this.clampRow(startRow);
        endRow = this.clampRow(endRow);
        let cell = this.getCell(startRow, col);
        //check if it already has format and clear
        let oldSpanNumber = ~~cell.getAttribute("colspan");
        if (!oldSpanNumber) {
            for (let i = startRow + 1; i <= endRow; i++) {
                let cell = this.getCell(i, col);
                if (cell.hasAttribute("rowspan")) {
                    console.log("Overlaps another merged row, skipped");
                    return this;
                }
            }
            if (this.getCell(startRow, col).isHidden()) {
                console.log("Overlaps another merged row, skipped");
                return this;
            }
        }
        if (oldSpanNumber > 1) {
            for (let i = startRow + 1; i < startRow + oldSpanNumber; i++) {
                this.getCell(i, col).show();
            }
        }
        cell.removeAttribute("rowspan");
        let numberOfSpan = (endRow - startRow) + 1;
        numberOfSpan > 1 && cell.setAttribute("rowspan", numberOfSpan.toString());
        for (let i = startRow + 1; i <= endRow; i++) {
            this.getCell(i, col).hide();
        }
        return this;
    }
    alignCellVertical(value, row, col) {
        row = this.clampRow(row);
        col = this.clampRow(col);
        let cell = this.getCell(row, col);
        cell.removeClass("align-top", "align-middle", "align-bottom");
        value !== "none" && cell.addClass(`align-${value}`);
        return this;
    }
    alignCellHorizontal(value, row, col) {
        row = this.clampRow(row);
        col = this.clampRow(col);
        let cell = this.getCell(row, col);
        cell.alignText(value);
        return this;
    }
    setRowColor(row, value) {
        row = this.clampRow(row);
        let bodyRow = __classPrivateFieldGet(this, _Table_bodyRows, "f")[row];
        __classPrivateFieldGet(this, _Table_rowColors, "f")[row] && bodyRow.removeClass(`table-${__classPrivateFieldGet(this, _Table_rowColors, "f")[row]}`);
        if (value) {
            __classPrivateFieldGet(this, _Table_rowColors, "f")[row] = value;
            bodyRow.addClass(`table-${__classPrivateFieldGet(this, _Table_rowColors, "f")[row]}`);
        }
        return this;
    }
    setCellColor(row, col, value) {
        row = this.clampRow(row);
        col = this.clampRow(col);
        let bodyCell = __classPrivateFieldGet(this, _Table_bodyRows, "f")[row].getChild(col);
        __classPrivateFieldGet(this, _Table_cellColors, "f")[row][col] && bodyCell.removeClass(`table-${__classPrivateFieldGet(this, _Table_cellColors, "f")[row][col]}`);
        if (value) {
            __classPrivateFieldGet(this, _Table_cellColors, "f")[row][col] = value;
            bodyCell.addClass(`table-${__classPrivateFieldGet(this, _Table_cellColors, "f")[row][col]}`);
        }
        return this;
    }
    // Footer
    showFooter() {
        __classPrivateFieldGet(this, _Table_footer, "f").show();
        return this;
    }
    hideFooter() {
        __classPrivateFieldGet(this, _Table_footer, "f").hide();
        return this;
    }
    getFooterCellText(col) {
        col = this.clampCol(col);
        return __classPrivateFieldGet(this, _Table_footerRow, "f").getChild(col).getText();
    }
    setFooterCellText(col, text) {
        col = this.clampCol(col);
        __classPrivateFieldGet(this, _Table_footerRow, "f").getChild(col).setText(text);
        return this;
    }
    setFooterCellContent(col, content) {
        col = this.clampCol(col);
        let cell = __classPrivateFieldGet(this, _Table_footerRow, "f").getChild(col);
        cell.clearChildren();
        content && cell.setChild(content);
        return this;
    }
    mergeFooterColumns(startCol, endCol) {
        startCol = this.clampCol(startCol);
        endCol = this.clampCol(endCol);
        let cell = __classPrivateFieldGet(this, _Table_footerRow, "f").getChild(startCol);
        let oldSpanNumber = ~~cell.getAttribute("colspan");
        //check if it already has format and clear
        if (!oldSpanNumber) {
            for (let i = startCol + 1; i <= endCol; i++) {
                let cell = __classPrivateFieldGet(this, _Table_footerRow, "f").getChild(i);
                if (cell.hasAttribute("colspan")) {
                    console.log("Overlaps another merged column, skipped");
                    return this;
                }
            }
            if (__classPrivateFieldGet(this, _Table_footerRow, "f").getChild(startCol).isHidden()) {
                console.log("Overlaps another merged row, skipped");
                return this;
            }
        }
        if (oldSpanNumber > 1) {
            for (let i = startCol + 1; i < startCol + oldSpanNumber; i++) {
                __classPrivateFieldGet(this, _Table_footerRow, "f").getChild(i).show();
            }
        }
        cell.removeAttribute("colspan");
        let numberOfSpan = (endCol - startCol) + 1;
        numberOfSpan > 1 && cell.setAttribute("colspan", numberOfSpan.toString());
        for (let i = startCol + 1; i <= endCol; i++) {
            __classPrivateFieldGet(this, _Table_footerRow, "f").getChild(i).hide();
        }
        return this;
    }
    alignFooterCellVertical(value, col) {
        col = this.clampRow(col);
        let cell = __classPrivateFieldGet(this, _Table_footerRow, "f").getChild(col);
        cell.removeClass("align-top", "align-middle", "align-bottom");
        value !== "none" && cell.addClass(`align-${value}`);
        return this;
    }
    alignFooterCellHorizontal(value, col) {
        col = this.clampRow(col);
        let cell = __classPrivateFieldGet(this, _Table_footerRow, "f").getChild(col);
        cell.alignText(value);
        return this;
    }
    setFooterColor(value) {
        __classPrivateFieldGet(this, _Table_footerRow, "f").removeClass(`table-${__classPrivateFieldGet(this, _Table_footerColor, "f")}`);
        if (value) {
            __classPrivateFieldSet(this, _Table_footerColor, value, "f");
            __classPrivateFieldGet(this, _Table_footerRow, "f").addClass(`table-${__classPrivateFieldGet(this, _Table_footerColor, "f")}`);
        }
        return this;
    }
    setFooterCellColor(col, value) {
        col = this.clampCol(col);
        let footerCell = __classPrivateFieldGet(this, _Table_footerRow, "f").getChild(col);
        __classPrivateFieldGet(this, _Table_footerColors, "f")[col] && footerCell.removeClass(`table-${__classPrivateFieldGet(this, _Table_footerColors, "f")[col]}`);
        if (value) {
            __classPrivateFieldGet(this, _Table_footerColors, "f")[col] = value;
            footerCell.addClass(`table-${__classPrivateFieldGet(this, _Table_footerColors, "f")[col]}`);
        }
        return this;
    }
    setColor(value) {
        __classPrivateFieldGet(this, _Table_table, "f").removeClass(`table-${__classPrivateFieldGet(this, _Table_tableColor, "f")}`);
        if (value) {
            __classPrivateFieldSet(this, _Table_tableColor, value, "f");
            __classPrivateFieldGet(this, _Table_table, "f").addClass(`table-${__classPrivateFieldGet(this, _Table_tableColor, "f")}`);
        }
        return this;
    }
    striped(value = true) {
        __classPrivateFieldGet(this, _Table_table, "f").removeClass("table-striped");
        value && __classPrivateFieldGet(this, _Table_table, "f").addClass("table-striped");
        return this;
    }
    hoverable(value = true) {
        __classPrivateFieldGet(this, _Table_table, "f").removeClass("table-hover");
        value && __classPrivateFieldGet(this, _Table_table, "f").addClass("table-hover");
        return this;
    }
    bordered(value = true) {
        __classPrivateFieldGet(this, _Table_table, "f").removeClass("table-bordered");
        value && __classPrivateFieldGet(this, _Table_table, "f").addClass("table-bordered");
        return this;
    }
    setBorderColor(value) {
        __classPrivateFieldGet(this, _Table_table, "f").removeStyle("border-color");
        value && __classPrivateFieldGet(this, _Table_table, "f").setStyle("border-color", value);
        return this;
    }
    setBorderless(value = true) {
        __classPrivateFieldGet(this, _Table_table, "f").removeClass("table-borderless");
        value && __classPrivateFieldGet(this, _Table_table, "f").addClass("table-borderless");
        return this;
    }
    small(value = true) {
        __classPrivateFieldGet(this, _Table_table, "f").removeClass("table-sm");
        value && __classPrivateFieldGet(this, _Table_table, "f").addClass("table-sm");
        return this;
    }
    ;
    setCaptionText(value, align = "none") {
        __classPrivateFieldGet(this, _Table_caption, "f").setText(value);
        __classPrivateFieldGet(this, _Table_table, "f").removeClass("caption-top");
        align === "top" && __classPrivateFieldGet(this, _Table_table, "f").addClass("caption-top");
        return this;
    }
    ;
    responsive(value = true, breakpoint) {
        this.removeClass(`table-responsive`);
        for (const bp of BREAKPOINTS) {
            this.removeClass(`table-responsive-${bp}`);
        }
        value && (breakpoint ? this.addClass(`table-responsive-${breakpoint}`) : this.addClass(`table-responsive`));
        return this;
    }
    ;
}
_Table_table = new WeakMap(), _Table_header = new WeakMap(), _Table_headerRow = new WeakMap(), _Table_body = new WeakMap(), _Table_bodyRows = new WeakMap(), _Table_footer = new WeakMap(), _Table_footerRow = new WeakMap(), _Table_caption = new WeakMap(), _Table_rows = new WeakMap(), _Table_cols = new WeakMap(), _Table_headerColor = new WeakMap(), _Table_headerColors = new WeakMap(), _Table_rowColors = new WeakMap(), _Table_cellColors = new WeakMap(), _Table_footerColor = new WeakMap(), _Table_footerColors = new WeakMap(), _Table_tableColor = new WeakMap();
class TabPanel extends Row {
    constructor(startIdx = 0) {
        super();
        _TabPanel_tabBar.set(this, new Widget("nav").addClass("nav", "nav-tabs"));
        _TabPanel_tabBody.set(this, new Column());
        _TabPanel_lastState.set(this, void 0);
        _TabPanel_changeCallbacks.set(this, []);
        _TabPanel_fireChangeEvenet.set(this, (idx, tabButton) => {
            __classPrivateFieldGet(this, _TabPanel_changeCallbacks, "f").forEach(callback => {
                callback(idx, tabButton);
            });
            __classPrivateFieldSet(this, _TabPanel_lastState, idx, "f");
        });
        _TabPanel_onChangeCallback.set(this, void 0);
        __classPrivateFieldSet(this, _TabPanel_lastState, startIdx, "f");
        this.column().alignItems("stretch");
        __classPrivateFieldGet(this, _TabPanel_tabBar, "f").addClass("nav", "nav-tabs").setAttribute("role", "tablist");
        super.addChildren(__classPrivateFieldGet(this, _TabPanel_tabBar, "f"));
        {
            // addChild function will add new tabs
        }
        __classPrivateFieldGet(this, _TabPanel_tabBody, "f").addClass("tab-content").alignItems("stretch");
        super.addChildren(__classPrivateFieldGet(this, _TabPanel_tabBody, "f"));
        {
            // addChild function will add new tabs
        }
    }
    addChildren(...args) {
        for (let i = 0; i < args.length; i++) {
            const tabButton = args[i];
            __classPrivateFieldGet(this, _TabPanel_tabBar, "f").addChildren(tabButton);
            tabButton.addEventListener("shown.bs.tab", (e) => {
                let idx = __classPrivateFieldGet(this, _TabPanel_tabBar, "f").getChildren().indexOf(tabButton);
                __classPrivateFieldGet(this, _TabPanel_fireChangeEvenet, "f").call(this, idx, tabButton);
            });
            __classPrivateFieldGet(this, _TabPanel_tabBody, "f").addChildren(tabButton.getContent());
        }
        let _startIdx = Math.min(__classPrivateFieldGet(this, _TabPanel_lastState, "f"), (__classPrivateFieldGet(this, _TabPanel_tabBar, "f").getChildren().length - 1));
        __classPrivateFieldGet(this, _TabPanel_tabBar, "f").getChildren().forEach(tab => {
            tab.setActive(false);
        });
        __classPrivateFieldGet(this, _TabPanel_tabBar, "f").getChild(_startIdx).setActive();
        return this;
    }
    ;
    removeChild(tab) {
        let idx = __classPrivateFieldGet(this, _TabPanel_tabBar, "f").getChildren().indexOf(tab);
        if (idx < 0) {
            return this;
        }
        __classPrivateFieldGet(this, _TabPanel_tabBar, "f").removeChildAt(idx);
        __classPrivateFieldGet(this, _TabPanel_tabBody, "f").removeChildAt(idx);
        return this;
    }
    ;
    removeChildAt(idx) {
        __classPrivateFieldGet(this, _TabPanel_tabBar, "f").removeChildAt(idx);
        __classPrivateFieldGet(this, _TabPanel_tabBody, "f").removeChildAt(idx);
        return this;
    }
    ;
    clearChildren() {
        __classPrivateFieldGet(this, _TabPanel_tabBar, "f").clearChildren();
        __classPrivateFieldGet(this, _TabPanel_tabBody, "f").clearChildren();
        return this;
    }
    ;
    setDisplayType(type) {
        __classPrivateFieldGet(this, _TabPanel_tabBar, "f").removeClass("nav-tabs", "nav-pills");
        type === "tab" && __classPrivateFieldGet(this, _TabPanel_tabBar, "f").addClass("nav-tabs");
        type === "pill" && __classPrivateFieldGet(this, _TabPanel_tabBar, "f").addClass("nav-pills");
        return this;
    }
    vertical() {
        this.row();
        __classPrivateFieldGet(this, _TabPanel_tabBar, "f").addClass("flex-column");
        return this;
    }
    horizontal() {
        this.column();
        __classPrivateFieldGet(this, _TabPanel_tabBar, "f").removeClass("flex-column");
    }
    /**
     * It will stretch tab buttons horizontally.
     * @param {"fill" | "justified" | "none"} value -
     *  - fill: Tab buttons will be stretched with respect to their content size
     *  - justify:  Tab buttons will be stretched equally
     *  - none: Remove stretch
     * @returns
     */
    stretchTabs(value = "fill") {
        __classPrivateFieldGet(this, _TabPanel_tabBar, "f").removeClass("nav-fill", "nav-justified");
        value !== "none" && __classPrivateFieldGet(this, _TabPanel_tabBar, "f").addClass(`nav-${value}`);
        return this;
    }
    showTab(idx) {
        Tab.getOrCreateInstance(__classPrivateFieldGet(this, _TabPanel_tabBar, "f").getChild(idx).getDom()).show();
        return this;
    }
    ;
    /**
     * Callback will be called when state is changed
     * @param {function(Widget, boolean)} callback
     */
    addChangeCallback(callback) {
        __classPrivateFieldGet(this, _TabPanel_changeCallbacks, "f").push(callback);
        return this;
    }
    ;
    removeChangeCallback(callback) {
        let idx = __classPrivateFieldGet(this, _TabPanel_changeCallbacks, "f").indexOf(callback);
        if (idx >= 0) {
            __classPrivateFieldGet(this, _TabPanel_changeCallbacks, "f").splice(idx, 1);
        }
        return this;
    }
    ;
    clearChangeCallbacks() {
        __classPrivateFieldGet(this, _TabPanel_changeCallbacks, "f").length = 0;
        return this;
    }
    ;
    onChange(callback) {
        if (__classPrivateFieldGet(this, _TabPanel_onChangeCallback, "f")) {
            this.removeChangeCallback(__classPrivateFieldGet(this, _TabPanel_onChangeCallback, "f"));
            __classPrivateFieldSet(this, _TabPanel_onChangeCallback, undefined, "f");
        }
        if (callback) {
            __classPrivateFieldSet(this, _TabPanel_onChangeCallback, callback, "f");
            this.addChangeCallback(__classPrivateFieldGet(this, _TabPanel_onChangeCallback, "f"));
        }
        return this;
    }
}
_TabPanel_tabBar = new WeakMap(), _TabPanel_tabBody = new WeakMap(), _TabPanel_lastState = new WeakMap(), _TabPanel_changeCallbacks = new WeakMap(), _TabPanel_fireChangeEvenet = new WeakMap(), _TabPanel_onChangeCallback = new WeakMap();
class instantui_Tab extends NavLink {
    constructor(text = "", content) {
        super(text);
        _Tab_content.set(this, void 0);
        _Tab_id.set(this, "tabButton" + Math.floor(Math.random() * 100000));
        this.setAttribute("data-bs-toggle", "tab");
        // this.addAttribute("type", "button")
        this.setCursor("pointer");
        this.setAttribute("role", "tab");
        this.setTextWrap("nowrap");
        this.setAttribute("id", __classPrivateFieldGet(this, _Tab_id, "f"));
        this.setAttribute("data-bs-target", `#content${__classPrivateFieldGet(this, _Tab_id, "f")}`);
        __classPrivateFieldSet(this, _Tab_content, new TabContent().setAttribute("id", `content${__classPrivateFieldGet(this, _Tab_id, "f")}`), "f");
        this.setContent(content);
    }
    /**
     * Replaces all childs of the button with given one. Leaving empty or passing null clears content.
     * @param {Widget} content
     */
    setContent(content) {
        //todo: update in the Tabpanel if already added
        __classPrivateFieldGet(this, _Tab_content, "f").clearChildren();
        if (content) {
            if (content instanceof TabContent) {
                __classPrivateFieldSet(this, _Tab_content, content, "f");
                __classPrivateFieldGet(this, _Tab_content, "f").setAttribute("id", "content" + __classPrivateFieldGet(this, _Tab_id, "f"));
            }
            else {
                __classPrivateFieldGet(this, _Tab_content, "f").setContent(content);
            }
        }
        return this;
    }
    ;
    getContent() {
        return __classPrivateFieldGet(this, _Tab_content, "f");
    }
    ;
    isActive() {
        return this.hasClass("active");
    }
    ;
    /**
     * It starts this tab and its content as shown.
     */
    setActive(value = true) {
        var _a, _b;
        this.removeClass("active");
        this.setAttribute("aria-selected", "false");
        (_a = __classPrivateFieldGet(this, _Tab_content, "f")) === null || _a === void 0 ? void 0 : _a.removeClass("active", "show");
        if (value) {
            this.addClass("active");
            this.setAttribute("aria-selected", "true");
            (_b = __classPrivateFieldGet(this, _Tab_content, "f")) === null || _b === void 0 ? void 0 : _b.addClass("active", "show");
        }
        return this;
    }
    ;
}
_Tab_content = new WeakMap(), _Tab_id = new WeakMap();
class TabContent extends Widget {
    constructor(content) {
        super("div");
        this.addClass("tab-pane", "fade");
        this.setAttribute("role", "tabpanel");
        content && this.addChildren(content);
    }
    /**
     * Replaces all childs of the button with given one. Leaving empty or passing null clears content.
     * @param {Widget} content
     */
    setContent(content) {
        this.clearChildren();
        content && this.setChild(content);
        return this;
    }
    ;
    setActive(value = true) {
        this.removeClass("active");
        value && this.addClass("active", "show");
        return this;
    }
    ;
    isActive() {
        return this.hasClass("active");
    }
    ;
}
class Text extends Widget {
    constructor(text = "") {
        super("p");
        this.setText(text);
        this.addSpacing();
    }
    /**
     * Make a paragraph stand out by adding
     * @param {boolean} value
     * @returns {Widget} - Self.
     */
    lead(value = true) {
        this.removeClass("lead");
        value && this.addClass("lead");
        return this;
    }
}
class Toast extends Widget {
    constructor(title = "", text = "", color) {
        super("div");
        _Toast_headerWrapper.set(this, new Widget("div"));
        _Toast_header.set(this, new Widget("strong"));
        _Toast_body.set(this, new Widget("div"));
        _Toast_color.set(this, void 0);
        this.addClass("toast", "fade", "show");
        this.setAttribute("role", "alert");
        this.setAttribute("aria-live", "assertive");
        this.setAttribute("aria-atomic", "true");
        let button;
        __classPrivateFieldGet(this, _Toast_headerWrapper, "f").addClass("toast-header");
        {
            __classPrivateFieldGet(this, _Toast_header, "f").setText(title);
            button = new Widget("button");
            button.addClass("btn-close", "ms-auto");
            button.setProperty("type", "button");
            button.setAttribute("aria-label", "Close");
            button.setAttribute("data-bs-dismiss", "toast");
            button.setAttribute("aria-label", "Close");
            __classPrivateFieldGet(this, _Toast_headerWrapper, "f").addChildren(__classPrivateFieldGet(this, _Toast_header, "f"), button);
        }
        __classPrivateFieldGet(this, _Toast_body, "f").addClass("toast-body");
        __classPrivateFieldGet(this, _Toast_body, "f").setText(text);
        this.addChildren(__classPrivateFieldGet(this, _Toast_headerWrapper, "f"), __classPrivateFieldGet(this, _Toast_body, "f"));
        bootstrap_esm_Toast.getOrCreateInstance(this.getDom(), {
            animation: false,
            autohide: false,
            delay: 5000
        });
        color && this.setColor(color);
    }
    /**
     * Sets the color of the toast.
     * @param value - primary | secondary | success | danger | warning | info | light | dark
     */
    setColor(value) {
        this.removeClass(`bg-${__classPrivateFieldGet(this, _Toast_color, "f")}`);
        __classPrivateFieldSet(this, _Toast_color, value, "f");
        value && this.addClass(`bg-${__classPrivateFieldGet(this, _Toast_color, "f")}`);
        return this;
    }
    showHeader() {
        this.insertChild(0, __classPrivateFieldGet(this, _Toast_headerWrapper, "f"));
        return this;
    }
    hideHeader() {
        this.removeChild(__classPrivateFieldGet(this, _Toast_headerWrapper, "f"));
        return this;
    }
    setHeaderText(title) {
        __classPrivateFieldGet(this, _Toast_header, "f").setText(title);
        return this;
    }
    ;
    setBodyText(text) {
        __classPrivateFieldGet(this, _Toast_body, "f").setText(text);
        return this;
    }
    ;
    setHeaderContent(content) {
        __classPrivateFieldGet(this, _Toast_header, "f").clearChildren();
        content && __classPrivateFieldGet(this, _Toast_header, "f").setChild(content);
        return this;
    }
    ;
    getHeaderContent() {
        return __classPrivateFieldGet(this, _Toast_header, "f").getChildren().length ? __classPrivateFieldGet(this, _Toast_header, "f").getChild(0) : undefined;
    }
    ;
    setBodyContent(content) {
        __classPrivateFieldGet(this, _Toast_body, "f").clearChildren();
        content && __classPrivateFieldGet(this, _Toast_body, "f").setChild(content);
        return this;
    }
    ;
    getBodyContent() {
        return __classPrivateFieldGet(this, _Toast_body, "f").getChildren().length ? __classPrivateFieldGet(this, _Toast_body, "f").getChild(0) : undefined;
    }
    ;
    show() {
        Tab.getOrCreateInstance(this.getDom()).show();
        return this;
    }
    ;
    hide() {
        Tab.getOrCreateInstance(this.getDom()).show();
        return this;
    }
    ;
    onShow(callback) {
        this.getDom().addEventListener("show.bs.modal", callback);
        return this;
    }
    ;
    onShown(callback) {
        this.getDom().addEventListener("shown.bs.modal", callback);
        return this;
    }
    ;
    onHide(callback) {
        this.getDom().addEventListener("hide.bs.modal", callback);
        return this;
    }
    ;
    onHidden(callback) {
        this.getDom().addEventListener("hidden.bs.modal", callback);
        return this;
    }
    ;
}
_Toast_headerWrapper = new WeakMap(), _Toast_header = new WeakMap(), _Toast_body = new WeakMap(), _Toast_color = new WeakMap();
class ToggleButton extends Widget {
    constructor(text = "", startState = false, color = "primary") {
        super("div");
        _ToggleButton_id.set(this, "checkboxButton" + Math.floor(Math.random() * 100000));
        _ToggleButton_text.set(this, new Widget("label"));
        _ToggleButton_input.set(this, new Widget("input"));
        _ToggleButton_color.set(this, void 0);
        _ToggleButton_lastState.set(this, false);
        _ToggleButton_changeCallbacks.set(this, []);
        _ToggleButton_fireChangeEvenet.set(this, () => {
            __classPrivateFieldGet(this, _ToggleButton_changeCallbacks, "f").forEach(callback => {
                callback(this.isChecked(), this);
            });
            __classPrivateFieldSet(this, _ToggleButton_lastState, this.isChecked(), "f");
        });
        _ToggleButton_onChangeCallback.set(this, void 0);
        this.addClass("btn-group");
        this.setAttribute("role", "group");
        this.setStyle("padding", "1px"); // otherwise truncate cuts border
        __classPrivateFieldSet(this, _ToggleButton_lastState, startState, "f");
        __classPrivateFieldGet(this, _ToggleButton_input, "f").addClass("btn-check");
        __classPrivateFieldGet(this, _ToggleButton_input, "f").setProperty("type", "checkbox");
        __classPrivateFieldGet(this, _ToggleButton_input, "f").setProperty("autocomplete", "off");
        startState && __classPrivateFieldGet(this, _ToggleButton_input, "f").setProperty("checked", true);
        __classPrivateFieldGet(this, _ToggleButton_input, "f").setAttribute("id", __classPrivateFieldGet(this, _ToggleButton_id, "f"));
        __classPrivateFieldGet(this, _ToggleButton_text, "f").addClass("btn");
        __classPrivateFieldGet(this, _ToggleButton_text, "f").setAttribute("for", __classPrivateFieldGet(this, _ToggleButton_id, "f"));
        __classPrivateFieldGet(this, _ToggleButton_text, "f").setText(text);
        this.addChildren(__classPrivateFieldGet(this, _ToggleButton_input, "f"), __classPrivateFieldGet(this, _ToggleButton_text, "f"));
        this.setColor(color);
        __classPrivateFieldGet(this, _ToggleButton_input, "f").addEventListener("change", (e) => {
            __classPrivateFieldGet(this, _ToggleButton_fireChangeEvenet, "f").call(this);
        });
    }
    /**
     * Sets the color of button.
     * @param value - primary | secondary | success | danger | warning | info | light | dark
     */
    setColor(value) {
        __classPrivateFieldGet(this, _ToggleButton_text, "f").removeClass(`btn-outline-${__classPrivateFieldGet(this, _ToggleButton_color, "f")}`);
        __classPrivateFieldSet(this, _ToggleButton_color, value, "f");
        __classPrivateFieldGet(this, _ToggleButton_text, "f").addClass(`btn-outline-${__classPrivateFieldGet(this, _ToggleButton_color, "f")}`);
        return this;
    }
    getColor() {
        return __classPrivateFieldGet(this, _ToggleButton_color, "f");
    }
    /**
     * Sets the size of button
     * @param {"sm" | "md" | "lg" | "none"} size size { "sm" | "md" | "lg" | "none" }
     */
    setButtonSize(size) {
        __classPrivateFieldGet(this, _ToggleButton_text, "f").removeClass("btn-sm", "btn-lg");
        if (size === "sm" || size === "lg") {
            __classPrivateFieldGet(this, _ToggleButton_text, "f").addClass("btn-" + size);
        }
        return this;
    }
    ;
    getContent() {
        return __classPrivateFieldGet(this, _ToggleButton_text, "f").getChild(0);
    }
    /**
     * Replaces all childs of the button with given one. Leaving empty or passing null clears content.
     * @param {Widget} content
     */
    setContent(content) {
        __classPrivateFieldGet(this, _ToggleButton_text, "f").clearChildren();
        content && __classPrivateFieldGet(this, _ToggleButton_text, "f").setChild(content);
        return this;
    }
    ;
    getText() {
        return __classPrivateFieldGet(this, _ToggleButton_text, "f").getText();
    }
    /**
     * Sets the text of the button.
     * @param {string} text
     */
    setText(text) {
        __classPrivateFieldGet(this, _ToggleButton_text, "f").setText(text);
        return this;
    }
    ;
    truncateText(value = true) {
        value ? this.setOverflow("hidden") : this.setOverflow();
        __classPrivateFieldGet(this, _ToggleButton_text, "f").truncateText(value);
        return this;
    }
    /**
     * Toggles the button if it is set as toggle button.
     */
    toggle() {
        __classPrivateFieldGet(this, _ToggleButton_input, "f").setProperty("checked", !__classPrivateFieldGet(this, _ToggleButton_lastState, "f"));
        return this;
    }
    ;
    /**
     * Sets checked if it is a toggle button.
     * @param {boolean} [value]
     */
    setChecked(value = true) {
        __classPrivateFieldGet(this, _ToggleButton_input, "f").setProperty("checked", value);
        return this;
    }
    ;
    setDefault(value) {
        __classPrivateFieldGet(this, _ToggleButton_input, "f").setProperty("defaultChecked", value);
        return this;
    }
    /**
     * Returns if this toggle is active or not.
     */
    isChecked() {
        return __classPrivateFieldGet(this, _ToggleButton_input, "f").getProperty("checked");
    }
    ;
    /**
     * Callback will be called when state is changed
     * @param {function(Widget, boolean)} callback
     */
    addChangeCallback(callback) {
        __classPrivateFieldGet(this, _ToggleButton_changeCallbacks, "f").push(callback);
    }
    ;
    removeChangeCallback(callback) {
        let idx = __classPrivateFieldGet(this, _ToggleButton_changeCallbacks, "f").indexOf(callback);
        if (idx >= 0) {
            __classPrivateFieldGet(this, _ToggleButton_changeCallbacks, "f").splice(idx, 1);
        }
    }
    ;
    clearChangeCallbacks() {
        __classPrivateFieldGet(this, _ToggleButton_changeCallbacks, "f").length = 0;
    }
    ;
    onChange(callback) {
        if (__classPrivateFieldGet(this, _ToggleButton_onChangeCallback, "f")) {
            this.removeChangeCallback(__classPrivateFieldGet(this, _ToggleButton_onChangeCallback, "f"));
            __classPrivateFieldSet(this, _ToggleButton_onChangeCallback, undefined, "f");
        }
        if (callback) {
            __classPrivateFieldSet(this, _ToggleButton_onChangeCallback, callback, "f");
            this.addChangeCallback(__classPrivateFieldGet(this, _ToggleButton_onChangeCallback, "f"));
        }
        return this;
    }
}
_ToggleButton_id = new WeakMap(), _ToggleButton_text = new WeakMap(), _ToggleButton_input = new WeakMap(), _ToggleButton_color = new WeakMap(), _ToggleButton_lastState = new WeakMap(), _ToggleButton_changeCallbacks = new WeakMap(), _ToggleButton_fireChangeEvenet = new WeakMap(), _ToggleButton_onChangeCallback = new WeakMap();
class TreeView extends Widget {
    constructor() {
        super("ul");
        _TreeView_textColor.set(this, "dark");
        _TreeView_bgColor.set(this, "transparent");
        this.addClass("nav", "flex-column")
            .setTextColor(__classPrivateFieldGet(this, _TreeView_textColor, "f"));
    }
    /**
     * Sets the color of tree node text.
     * @param {string} value - primary | secondary | success | danger | warning | info | light | dark
     * @returns itseff
     */
    setTextColor(value) {
        __classPrivateFieldSet(this, _TreeView_textColor, value, "f");
        super.setTextColor(__classPrivateFieldGet(this, _TreeView_textColor, "f"));
        for (const treeNode of this.getChildren()) {
            treeNode.setTextColor(__classPrivateFieldGet(this, _TreeView_textColor, "f"));
        }
        return this;
    }
    /**
     * Sets the color of tree node bg.
     * @param value - primary | secondary | success | danger | warning | info | light | dark
     * @returns
     */
    setBgColor(value) {
        __classPrivateFieldSet(this, _TreeView_bgColor, value, "f");
        super.setBgColor(__classPrivateFieldGet(this, _TreeView_bgColor, "f"));
        for (const treeNode of this.getChildren()) {
            treeNode.setBgColor(__classPrivateFieldGet(this, _TreeView_bgColor, "f"));
        }
        return this;
    }
    clearActive() {
        let children = this.getChildren();
        for (const treeNode of children) {
            treeNode.setActive(false);
        }
        return this;
    }
    addListenerRecursive(elm) {
        for (const treeNode of elm.getChildren()) {
            this.addListenerRecursive(treeNode);
        }
        elm.addEventListener("click", () => {
            this.clearActive();
            elm.setActive();
        });
    }
    setActive(elm) {
        this.clearActive();
        elm.setActive();
    }
    addChildren(...args) {
        for (const treeNode of args) {
            treeNode.removeSpacing("ms-3");
            treeNode.setTextColor(__classPrivateFieldGet(this, _TreeView_textColor, "f"));
            treeNode.setBgColor(__classPrivateFieldGet(this, _TreeView_bgColor, "f"));
            this.addListenerRecursive(treeNode);
        }
        super.addChildren(...args);
        return this;
    }
    ;
}
_TreeView_textColor = new WeakMap(), _TreeView_bgColor = new WeakMap();
class TreeNode extends Widget {
    constructor(text = "", link = "") {
        super("li");
        _TreeNode_link.set(this, void 0);
        // #linkContent: Widget
        _TreeNode_iconGroup.set(this, void 0);
        _TreeNode_iconOpen.set(this, void 0);
        _TreeNode_iconClose.set(this, void 0);
        _TreeNode_isSublist.set(this, false);
        _TreeNode_collapse.set(this, void 0);
        _TreeNode_subList.set(this, void 0);
        this.addClass("nav-item");
        __classPrivateFieldSet(this, _TreeNode_iconGroup, new Widget("div").setVisibility(false)
            .setCursor("pointer"), "f");
        {
            __classPrivateFieldSet(this, _TreeNode_iconOpen, new Icon("plus-square").removeClass("px-2").addClass("px-1"), "f");
            __classPrivateFieldSet(this, _TreeNode_iconClose, new Icon("dash").hide().removeClass("px-2").addClass("px-1"), "f");
            __classPrivateFieldGet(this, _TreeNode_iconGroup, "f").addChildren(__classPrivateFieldGet(this, _TreeNode_iconOpen, "f"), __classPrivateFieldGet(this, _TreeNode_iconClose, "f"));
        }
        __classPrivateFieldSet(this, _TreeNode_collapse, new Collapse(false).hide(), "f");
        {
            __classPrivateFieldSet(this, _TreeNode_subList, new Widget("ul")
                .addClass("nav", "flex-column").addSpacing("ps-2"), "f");
            __classPrivateFieldGet(this, _TreeNode_collapse, "f").addChildren(__classPrivateFieldGet(this, _TreeNode_subList, "f"));
        }
        __classPrivateFieldSet(this, _TreeNode_link, new Link(text, link)
            .addClass("list-group-item", "list-group-item-action", "treenode")
            .setStyle("border", "none")
            .addSpacing("px-2", "py-1")
            .setRound(), "f");
        // this.#linkContent = new Row().addChild(this.#link).alignItems("center")
        let linkGrp = new Row().addChildren(__classPrivateFieldGet(this, _TreeNode_iconGroup, "f"), __classPrivateFieldGet(this, _TreeNode_link, "f")).alignItems("center");
        super.addChildren(linkGrp, __classPrivateFieldGet(this, _TreeNode_collapse, "f"));
        __classPrivateFieldGet(this, _TreeNode_iconGroup, "f").addEventListener("click", (e) => {
            if (__classPrivateFieldGet(this, _TreeNode_collapse, "f").isOpen()) {
                __classPrivateFieldGet(this, _TreeNode_iconOpen, "f").show();
                __classPrivateFieldGet(this, _TreeNode_iconClose, "f").hide();
            }
            else {
                __classPrivateFieldGet(this, _TreeNode_iconOpen, "f").hide();
                __classPrivateFieldGet(this, _TreeNode_iconClose, "f").show();
            }
            __classPrivateFieldGet(this, _TreeNode_collapse, "f").toggle();
        });
        __classPrivateFieldGet(this, _TreeNode_collapse, "f").onChange((expanded, elm) => {
            if (expanded) {
                __classPrivateFieldGet(this, _TreeNode_iconOpen, "f").hide();
                __classPrivateFieldGet(this, _TreeNode_iconClose, "f").show();
            }
            else {
                __classPrivateFieldGet(this, _TreeNode_iconOpen, "f").show();
                __classPrivateFieldGet(this, _TreeNode_iconClose, "f").hide();
            }
        });
    }
    enableSublist() {
        if (!__classPrivateFieldGet(this, _TreeNode_isSublist, "f")) {
            __classPrivateFieldSet(this, _TreeNode_isSublist, true, "f");
            __classPrivateFieldGet(this, _TreeNode_iconGroup, "f").setVisibility(true);
            __classPrivateFieldGet(this, _TreeNode_collapse, "f").show();
        }
    }
    disableSublist() {
        if (__classPrivateFieldGet(this, _TreeNode_isSublist, "f")) {
            __classPrivateFieldSet(this, _TreeNode_isSublist, false, "f");
            __classPrivateFieldGet(this, _TreeNode_iconGroup, "f").setVisibility(false);
            __classPrivateFieldGet(this, _TreeNode_collapse, "f").hide();
        }
    }
    getLink() {
        return __classPrivateFieldGet(this, _TreeNode_link, "f").getAttribute("href");
    }
    setLink(link) {
        __classPrivateFieldGet(this, _TreeNode_link, "f").setAttribute("href", link);
        return this;
    }
    toggle() {
        __classPrivateFieldGet(this, _TreeNode_collapse, "f").toggle();
        return this;
    }
    isOpen() {
        return __classPrivateFieldGet(this, _TreeNode_collapse, "f").hasClass("show");
    }
    open() {
        __classPrivateFieldGet(this, _TreeNode_collapse, "f").show();
        __classPrivateFieldGet(this, _TreeNode_collapse, "f").open();
        return this;
    }
    close() {
        __classPrivateFieldGet(this, _TreeNode_collapse, "f").hide();
        __classPrivateFieldGet(this, _TreeNode_collapse, "f").close();
        return this;
    }
    /**
     * Replaces all childs of the button with given one. Leaving empty or passing null clears content.
     * @param {Widget} content
     */
    setContent(content) {
        __classPrivateFieldGet(this, _TreeNode_link, "f").removeSpacing("px-0");
        __classPrivateFieldGet(this, _TreeNode_link, "f").addSpacing("px-2");
        __classPrivateFieldGet(this, _TreeNode_link, "f").clearChildren();
        if (content) {
            __classPrivateFieldGet(this, _TreeNode_link, "f").removeSpacing("px-2");
            __classPrivateFieldGet(this, _TreeNode_link, "f").addSpacing("px-0");
            __classPrivateFieldGet(this, _TreeNode_link, "f").setChild(content);
        }
        return this;
    }
    ;
    // default overrides incase they are needed
    addChildren(...args) {
        __classPrivateFieldGet(this, _TreeNode_subList, "f").addChildren(...args);
        this.enableSublist();
        return this;
    }
    ;
    getChild(idx) {
        return __classPrivateFieldGet(this, _TreeNode_subList, "f").getChild(idx);
    }
    ;
    getChildren() {
        return __classPrivateFieldGet(this, _TreeNode_subList, "f").getChildren();
    }
    ;
    removeChild(...args) {
        __classPrivateFieldGet(this, _TreeNode_subList, "f").removeChild(...args);
        this.getChildren().length === 0 && this.disableSublist();
        return this;
    }
    ;
    replaceChild(child, idx) {
        __classPrivateFieldGet(this, _TreeNode_subList, "f").replaceChild(child, idx);
        this.getChildren().length > 0 ? this.enableSublist() : this.disableSublist();
        return this;
    }
    ;
    setChild(...args) {
        __classPrivateFieldGet(this, _TreeNode_subList, "f").setChild(...args);
        this.getChildren().length > 0 ? this.enableSublist() : this.disableSublist();
        return this;
    }
    ;
    addEventListener(evnt, callback, options = false) {
        __classPrivateFieldGet(this, _TreeNode_link, "f").addEventListener(evnt, callback, options);
        return this;
    }
    ;
    removeEventListener(callback, evnt) {
        __classPrivateFieldGet(this, _TreeNode_link, "f").removeEventListener(callback, evnt);
        return this;
    }
    ;
    clearEventListeners() {
        __classPrivateFieldGet(this, _TreeNode_link, "f").clearEventListeners();
        return this;
    }
    ;
    /**
     * Sets the color of tree node.
     * @param {string} value - primary, secondary, success, danger, warning, info, light, dark
     * @returns itself
     */
    setTextColor(color) {
        __classPrivateFieldGet(this, _TreeNode_link, "f").setColor(color);
        __classPrivateFieldGet(this, _TreeNode_isSublist, "f") && __classPrivateFieldGet(this, _TreeNode_subList, "f").getChildren().forEach(elm => elm.setTextColor(color));
        return this;
    }
    setActive(value = true) {
        __classPrivateFieldGet(this, _TreeNode_link, "f").removeClass("active");
        __classPrivateFieldGet(this, _TreeNode_isSublist, "f") && __classPrivateFieldGet(this, _TreeNode_subList, "f").getChildren().forEach(elm => elm.setActive(false));
        value && __classPrivateFieldGet(this, _TreeNode_link, "f").addClass("active");
        return this;
    }
}
_TreeNode_link = new WeakMap(), _TreeNode_iconGroup = new WeakMap(), _TreeNode_iconOpen = new WeakMap(), _TreeNode_iconClose = new WeakMap(), _TreeNode_isSublist = new WeakMap(), _TreeNode_collapse = new WeakMap(), _TreeNode_subList = new WeakMap();
class UnorderedList extends Widget {
    constructor(...items) {
        super("ul");
        items.forEach(item => {
            this.addChildren(new Widget("li").setText(item));
        });
    }
    unstyled(value = true) {
        this.removeClass(`list-unstyled`);
        value && this.addClass(`list-unstyled`);
    }
    setInline(value = true) {
        this.removeClass("list-inline");
        value && this.addClass("list-inline");
        return this;
    }
}
class Video extends Widget {
    constructor(src = "", options = { controls: true, autoplay: false, muted: false, loop: false }) {
        super("video");
        _Video_source.set(this, void 0);
        __classPrivateFieldSet(this, _Video_source, new Widget("source").setAttribute("src", src), "f");
        this.addChild(__classPrivateFieldGet(this, _Video_source, "f"));
        options.controls && this.setAttribute("controls", "");
        options.autoplay && this.setAttribute("autoplay", "");
        options.muted && this.setAttribute("muted", "");
        options.loop && this.setAttribute("loop", "");
    }
    setSrc(src) {
        __classPrivateFieldGet(this, _Video_source, "f").setAttribute("src", src);
        return this;
    }
    /**
     * Specifies the vertical dimension
     * @param {number} value - Valid input: "image"
     */
    setVideoHeight(value) {
        this.setProperty("height", value);
        return this;
    }
    /**
     * Specifies the horizontal dimension
     * @param {number} value - Valid input: "image"
     */
    setVideoWidth(value) {
        this.setProperty("width", value);
        return this;
    }
    setControls(value = true) {
        this.removeAttribute("controls");
        value && this.setAttribute("controls", "");
        return this;
    }
    setAutoplay(value = true) {
        this.removeAttribute("autoplay");
        value && this.setAttribute("autoplay", "");
        return this;
    }
    setMuted(value = true) {
        this.removeAttribute("muted");
        value && this.setAttribute("muted", "");
        return this;
    }
}
_Video_source = new WeakMap();
function isMobileDevice() {
    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
}
class Color {
    /**
     * Accent color of the button, sets all secondary effects automatically depending on given color.
     * @param {string | number} color - Hex color code, valid inputs: "rgb", "rgba", "rrggbb", "rrggbbaa", "#rgb", "#rgba", "#rrggbb", "#rrggbbaa", 0xrgb, 0xrgba, 0xrrggbb, 0xrrggbbaa
     */
    constructor(color, textColor, name) {
        this.color = "#" + (typeof color === "string" ? color.replace(/#/g, "") : color.toString(16));
        if (![4, 5, 7, 9].includes(this.color.length)) {
            console.log('Input must be a valid hex code: "rgb", "rrggbb", "rrggbbaa", "#rgb", "#rrggbb", "#rrggbbaa", 0xrgb, 0xrrggbb, 0xrrggbbaa');
            this.color = "#6c757dff";
        }
        this.color.length === 4 && (this.color = this.color[0] + this.color[1] + this.color[1] + this.color[2] + this.color[2] + this.color[3] + this.color[3]);
        this.color.length === 5 && (this.color = this.color[0] + this.color[1] + this.color[1] + this.color[2] + this.color[2] + this.color[3] + this.color[3], +this.color[4] + this.color[4]);
        this.color.length === 7 && (this.color += "ff");
        this.textColor = textColor !== null && textColor !== void 0 ? textColor : Color.invertColor(this.color.slice(0, 7), true);
        this.name = name !== null && name !== void 0 ? name : `clr${this.color.slice(1)}`;
    }
    static setOpacity(color, l) {
        let op = Math.floor(parseInt(color.slice(7), 16) * l).toString(16);
        op = op.length === 1 ? "0" + op : op;
        return color.slice(0, 7) + op;
    }
    static invertColor(hex, bw = false, treshold = .62) {
        function padZero(str, len) {
            len = len || 2;
            var zeros = new Array(len).join('0');
            return (zeros + str).slice(-len);
        }
        if (hex.indexOf('#') === 0) {
            hex = hex.slice(1);
        }
        // convert 3-digit hex to 6-digits.
        if (hex.length === 3) {
            hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
        }
        if (hex.length !== 6) {
            throw new Error('Invalid HEX color.');
        }
        var r = parseInt(hex.slice(0, 2), 16), g = parseInt(hex.slice(2, 4), 16), b = parseInt(hex.slice(4, 6), 16);
        if (bw) {
            // http://stackoverflow.com/a/3943023/112731
            return (r * 0.299 + g * 0.587 + b * 0.114) > 255 * treshold
                ? '#000000'
                : '#FFFFFF';
        }
        // invert color components
        let rStr = (255 - r).toString(16);
        let gStr = (255 - g).toString(16);
        let bStr = (255 - b).toString(16);
        // pad each with zeros and return
        return "#" + padZero(rStr) + padZero(gStr) + padZero(bStr);
    }
    static brightness(hex) {
        if (hex.indexOf('#') === 0) {
            hex = hex.slice(1);
        }
        // convert 3-digit hex to 6-digits.
        if (hex.length === 3) {
            hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
        }
        if (hex.length !== 6) {
            throw new Error('Invalid HEX color.');
        }
        var r = parseInt(hex.slice(0, 2), 16), g = parseInt(hex.slice(2, 4), 16), b = parseInt(hex.slice(4, 6), 16);
        return (r * 0.299 + g * 0.587 + b * 0.114) / 255;
    }
    // https://github.com/open-ui/open-ui/blob/master/src/utils/color.js
    /**
    Generate a random number between the passed `min` and `max` values
    @method getRand
    @param {Number} min  Minimum value of calculated number
    @param {Number} max  Maximum value of calculated number
    @return {Number} Returns pseudo-random number between §min§ and §max§
    */
    static getRand(min, max) {
        return Math.floor(Math.random() * (max - min)) + min;
    }
    /**
    Convert a HEX color string to an RGB
    var color = hex2rgb('#FF0000');
    // color = [255,0,0]
    @method hex2rgb
    @param {String} hex HEX color string
    @return {Array} Returns array of red, blue and green components
    */
    static hex2rgb(hex) {
        var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i, result, r, g, b;
        hex = hex.replace(shorthandRegex, function (r, g, b) {
            return r + r + g + g + b + b;
        });
        result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})/i.exec(hex);
        r = parseInt(result[1], 16);
        g = parseInt(result[2], 16);
        b = parseInt(result[3], 16);
        return [r, g, b];
    }
    /**  Convert an RGB array to a HEX color string
    var color = rgb2hex([255,0,0]);
    // color = '#FF0000'
    @method rgb2hex
    @param {Array} rgb Array of red, blue and green components
    @return {String} Returns HEX color string
    */
    static rgb2hex(rgb) {
        var hex = '', h, i, c;
        for (i = 0; i < rgb.length; i += 1) {
            c = rgb[i];
            h = c.toString(16);
            h = (h.length === 1) ? "0" + h : h;
            hex += h;
        }
        return '#' + hex;
    }
    /** Convert an RGB array to a HSV array
    var color = rgb2hsv([255,0,0]);
    // color = [0,100,100]
    @method rgb2hsv
    @param {Array} rgb  Array of red, blue and green components
    @return {Array} Returns array of hue, saturation and value components
    */
    static rgb2hsv(rgb) {
        var r = rgb[0], g = rgb[1], b = rgb[2], min = Math.min(r, g, b), max = Math.max(r, g, b), delta = max - min, h, s, v = max;
        v = Math.floor(max / 255 * 100);
        if (max !== 0) {
            s = Math.floor(delta / max * 100);
        }
        else {
            return [0, 0, 0];
        }
        if (delta === 0) {
            h = 0;
        }
        else {
            if (r === max) {
                h = (g - b) / delta;
            }
            else if (g === max) {
                h = 2 + (b - r) / delta;
            }
            else {
                h = 4 + (r - g) / delta;
            }
        }
        h = Math.floor(h * 60);
        if (h < 0) {
            h += 360;
        }
        return [h, s, v];
    }
    /**
    Convert an HSV array to a RGB array
    var color = hsv2rgb([360,100,100]);
    // color = [255,0,0]
    @method hsv2rgb
    @param {Array} hsv Array of hue, saturation and value components
    @return {Array} Returns array of red, blue and green components
    */
    static hsv2rgb(hsv) {
        var r = 0, g = 0, b = 0, i, f, p, q, t, h = hsv[0], s = hsv[1], v = hsv[2];
        h = Math.max(0, Math.min(360, h));
        s = Math.max(0, Math.min(100, s));
        v = Math.max(0, Math.min(100, v));
        s /= 100;
        v /= 100;
        h = h === 360 ? 0 : h;
        if (s === 0) {
            r = g = b = v;
            return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];
        }
        h /= 60;
        i = Math.floor(h);
        f = h - i;
        p = v * (1 - s);
        q = v * (1 - s * f);
        t = v * (1 - s * (1 - f));
        switch (i) {
            case 0:
                r = v;
                g = t;
                b = p;
                break;
            case 1:
                r = q;
                g = v;
                b = p;
                break;
            case 2:
                r = p;
                g = v;
                b = t;
                break;
            case 3:
                r = p;
                g = q;
                b = v;
                break;
            case 4:
                r = t;
                g = p;
                b = v;
                break;
            case 5:
                r = v;
                g = p;
                b = q;
                break;
        }
        r = Math.round(r * 255);
        g = Math.round(g * 255);
        b = Math.round(b * 255);
        return [r, g, b];
    }
    /**
    Convert an RGB array to a HSL array
    var color = rgb2hsl([255,0,0]);
    // color = [0,100,50]
    @method rgb2hsl
    @param {Array} RGB Array of red, green and blue components
    @return {Array} Returns array of hue, saturation and lightness components
    */
    static rgb2hsl(rgb) {
        var r = rgb[0], g = rgb[1], b = rgb[2];
        r /= 255;
        g /= 255;
        b /= 255;
        var max = Math.max(r, g, b), min = Math.min(r, g, b);
        var h = 0, s = 0, l = (max + min) / 2;
        if (max === min) {
            h = s = 0; // achromatic
        }
        else {
            var d = max - min;
            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
            switch (max) {
                case r:
                    h = (g - b) / d + (g < b ? 6 : 0);
                    break;
                case g:
                    h = (b - r) / d + 2;
                    break;
                case b:
                    h = (r - g) / d + 4;
                    break;
            }
            h /= 6;
        }
        return [h, s, l];
    }
    /**
    Convert an HSL array to a RGB array
    var color = hsl2rgb([0,100,50]);
    // color = [255,0,0]
    @method hsl2rgb
    @param {Array} HSL Array of hue, saturation and lightness components
    @return {Array} Returns array of red, green and blue components
    */
    static hsl2rgb(hsl) {
        var h = hsl[0], s = hsl[1], l = hsl[2], r, g, b;
        function hue2rgb(p, q, t) {
            if (t < 0) {
                t += 1;
            }
            if (t > 1) {
                t -= 1;
            }
            if (t < 1 / 6) {
                return p + (q - p) * 6 * t;
            }
            if (t < 1 / 2) {
                return q;
            }
            if (t < 2 / 3) {
                return p + (q - p) * (2 / 3 - t) * 6;
            }
            return p;
        }
        if (s === 0) {
            r = g = b = l; // achromatic
        }
        else {
            var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
            var p = 2 * l - q;
            r = hue2rgb(p, q, h + 1 / 3);
            g = hue2rgb(p, q, h);
            b = hue2rgb(p, q, h - 1 / 3);
        }
        return [r * 255, g * 255, b * 255];
    }
    /**
    Convert a HEX color string to a HSL array
    var color= hex2hsl('#FF0000');
    // color = [0,100,50]
    @method hex2hsl
    @param {String} hex  HEX color string
    @return {Array} Returns array of hue, saturation and lightness components
    */
    static hex2hsl(hex) {
        return this.rgb2hsl(this.hex2rgb(hex));
    }
    /**
    Convert an HSL array to a HEX color string
    var color = hsl2hex([0,100,50]);
    // color = '#FF0000'
    @method hsl2hex
    @param {Array} hsl Array of hue, saturation and lightness components
    @return {String} Returns HEX color string
    */
    static hsl2hex(hsl) {
        return this.rgb2hex(this.hsl2rgb(hsl));
    }
    /**
    Convert an HSV array to HSL array
    var color = hsv2hsl([0,100,100]);
    // color = [0,100,50]
    @method hsv2hsl
    @param {Array} hsv Array of hue, saturation and value components
    @return {Array} Returns array of hue, saturation and lightness components
    */
    static hsv2hsl(hsv) {
        return this.rgb2hsl(this.hsv2rgb(hsv));
    }
    /**
    Convert an HSL array to HSV array
    var color = hsl2hsv([0,100,50]);
    // color = [0,100,100]
    @method hsl2hsv
    @param {Array} hsl Array of hue, saturation and lightness components
    @return {Array} Returns array of hue, saturation and value components
    */
    static hsl2hsv(hsl) {
        return this.rgb2hsv(this.hsl2rgb(hsl));
    }
    /**
    Convert a HEX color string to a HSV array
    var color= hex2hsv('#FF0000');
    // color = [0,100,100]
    @method hex2hsv
    @param {String} hex HEX color string
    @return {Array} Returns array of hue, saturation and value components
    */
    static hex2hsv(hex) {
        return this.rgb2hsv(this.hex2rgb(hex));
    }
    /**
    Convert an HSV array to a HEX color string
    var color = hsv2hex([360,100,100]);
    // color = '#FF0000'
    @method hsv2hex
    @param {Array}  hsv Array of hue, saturation and value components
    @return {String} Returns HEX color string
    */
    static hsv2hex(hsv) {
        return this.rgb2hex(this.hsv2rgb(hsv));
    }
    /**
    Generate a series of color biased (high saturation/lightness) randomized HEX color strings
    var palette= random(5);
    // palette = ["#efa6a8", "#91abb", "#ebac2c", "#2b561", "#7b4b51"]
    @method random
    @param {Number} count Number of random colors to generate
    @param {String} [hex1] HEX color string to set band to generate random color(s)
    @param {String} [hex2] HEX color string to set band to generate random color(s)
    @return {Array} Returns Array of HEX color strings
    */
    static random(count, hex1, hex2) {
        var palette = [], i, h, s, v;
        count = typeof count !== 'number' ? 1 : count;
        for (i = 0; i < count; i += 1) {
            if (hex1 && hex2) {
                var hsv1 = this.hex2hsv(hex1), hsv2 = this.hex2hsv(hex2);
                h = this.getRand(Math.min.apply(Math, [hsv1[0], hsv2[0]]), Math.max.apply(Math, [hsv1[0], hsv2[0]]));
                s = this.getRand(Math.min.apply(Math, [hsv1[1], hsv2[1]]), Math.max.apply(Math, [hsv1[1], hsv2[1]]));
                v = this.getRand(Math.min.apply(Math, [hsv1[2], hsv2[2]]), Math.max.apply(Math, [hsv1[2], hsv2[2]]));
            }
            else {
                h = this.getRand(0, 360);
                s = 100;
                v = this.getRand(75, 100);
            }
            //    palette.push('#' + Math.floor(Math.random() * 16777215).toString(16));
            palette.push(this.hsv2hex([h, s, v]));
        }
        return palette.length === 1 ? palette[0] : palette;
    }
    /**
    Generate (palette of) complementary color(s) from passed HEX color string
    
    var palette= complement('#FF0000', 'split');
    // palette = ["#80ff00", "#00ffff", "#8000ff"]
        
    var palette= complement('#FF0000', 'double');
    // palette = ["#80ff00", "#00ff40", "#00ffff", "#0040ff", "#8000ff"]
    
    @method complement
    @param {String} hex HEX color string
    @param {String} [type] Type of complementary palette to create, defaults to single complementary color, can be `split` or `double`
    @return {Array} Returns array of HEX color strings
    */
    static complement(hex, type) {
        var count = 1, rotation = 180, scope = 0;
        switch (type) {
            case "split":
                count = 3;
                rotation = 180;
                scope = 180;
                break;
            case "double":
                count = 5;
                rotation = 180;
                scope = 180;
                break;
        }
        return this.algorithmic({
            hex: hex,
            count: count,
            scope: scope,
            rotation: 180
        });
    }
    /**
    Generate triadic color palette
    
    var palette= triadic('#FF0000');
    // palette = ["#ff0000", "#00ff00", "#0000ff"]
    
    @method triadic
    @param {String} hex HEX color string
    @return {Array} Returns array of HEX color strings
    */
    static triadic(hex) {
        return this.algorithmic({ hex: hex });
    }
    /**
    Generate tetradic color palette
    
    var palette = triadic('#FF0000');
    // palette = ["#ff0000", "#80ff00", "#00ffff", "#8000ff"]
        
    @method tetradic
    @param {String} hex HEX color string
    @return {Array} Returns array of HEX color strings
    */
    static tetradic(hex) {
        return this.algorithmic({
            hex: hex,
            count: 4
        });
    }
    /**
    Generate pentadic color palette
    
    var palette= triadic('#FF0000');
    // palette = ["#ff0000", "#ccff00", "#00ff66", "#0066ff", "#cc00ff"]
        
    @method pentadic
    @param {String} hex HEX color string
    @return {Array} Returns array of HEX color strings
    */
    static pentadic(hex) {
        return this.algorithmic({
            hex: hex,
            count: 5
        });
    }
    static degrees(degrees, offset) {
        degrees += offset;
        if (degrees > 360) {
            degrees -= 360;
        }
        else if (degrees < 0) {
            degrees += 360;
        }
        return degrees;
    }
    /**
    Generate a color from a percentage point between two colors
    
    var color= percentage(0.5);
    // color = "#f2e600";
        
    @method percentage
    @param {Number} perc Percentage between first and second colors to generate color point from expressed as value between zero and one
    @param {String} [hex1=#ff0000] Starting color HEX value defaults to `#ff0000` red so 0% is red
    @param {String} [hex2=#27ae62] Starting color HEX value defaults to `#1ae500` green so 100% is green
    @return {String} Returns resulting HEX color
    */
    static percentage(perc, hex1, hex2) {
        hex1 = hex1 || '#ff0000';
        hex2 = hex2 || '#27ae62';
        var hsv1 = this.hex2hsv(hex1), hsv2 = this.hex2hsv(hex2);
        return this.hsv2hex([Math.round(hsv1[0] + perc * (hsv2[0] - hsv1[0])), Math.round(hsv1[1] + perc * (hsv2[1] - hsv1[1])), Math.round(hsv1[2] + perc * (hsv2[2] - hsv1[2]))]);
    }
    /**
    Scale either hue, saturation or value of a color by a percentage amount
    
    var scale= percentage(0.5);
    // color = "#f2e600";
        
    @method scale
    @param  {String} hex HEX color string
    @param {Number} perc Percentage to adjust color by
    @param {String} [type=hue] String, scale to adjust, either `hue`, `saturation` or `value`
    @param {Boolean} [abs] Define percentage as absolute value from base to max, defaults to relative value between current and max
    @return {String} Returns resulting HEX color
    */
    static scale(hex, perc, type, abs) {
        type = type || 'hue';
        let rate = (type === 'hue' ? 360 : 100);
        var hsv = this.hex2hsv(hex), adj = type === 'hue' ? hsv[0] : type === 'saturation' ? hsv[1] : hsv[2];
        perc = Math.abs(perc) > 1 ? perc / 100 : perc;
        perc = perc > 0 ?
            abs === true ? perc * rate : adj + (rate - adj) * perc :
            abs === true ? rate + (perc * rate) : adj + (adj * perc);
        return this.hsv2hex([type === "hue" ? perc : hsv[0], type === "saturation" ? perc : hsv[1], type === "value" ? perc : hsv[2]]);
    }
    /**
    Lighten a color by a percentage amount
    
    var color = lighten('#840000', 70);
    // color = "#da0000";
        
    @method lighten
    @param {String} hex HEX color string
    @param {Number} perc Percentage to lighten color by
    @param {Boolean} [abs=lightness] Define percentage lightness as absolute value, defaults to relative
    @return {String} Returns resulting HEX color
    */
    static lighten(hex, perc, abs) {
        perc = perc > 0 ? perc : -1 * perc;
        return this.scale(hex, perc, 'value', abs);
    }
    /**
    Darken a color by a percentage amount
    
    var color = darken('#840000', 70);
    // color = "#da0000";
        
    @method darken
    @param {String} hex HEX color string
    @param {Number} perc Percentage to darken color by
    @param {Boolean} [abs=lightness] Define percentage lightness as absolute value, defaults to relative
    @return {String} Returns resulting HEX color
    */
    static darken(hex, perc, abs) {
        perc = perc < 0 ? perc : -1 * perc;
        return this.scale(hex, perc, 'value', abs);
    }
    /**
    Saturate a color by a percentage amount
    
    var color = saturate('#840000', 70);
    // color = "#820000";
        
    @method saturate
    @param {String} hex HEX color string
    @param {Number} perc Percentage to saturate color by
    @param {Boolean} [abs=lightness] Define percentage saturation as absolute value, defaults to relative
    @return {String} Returns resulting HEX color
    */
    static saturate(hex, perc, abs) {
        perc = perc > 0 ? perc : -1 * perc;
        return this.scale(hex, perc, 'saturation', abs);
    }
    /**
    Desaturate a color by a percentage amount
    
    var color = desaturate('#840000', 70);
    // color = "#820000";
        
    @method desaturate
    @param {String} hex HEX color string
    @param {Number} perc Percentage to saturate color by
    @param {Boolean} [abs=lightness] Define percentage desaturation as absolute value, defaults to relative
    @return {String} Returns resulting HEX color
    */
    static desaturate(hex, perc, abs) {
        perc = perc < 0 ? perc : -1 * perc;
        return this.scale(hex, perc, 'saturation', abs);
    }
    /**
    Generate algorithmic color palette
    
    var palett e= algorithmic ({hex:'#FF0000'});
    // palette = ["#ff0000", "#00ff00", "#0000ff"]
 
    var palett e= algorithmic ({hex:'#FF0000', count: 5});
    // palette = ["#ff0000", "#ccff00", "#00ff66", "#0066ff", "#cc00ff"]
 
    var palette = algorithmic ({hex:'#FF0000', scope: 100, count:4});
    // palette = ["#ff00d4", "#ff0047", "#ff4700", "#ffd500"]
    var palette = algorithmic ({hex:'#FF0000', type:'saturation', scope:50});
    // palette = ["#ffffff", "#ffbfbf", "#ff8080"]
        
    @method algorithmic
    @param {Object} options Algorithmic color transformation options
    @param {String} options.hex HEX color string
    @param {Number} [options.count=3] Number of colors to produce
    @param {String} [options.type=hue] Widget to calculate on, either `hue`, `saturation` or `value`
    @param {Number} [options.scope=360] Number of degrees of rotation to consider
    @param {Number} [options.rotation=0] Number of degrees of rotation to calculate from
    @return {Array} Returns array of HEX color strings
    */
    // pick a point on the wheel, the number of degrees either side to cover and the split
    static algorithmic(opt) {
        if (!opt.hex) {
            return;
        }
        var hex = opt.hex, count = typeof opt.count === 'undefined' ? 3 : opt.count, type = typeof opt.type === 'undefined' ? 'hue' : opt.type, scope = typeof opt.scope === 'undefined' ? 360 : opt.scope, rotation = typeof opt.rotation === 'undefined' ? 0 : opt.rotation, hsv = this.hex2hsv(hex), h = hsv[0], s = hsv[1], v = hsv[2], origin, steps, palette = [], offset, i;
        // if scope is 360, the start and end point are the same color, so should be avoided, otherwise enlargen the steps
        steps = (type === "hue" && (scope === 360 || scope === 0)) ? scope / count : scope / (count - 1);
        // if scope is 360, start on the current color
        origin = (scope === 360) ? h : this.degrees(this.degrees(h, rotation), -1 * scope / 2);
        for (i = 0; i < count; i += 1) {
            offset = steps * i;
            switch (type) {
                case "hue":
                    palette.push(this.hsv2hex([this.degrees(origin, offset) === 360 ? 0 : this.degrees(origin, offset), s, v]));
                    break;
                case "saturation":
                    palette.push(this.hsv2hex([h, offset, v]));
                    break;
                case "value":
                case "lightness":
                case "brightness":
                    palette.push(this.hsv2hex([h, s, offset]));
                    break;
            }
        }
        return palette;
    }
}
Color.white = "#ffffff";
Color.black = "#000000";
Color.primary = "#0d6efd";
Color.secondary = "#6c757d";
Color.success = "#198754";
Color.info = "#0dcaf0";
Color.warning = "#ffc107";
Color.danger = "#dc3545";
Color.light = "#f8f9fa";
Color.dark = "#212529";
const COLORS = ["primary", "secondary", "success", "danger", "warning", "info", "light", "dark"];
const BUTTON_COLORS = (/* unused pure expression or super */ null && (["primary", "secondary", "success", "danger", "warning", "info", "light", "dark", "link"]));
const TEXT_COLORS = ["primary", "secondary", "success", "danger", "warning", "info", "light", "dark", "body", "muted", "white", "black-50", "white-50", "reset"];
const BG_COLORS = ["primary", "secondary", "success", "danger", "warning", "info", "light", "dark", "body", "white", "transparent"];
const JUSTIFIES = ["start", "end", "center", "between", "around", "evenly"];
const ALIGNS = ["start", "end", "center", "baseline", "stretch"];
const ANGLES = (/* unused pure expression or super */ null && (["deg", "grad", "rad", "turn"]));
const UNITS = (/* unused pure expression or super */ null && (["em", "ex", "ch", "rem", "lh", "vw", "vh", "vmin", "vmax", "cm", "mm", "Q", "in", "pc", "pt", "px", "%"]));
const BREAKPOINTS = ["sm", "md", "lg", "xl", "xxl"];
const POSITIONS = ["static", "relative", "absolute", "fixed", "sticky"];
const PLACEMENTS = ["top-0", "top-50", "top-100", "bot-0", "bot-50", "bot-100", "start-0", "start-50", "start-100", "end-0", "end-50", "end-100"];

})();

window.instantui = __webpack_exports__;
/******/ })()
;